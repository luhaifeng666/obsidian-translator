/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/bind.js"(exports, module2) {
    "use strict";
    module2.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/utils.js"(exports, module2) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    var kindOf = function(cache) {
      return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
      };
    }(Object.create(null));
    function kindOfTest(type) {
      type = type.toLowerCase();
      return function isKindOf(thing) {
        return kindOf(thing) === type;
      };
    }
    function isArray(val) {
      return Array.isArray(val);
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject2(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (kindOf(val) !== "object") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject2(val) && isFunction(val.pipe);
    }
    function isFormData(thing) {
      var pattern = "[object FormData]";
      return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
    }
    var isURLSearchParams = kindOfTest("URLSearchParams");
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    function inherits(constructor, superConstructor, props, descriptors) {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      props && Object.assign(constructor.prototype, props);
    }
    function toFlatObject(sourceObj, destObj, filter) {
      var props;
      var i;
      var prop;
      var merged = {};
      destObj = destObj || {};
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if (!merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    }
    function endsWith(str, searchString, position) {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      var lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    }
    function toArray(thing) {
      if (!thing)
        return null;
      var i = thing.length;
      if (isUndefined(i))
        return null;
      var arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    }
    var isTypedArray = function(TypedArray) {
      return function(thing) {
        return TypedArray && thing instanceof TypedArray;
      };
    }(typeof Uint8Array !== "undefined" && Object.getPrototypeOf(Uint8Array));
    module2.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject: isObject2,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      isTypedArray,
      isFileList
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/buildURL.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module2.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/InterceptorManager.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module2.exports = InterceptorManager;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/AxiosError.js
var require_AxiosError = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/AxiosError.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function AxiosError(message, code, config, request2, response) {
      Error.call(this);
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request2 && (this.request = request2);
      response && (this.response = response);
    }
    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    var prototype = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED"
    ].forEach(function(code) {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, "isAxiosError", { value: true });
    AxiosError.from = function(error, code, config, request2, response, customProps) {
      var axiosError = Object.create(prototype);
      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      });
      AxiosError.call(axiosError, error.message, code, config, request2, response);
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    module2.exports = AxiosError;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/defaults/transitional.js
var require_transitional = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/defaults/transitional.js"(exports, module2) {
    "use strict";
    module2.exports = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/toFormData.js
var require_toFormData = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/toFormData.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function toFormData(obj, formData) {
      formData = formData || new FormData();
      var stack = [];
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils.isDate(value)) {
          return value.toISOString();
        }
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
          if (stack.indexOf(data) !== -1) {
            throw Error("Circular reference detected in " + parentKey);
          }
          stack.push(data);
          utils.forEach(data, function each(value, key) {
            if (utils.isUndefined(value))
              return;
            var fullKey = parentKey ? parentKey + "." + key : key;
            var arr;
            if (value && !parentKey && typeof value === "object") {
              if (utils.endsWith(key, "{}")) {
                value = JSON.stringify(value);
              } else if (utils.endsWith(key, "[]") && (arr = utils.toArray(value))) {
                arr.forEach(function(el) {
                  !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                });
                return;
              }
            }
            build(value, fullKey);
          });
          stack.pop();
        } else {
          formData.append(parentKey, convertValue(data));
        }
      }
      build(obj);
      return formData;
    }
    module2.exports = toFormData;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/settle.js"(exports, module2) {
    "use strict";
    var AxiosError = require_AxiosError();
    module2.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError("Request failed with status code " + response.status, [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));
      }
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/cookies.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module2) {
    "use strict";
    module2.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/combineURLs.js"(exports, module2) {
    "use strict";
    module2.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/buildFullPath.js"(exports, module2) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module2.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/parseHeaders.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module2.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/cancel/CanceledError.js
var require_CanceledError = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/cancel/CanceledError.js"(exports, module2) {
    "use strict";
    var AxiosError = require_AxiosError();
    var utils = require_utils();
    function CanceledError(message) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED);
      this.name = "CanceledError";
    }
    utils.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    module2.exports = CanceledError;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/parseProtocol.js
var require_parseProtocol = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/parseProtocol.js"(exports, module2) {
    "use strict";
    module2.exports = function parseProtocol(url) {
      var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/adapters/xhr.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var transitionalDefaults = require_transitional();
    var AxiosError = require_AxiosError();
    var CanceledError = require_CanceledError();
    var parseProtocol = require_parseProtocol();
    module2.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
          delete requestHeaders["Content-Type"];
        }
        var request2 = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request2.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request2.timeout = config.timeout;
        function onloadend() {
          if (!request2) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request2 ? parseHeaders(request2.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request2.responseText : request2.response;
          var response = {
            data: responseData,
            status: request2.status,
            statusText: request2.statusText,
            headers: responseHeaders,
            config,
            request: request2
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request2 = null;
        }
        if ("onloadend" in request2) {
          request2.onloadend = onloadend;
        } else {
          request2.onreadystatechange = function handleLoad() {
            if (!request2 || request2.readyState !== 4) {
              return;
            }
            if (request2.status === 0 && !(request2.responseURL && request2.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request2.onabort = function handleAbort() {
          if (!request2) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request2));
          request2 = null;
        };
        request2.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request2, request2));
          request2 = null;
        };
        request2.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, request2));
          request2 = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request2) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request2.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request2.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request2.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request2.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request2.upload) {
          request2.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request2) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
            request2.abort();
            request2 = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        var protocol = parseProtocol(fullPath);
        if (protocol && ["http", "https", "file"].indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request2.send(requestData);
      });
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/null.js
var require_null = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/null.js"(exports, module2) {
    module2.exports = null;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/defaults/index.js
var require_defaults = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/defaults/index.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var AxiosError = require_AxiosError();
    var transitionalDefaults = require_transitional();
    var toFormData = require_toFormData();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        var isObjectPayload = utils.isObject(data);
        var contentType = headers && headers["Content-Type"];
        var isFileList;
        if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === "multipart/form-data") {
          var _FormData = this.env && this.env.FormData;
          return toFormData(isFileList ? { "files[]": data } : data, _FormData && new _FormData());
        } else if (isObjectPayload || contentType === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: require_null()
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module2.exports = defaults;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/transformData.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module2.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/cancel/isCancel.js"(exports, module2) {
    "use strict";
    module2.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/dispatchRequest.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var CanceledError = require_CanceledError();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError();
      }
    }
    module2.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
      config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/mergeConfig.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "beforeRedirect": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/env/data.js"(exports, module2) {
    module2.exports = {
      "version": "0.27.2"
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/validator.js"(exports, module2) {
    "use strict";
    var VERSION = require_data().version;
    var AxiosError = require_AxiosError();
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator2(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator2, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator2 === false) {
          throw new AxiosError(formatMessage(opt, " has been removed" + (version ? " in " + version : "")), AxiosError.ERR_DEPRECATED);
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator2 = schema[opt];
        if (validator2) {
          var value = options[opt];
          var result = value === void 0 || validator2(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    module2.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/core/Axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var buildFullPath = require_buildFullPath();
    var validator2 = require_validator();
    var validators = validator2.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request2(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator2.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      var fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    module2.exports = Axios;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/cancel/CancelToken.js"(exports, module2) {
    "use strict";
    var CanceledError = require_CanceledError();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new CanceledError(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module2.exports = CancelToken;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/spread.js"(exports, module2) {
    "use strict";
    module2.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/helpers/isAxiosError.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    };
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/lib/axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios2 = createInstance(defaults);
    axios2.Axios = Axios;
    axios2.CanceledError = require_CanceledError();
    axios2.CancelToken = require_CancelToken();
    axios2.isCancel = require_isCancel();
    axios2.VERSION = require_data().version;
    axios2.toFormData = require_toFormData();
    axios2.AxiosError = require_AxiosError();
    axios2.Cancel = axios2.CanceledError;
    axios2.all = function all(promises) {
      return Promise.all(promises);
    };
    axios2.spread = require_spread();
    axios2.isAxiosError = require_isAxiosError();
    module2.exports = axios2;
    module2.exports.default = axios2;
  }
});

// node_modules/.pnpm/axios@0.27.2/node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/.pnpm/axios@0.27.2/node_modules/axios/index.js"(exports, module2) {
    module2.exports = require_axios();
  }
});

// main.ts
__export(exports, {
  default: () => TranslatorPlugin
});
var import_obsidian4 = __toModule(require("obsidian"));

// settings.ts
var import_obsidian2 = __toModule(require("obsidian"));

// utils.ts
var import_obsidian = __toModule(require("obsidian"));

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).substr(1));
}
var i;
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var stringify_default = stringify;

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default = v4;

// utils.ts
var import_axios = __toModule(require_axios2());

// md5.js
var MD5 = function(string) {
  function RotateLeft(lValue, iShiftBits) {
    return lValue << iShiftBits | lValue >>> 32 - iShiftBits;
  }
  function AddUnsigned(lX, lY) {
    let lX4, lY4, lX8, lY8, lResult;
    lX8 = lX & 2147483648;
    lY8 = lY & 2147483648;
    lX4 = lX & 1073741824;
    lY4 = lY & 1073741824;
    lResult = (lX & 1073741823) + (lY & 1073741823);
    if (lX4 & lY4) {
      return lResult ^ 2147483648 ^ lX8 ^ lY8;
    }
    if (lX4 | lY4) {
      if (lResult & 1073741824) {
        return lResult ^ 3221225472 ^ lX8 ^ lY8;
      } else {
        return lResult ^ 1073741824 ^ lX8 ^ lY8;
      }
    } else {
      return lResult ^ lX8 ^ lY8;
    }
  }
  function F(x2, y, z) {
    return x2 & y | ~x2 & z;
  }
  function G(x2, y, z) {
    return x2 & z | y & ~z;
  }
  function H(x2, y, z) {
    return x2 ^ y ^ z;
  }
  function I(x2, y, z) {
    return y ^ (x2 | ~z);
  }
  function FF(a2, b2, c2, d2, x2, s, ac) {
    a2 = AddUnsigned(a2, AddUnsigned(AddUnsigned(F(b2, c2, d2), x2), ac));
    return AddUnsigned(RotateLeft(a2, s), b2);
  }
  function GG(a2, b2, c2, d2, x2, s, ac) {
    a2 = AddUnsigned(a2, AddUnsigned(AddUnsigned(G(b2, c2, d2), x2), ac));
    return AddUnsigned(RotateLeft(a2, s), b2);
  }
  function HH(a2, b2, c2, d2, x2, s, ac) {
    a2 = AddUnsigned(a2, AddUnsigned(AddUnsigned(H(b2, c2, d2), x2), ac));
    return AddUnsigned(RotateLeft(a2, s), b2);
  }
  function II(a2, b2, c2, d2, x2, s, ac) {
    a2 = AddUnsigned(a2, AddUnsigned(AddUnsigned(I(b2, c2, d2), x2), ac));
    return AddUnsigned(RotateLeft(a2, s), b2);
  }
  function ConvertToWordArray(string2) {
    let lWordCount;
    const lMessageLength = string2.length;
    const lNumberOfWords_temp1 = lMessageLength + 8;
    const lNumberOfWords_temp2 = (lNumberOfWords_temp1 - lNumberOfWords_temp1 % 64) / 64;
    const lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
    const lWordArray = Array(lNumberOfWords - 1);
    let lBytePosition = 0;
    let lByteCount = 0;
    while (lByteCount < lMessageLength) {
      lWordCount = (lByteCount - lByteCount % 4) / 4;
      lBytePosition = lByteCount % 4 * 8;
      lWordArray[lWordCount] = lWordArray[lWordCount] | string2.charCodeAt(lByteCount) << lBytePosition;
      lByteCount++;
    }
    lWordCount = (lByteCount - lByteCount % 4) / 4;
    lBytePosition = lByteCount % 4 * 8;
    lWordArray[lWordCount] = lWordArray[lWordCount] | 128 << lBytePosition;
    lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
    lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
    return lWordArray;
  }
  function WordToHex(lValue) {
    let WordToHexValue = "", WordToHexValue_temp = "", lByte, lCount;
    for (lCount = 0; lCount <= 3; lCount++) {
      lByte = lValue >>> lCount * 8 & 255;
      WordToHexValue_temp = "0" + lByte.toString(16);
      WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
    }
    return WordToHexValue;
  }
  function Utf8Encode(string2) {
    string2 = string2.replace(/\r\n/g, "\n");
    let utftext = "";
    for (let n = 0; n < string2.length; n++) {
      const c2 = string2.charCodeAt(n);
      if (c2 < 128) {
        utftext += String.fromCharCode(c2);
      } else if (c2 > 127 && c2 < 2048) {
        utftext += String.fromCharCode(c2 >> 6 | 192);
        utftext += String.fromCharCode(c2 & 63 | 128);
      } else {
        utftext += String.fromCharCode(c2 >> 12 | 224);
        utftext += String.fromCharCode(c2 >> 6 & 63 | 128);
        utftext += String.fromCharCode(c2 & 63 | 128);
      }
    }
    return utftext;
  }
  let x = [];
  let k, AA, BB, CC, DD, a, b, c, d;
  const S11 = 7, S12 = 12, S13 = 17, S14 = 22;
  const S21 = 5, S22 = 9, S23 = 14, S24 = 20;
  const S31 = 4, S32 = 11, S33 = 16, S34 = 23;
  const S41 = 6, S42 = 10, S43 = 15, S44 = 21;
  string = Utf8Encode(string);
  x = ConvertToWordArray(string);
  a = 1732584193;
  b = 4023233417;
  c = 2562383102;
  d = 271733878;
  for (k = 0; k < x.length; k += 16) {
    AA = a;
    BB = b;
    CC = c;
    DD = d;
    a = FF(a, b, c, d, x[k + 0], S11, 3614090360);
    d = FF(d, a, b, c, x[k + 1], S12, 3905402710);
    c = FF(c, d, a, b, x[k + 2], S13, 606105819);
    b = FF(b, c, d, a, x[k + 3], S14, 3250441966);
    a = FF(a, b, c, d, x[k + 4], S11, 4118548399);
    d = FF(d, a, b, c, x[k + 5], S12, 1200080426);
    c = FF(c, d, a, b, x[k + 6], S13, 2821735955);
    b = FF(b, c, d, a, x[k + 7], S14, 4249261313);
    a = FF(a, b, c, d, x[k + 8], S11, 1770035416);
    d = FF(d, a, b, c, x[k + 9], S12, 2336552879);
    c = FF(c, d, a, b, x[k + 10], S13, 4294925233);
    b = FF(b, c, d, a, x[k + 11], S14, 2304563134);
    a = FF(a, b, c, d, x[k + 12], S11, 1804603682);
    d = FF(d, a, b, c, x[k + 13], S12, 4254626195);
    c = FF(c, d, a, b, x[k + 14], S13, 2792965006);
    b = FF(b, c, d, a, x[k + 15], S14, 1236535329);
    a = GG(a, b, c, d, x[k + 1], S21, 4129170786);
    d = GG(d, a, b, c, x[k + 6], S22, 3225465664);
    c = GG(c, d, a, b, x[k + 11], S23, 643717713);
    b = GG(b, c, d, a, x[k + 0], S24, 3921069994);
    a = GG(a, b, c, d, x[k + 5], S21, 3593408605);
    d = GG(d, a, b, c, x[k + 10], S22, 38016083);
    c = GG(c, d, a, b, x[k + 15], S23, 3634488961);
    b = GG(b, c, d, a, x[k + 4], S24, 3889429448);
    a = GG(a, b, c, d, x[k + 9], S21, 568446438);
    d = GG(d, a, b, c, x[k + 14], S22, 3275163606);
    c = GG(c, d, a, b, x[k + 3], S23, 4107603335);
    b = GG(b, c, d, a, x[k + 8], S24, 1163531501);
    a = GG(a, b, c, d, x[k + 13], S21, 2850285829);
    d = GG(d, a, b, c, x[k + 2], S22, 4243563512);
    c = GG(c, d, a, b, x[k + 7], S23, 1735328473);
    b = GG(b, c, d, a, x[k + 12], S24, 2368359562);
    a = HH(a, b, c, d, x[k + 5], S31, 4294588738);
    d = HH(d, a, b, c, x[k + 8], S32, 2272392833);
    c = HH(c, d, a, b, x[k + 11], S33, 1839030562);
    b = HH(b, c, d, a, x[k + 14], S34, 4259657740);
    a = HH(a, b, c, d, x[k + 1], S31, 2763975236);
    d = HH(d, a, b, c, x[k + 4], S32, 1272893353);
    c = HH(c, d, a, b, x[k + 7], S33, 4139469664);
    b = HH(b, c, d, a, x[k + 10], S34, 3200236656);
    a = HH(a, b, c, d, x[k + 13], S31, 681279174);
    d = HH(d, a, b, c, x[k + 0], S32, 3936430074);
    c = HH(c, d, a, b, x[k + 3], S33, 3572445317);
    b = HH(b, c, d, a, x[k + 6], S34, 76029189);
    a = HH(a, b, c, d, x[k + 9], S31, 3654602809);
    d = HH(d, a, b, c, x[k + 12], S32, 3873151461);
    c = HH(c, d, a, b, x[k + 15], S33, 530742520);
    b = HH(b, c, d, a, x[k + 2], S34, 3299628645);
    a = II(a, b, c, d, x[k + 0], S41, 4096336452);
    d = II(d, a, b, c, x[k + 7], S42, 1126891415);
    c = II(c, d, a, b, x[k + 14], S43, 2878612391);
    b = II(b, c, d, a, x[k + 5], S44, 4237533241);
    a = II(a, b, c, d, x[k + 12], S41, 1700485571);
    d = II(d, a, b, c, x[k + 3], S42, 2399980690);
    c = II(c, d, a, b, x[k + 10], S43, 4293915773);
    b = II(b, c, d, a, x[k + 1], S44, 2240044497);
    a = II(a, b, c, d, x[k + 8], S41, 1873313359);
    d = II(d, a, b, c, x[k + 15], S42, 4264355552);
    c = II(c, d, a, b, x[k + 6], S43, 2734768916);
    b = II(b, c, d, a, x[k + 13], S44, 1309151649);
    a = II(a, b, c, d, x[k + 4], S41, 4149444226);
    d = II(d, a, b, c, x[k + 11], S42, 3174756917);
    c = II(c, d, a, b, x[k + 2], S43, 718787259);
    b = II(b, c, d, a, x[k + 9], S44, 3951481745);
    a = AddUnsigned(a, AA);
    b = AddUnsigned(b, BB);
    c = AddUnsigned(c, CC);
    d = AddUnsigned(d, DD);
  }
  const temp = WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);
  return temp.toLowerCase();
};

// utils.ts
var noticeHandler = (msg) => new import_obsidian.Notice(msg);
function truncate(q) {
  const len = q.length;
  if (len <= 20)
    return q;
  return q.substring(0, 10) + len + q.substring(len - 10, len);
}
function getRequest(url, cb) {
  (0, import_obsidian.request)({
    method: "get",
    url
  }).then(function(response) {
    cb(JSON.parse(response || "{}"));
  }).catch(function(error) {
    noticeHandler(error.message || "No results!");
  });
}
function handleTranslate(q, config, cb) {
  return __async(this, null, function* () {
    const salt = new Date().getTime();
    const curtime = Math.round(new Date().getTime() / 1e3);
    const str1 = config.appId + truncate(q) + salt + curtime + config.secretKey;
    const hashBuffer = yield crypto.subtle.digest("SHA-256", new TextEncoder().encode(str1));
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const sign = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
    const from = config.from || "auto";
    const params = { q, appKey: config.appId, salt, from, to: config.to, sign, curtime, signType: "v3" };
    const query = Object.keys(params).map((key) => `${key}=${params[key]}`).join("&");
    getRequest(`https://openapi.youdao.com/api?${query}`, cb);
  });
}
function handleMicrosoftTranslate(q, config, cb) {
  return __async(this, null, function* () {
    const endpoint = "https://api-apc.cognitive.microsofttranslator.com";
    const { from = "en", to, secretKey, location } = config;
    (0, import_axios.default)({
      url: `${endpoint}/translate?api-version=3.0&from=${from}&to=${to}&includeAlignment=true&textType=html`,
      method: "post",
      headers: {
        "Ocp-Apim-Subscription-Key": secretKey,
        "Ocp-Apim-Subscription-Region": location,
        "Content-type": "application/json",
        "X-ClientTraceId": v4_default().toString()
      },
      data: [{ text: q }],
      responseType: "json"
    }).then(({ data }) => {
      const res = (data || []).reduce((str, item) => {
        const { translations = [] } = item;
        return str + translations.map(({ text }) => text).join(", ");
      }, "");
      cb(res);
    }).catch((e) => {
      noticeHandler("Network Error!");
    });
  });
}
function handleBaiduTranslate(q, config, cb) {
  return __async(this, null, function* () {
    const { to, from, appId, secretKey } = config;
    const salt = new Date().getTime();
    const sign = MD5(`${appId}${q}${salt}${secretKey}`);
    getRequest(`http://api.fanyi.baidu.com/api/trans/vip/translate?q=${q}&from=${from || "en"}&to=${to || "zh"}&appid=${appId}&salt=${salt}&sign=${sign}`, cb);
  });
}
function handleAudio(url, cb) {
  (0, import_obsidian.requestUrl)({ method: "post", url }).then((res) => {
    cb(res);
  }).catch(function(error) {
    noticeHandler(error.message || "No results!");
  });
}
var LANGUAGES = {
  \u7B80\u4F53\u4E2D\u6587: "zh-CHS",
  \u7E41\u4F53\u4E2D\u6587: "zh-CHT",
  \u82F1\u6587: "en",
  \u65E5\u6587: "ja",
  \u97E9\u6587: "ko",
  \u6CD5\u6587: "fr",
  \u897F\u73ED\u7259\u6587: "es",
  \u8461\u8404\u7259\u6587: "pt",
  \u610F\u5927\u5229\u6587: "it",
  \u4FC4\u6587: "ru",
  \u8D8A\u5357\u6587: "vi",
  \u5FB7\u6587: "de",
  \u963F\u62C9\u4F2F\u6587: "ar",
  \u5370\u5C3C\u6587: "id",
  \u5357\u975E\u8377\u5170\u8BED: "af",
  \u6CE2\u65AF\u5C3C\u4E9A\u8BED: "bs",
  \u4FDD\u52A0\u5229\u4E9A\u8BED: "bg",
  \u4E2D\u6587\u7CA4\u8BED: "yue",
  \u52A0\u6CF0\u9686\u8BED: "ca",
  \u514B\u7F57\u5730\u4E9A\u8BED: "hr",
  \u6377\u514B\u8BED: "cs",
  \u4E39\u9EA6\u8BED: "da",
  \u8377\u5170\u8BED: "nl",
  \u7231\u6C99\u5C3C\u4E9A\u8BED: "et",
  \u6590\u6D4E\u8BED: "fj",
  \u82AC\u5170\u8BED: "fi",
  \u5E0C\u814A\u8BED: "el",
  \u6D77\u5730\u514B\u91CC\u5965\u5C14\u8BED: "ht",
  \u5E0C\u4F2F\u6765\u8BED: "he",
  \u5370\u5730\u8BED: "hi",
  \u767D\u82D7\u8BED: "mww",
  \u5308\u7259\u5229\u8BED: "hu",
  \u65AF\u74E6\u5E0C\u91CC\u8BED: "sw",
  \u514B\u6797\u8D21\u8BED: "tlh",
  \u62C9\u8131\u7EF4\u4E9A\u8BED: "lv",
  \u7ACB\u9676\u5B9B\u8BED: "lt",
  \u9A6C\u6765\u8BED: "ms",
  \u9A6C\u8033\u4ED6\u8BED: "mt",
  \u632A\u5A01\u8BED: "no",
  \u6CE2\u65AF\u8BED: "fa",
  \u6CE2\u5170\u8BED: "pl",
  \u514B\u96F7\u5854\u7F57\u5965\u6258\u7C73\u8BED: "otq",
  \u7F57\u9A6C\u5C3C\u4E9A\u8BED: "ro",
  "\u585E\u5C14\u7EF4\u4E9A\u8BED(\u897F\u91CC\u5C14\u6587)": "sr-Cyrl",
  "\u585E\u5C14\u7EF4\u4E9A\u8BED(\u62C9\u4E01\u6587)": "sr-Latn",
  \u65AF\u6D1B\u4F10\u514B\u8BED: "sk",
  \u65AF\u6D1B\u6587\u5C3C\u4E9A\u8BED: "sl",
  \u745E\u5178\u8BED: "sv",
  \u5854\u5E0C\u63D0\u8BED: "ty",
  \u6CF0\u8BED: "th",
  \u6C64\u52A0\u8BED: "to",
  \u571F\u8033\u5176\u8BED: "tr",
  \u4E4C\u514B\u5170\u8BED: "uk",
  \u4E4C\u5C14\u90FD\u8BED: "ur",
  \u5A01\u5C14\u58EB\u8BED: "cy",
  \u5C24\u5361\u5766\u739B\u96C5\u8BED: "yua",
  \u963F\u5C14\u5DF4\u5C3C\u4E9A\u8BED: "sq",
  \u963F\u59C6\u54C8\u62C9\u8BED: "am",
  \u4E9A\u7F8E\u5C3C\u4E9A\u8BED: "hy",
  \u963F\u585E\u62DC\u7586\u8BED: "az",
  \u5B5F\u52A0\u62C9\u8BED: "bn",
  \u5DF4\u65AF\u514B\u8BED: "eu",
  \u767D\u4FC4\u7F57\u65AF\u8BED: "be",
  \u5BBF\u52A1\u8BED: "ceb",
  \u79D1\u897F\u5609\u8BED: "co",
  \u4E16\u754C\u8BED: "eo",
  \u83F2\u5F8B\u5BBE\u8BED: "tl",
  \u5F17\u91CC\u897F\u8BED: "fy",
  \u52A0\u5229\u897F\u4E9A\u8BED: "gl",
  \u683C\u9C81\u5409\u4E9A\u8BED: "ka",
  \u53E4\u5409\u62C9\u7279\u8BED: "gu",
  \u8C6A\u8428\u8BED: "ha",
  \u590F\u5A01\u5937\u8BED: "haw",
  \u51B0\u5C9B\u8BED: "is",
  \u4F0A\u535A\u8BED: "ig",
  \u7231\u5C14\u5170\u8BED: "ga",
  \u722A\u54C7\u8BED: "jw",
  \u5361\u7EB3\u8FBE\u8BED: "kn",
  \u54C8\u8428\u514B\u8BED: "kk",
  \u9AD8\u68C9\u8BED: "km",
  \u5E93\u5C14\u5FB7\u8BED: "ku",
  \u67EF\u5C14\u514B\u5B5C\u8BED: "ky",
  \u8001\u631D\u8BED: "lo",
  \u62C9\u4E01\u8BED: "la",
  \u5362\u68EE\u5821\u8BED: "lb",
  \u9A6C\u5176\u987F\u8BED: "mk",
  \u9A6C\u5C14\u52A0\u4EC0\u8BED: "mg",
  \u9A6C\u62C9\u96C5\u62C9\u59C6\u8BED: "ml",
  \u6BDB\u5229\u8BED: "mi",
  \u9A6C\u62C9\u5730\u8BED: "mr",
  \u8499\u53E4\u8BED: "mn",
  \u7F05\u7538\u8BED: "my",
  \u5C3C\u6CCA\u5C14\u8BED: "ne",
  \u9F50\u5207\u74E6\u8BED: "ny",
  \u666E\u4EC0\u56FE\u8BED: "ps",
  \u65C1\u906E\u666E\u8BED: "pa",
  \u8428\u6469\u4E9A\u8BED: "sm",
  \u82CF\u683C\u5170\u76D6\u5C14\u8BED: "gd",
  \u585E\u7D22\u6258\u8BED: "st",
  \u4FEE\u7EB3\u8BED: "sn",
  \u4FE1\u5FB7\u8BED: "sd",
  \u50E7\u4F3D\u7F57\u8BED: "si",
  \u7D22\u9A6C\u91CC\u8BED: "so",
  \u5DFD\u4ED6\u8BED: "su",
  \u5854\u5409\u514B\u8BED: "tg",
  \u6CF0\u7C73\u5C14\u8BED: "ta",
  \u6CF0\u5362\u56FA\u8BED: "te",
  \u4E4C\u5179\u522B\u514B\u8BED: "uz",
  \u5357\u975E\u79D1\u8428\u8BED: "xh",
  \u610F\u7B2C\u7EEA\u8BED: "yi",
  \u7EA6\u9C81\u5DF4\u8BED: "yo",
  \u5357\u975E\u7956\u9C81\u8BED: "zu",
  \u81EA\u52A8\u8BC6\u522B: "auto"
};
var MICROSOFT_LANGUAGES = {
  "\u5357\u975E\u8377\u5170\u8BED": "af",
  "\u963F\u5C14\u5DF4\u5C3C\u4E9A\u8BED": "sq",
  "\u963F\u59C6\u54C8\u62C9\u8BED": "am",
  "\u963F\u62C9\u4F2F\u8BED": "ar",
  "\u4E9A\u7F8E\u5C3C\u4E9A\u8BED": "hy",
  "\u963F\u8428\u59C6\u8BED": "as",
  "\u963F\u585E\u62DC\u7586\u8BED(\u62C9\u4E01\u8BED)": "az",
  "Bangla": "bn",
  "\u5DF4\u4EC0\u57FA\u5C14\u8BED": "ba",
  "\u5DF4\u65AF\u514B\u8BED": "eu",
  "\u6CE2\u65AF\u5C3C\u4E9A\u8BED(\u62C9\u4E01\u8BED\u7CFB)": "bs",
  "\u4FDD\u52A0\u5229\u4E9A\u8BED": "bg",
  "\u4E2D\u6587\u7CA4\u8BED": "yue",
  "\u52A0\u6CF0\u7F57\u5C3C\u4E9A\u8BED": "ca",
  "\u4E2D\u6587\u6587\u5B66": "lzh",
  "\u7B80\u4F53\u4E2D\u6587": "zh-Hans",
  "\u7E41\u4F53\u4E2D\u6587": "zh-Hant",
  "\u514B\u7F57\u5730\u4E9A\u8BED": "hr",
  "\u6377\u514B\u8BED": "cs",
  "\u4E39\u9EA6\u8BED": "da",
  "\u8FBE\u91CC\u8BED": "prs",
  "\u9A6C\u5C14\u4EE3\u592B\u8BED": "dv",
  "\u8377\u5170\u8BED": "nl",
  "\u82F1\u8BED": "en",
  "\u7231\u6C99\u5C3C\u4E9A\u8BED": "et",
  "\u6CD5\u7F57\u8BED": "fo",
  "\u6590\u6D4E\u8BED": "fj",
  "\u83F2\u5F8B\u5BBE\u8BED": "fil",
  "\u82AC\u5170\u8BED": "fi",
  "\u6CD5\u8BED": "fr",
  "\u6CD5\u8BED\uFF08\u52A0\u62FF\u5927\uFF09": "fr-ca",
  "\u52A0\u5229\u897F\u4E9A\u8BED": "gl",
  "\u683C\u9C81\u5409\u4E9A\u8BED": "ka",
  "\u5FB7\u8BED": "de",
  "\u5E0C\u814A\u8BED": "el",
  "\u53E4\u5409\u62C9\u7279\u8BED": "gu",
  "\u6D77\u5730\u514B\u91CC\u5965\u5C14\u8BED": "ht",
  "\u5E0C\u4F2F\u6765\u8BED": "he",
  "Hindi": "hi",
  "\u767D\u82D7\u8BED\uFF08\u62C9\u4E01\u8BED\uFF09": "mww",
  "\u5308\u7259\u5229\u8BED": "hu",
  "\u51B0\u5C9B\u8BED": "is",
  "\u5370\u5EA6\u5C3C\u897F\u4E9A\u8BED": "id",
  "\u56E0\u7EBD\u7EB3\u6566\u8BED": "ikt",
  "\u56E0\u7EBD\u7279\u8BED": "iu",
  "\u56E0\u7EBD\u7279\u8BED(\u62C9\u4E01\u8BED)": "iu-Latn",
  "\u7231\u5C14\u5170\u8BED": "ga",
  "\u610F\u5927\u5229\u8BED": "it",
  "\u65E5\u8BED": "ja",
  "\u5361\u7EB3\u8FBE\u8BED": "kn",
  "\u54C8\u8428\u514B\u8BED": "kk",
  "\u9AD8\u68C9\u8BED": "km",
  "\u514B\u6797\u8D21\u8BED": "tlh-Latn",
  "\u514B\u6797\u8D21\u8BED(plqaD)": "tlh-Piqd",
  "\u97E9\u8BED": "ko",
  "\u5E93\u5C14\u5FB7\u8BED(\u4E2D\u90E8)": "ku",
  "\u5E93\u5C14\u5FB7\u8BED(\u5317\u90E8)": "kmr",
  "\u5409\u5C14\u5409\u65AF\u8BED(\u897F\u91CC\u5C14\u8BED)": "ky",
  "\u8001\u631D\u8BED": "lo",
  "\u62C9\u8131\u7EF4\u4E9A\u8BED": "lv",
  "\u7ACB\u9676\u5B9B\u8BED": "lt",
  "\u9A6C\u5176\u987F\u8BED": "mk",
  "\u9A6C\u8FBE\u52A0\u65AF\u52A0\u8BED": "mg",
  "\u9A6C\u6765\u8BED(\u62C9\u4E01\u8BED\u7CFB)": "ms",
  "\u9A6C\u62C9\u96C5\u62C9\u59C6\u8BED": "ml",
  "\u9A6C\u8033\u4ED6\u8BED": "mt",
  "\u6BDB\u5229\u8BED": "mi",
  "\u9A6C\u62C9\u5730\u8BED": "mr",
  "\u8499\u53E4\u8BED(\u897F\u91CC\u5C14\u6587)": "mn-Cyrl",
  "\u8499\u53E4\u8BED(\u4F20\u7EDF)": "mn-Mong",
  "\u7F05\u7538": "my",
  "\u5C3C\u6CCA\u5C14\u8BED": "ne",
  "\u632A\u5A01\u8BED": "nb",
  "\u5965\u91CC\u4E9A\u8BED": "or",
  "\u666E\u4EC0\u56FE\u8BED": "ps",
  "\u6CE2\u65AF\u8BED": "fa",
  "\u6CE2\u5170\u8BED": "pl",
  "\u8461\u8404\u7259\u8BED\uFF08\u5DF4\u897F\uFF09": "pt",
  "\u8461\u8404\u7259\u8BED(\u8461\u8404\u7259)": "pt-pt",
  "\u65C1\u906E\u666E\u8BED": "pa",
  "\u514B\u96F7\u5854\u7F57\u5965\u6258\u7C73\u8BED": "otq",
  "\u7F57\u9A6C\u5C3C\u4E9A\u8BED": "ro",
  "\u4FC4\u8BED": "ru",
  "\u8428\u6469\u4E9A\u8BED(\u62C9\u4E01\u8BED)": "sm",
  "\u585E\u5C14\u7EF4\u4E9A\u8BED\uFF08\u897F\u91CC\u5C14\uFF09": "sr-Cyrl",
  "\u585E\u5C14\u7EF4\u4E9A\u8BED\uFF08\u62C9\u4E01\uFF09": "sr-Latn",
  "\u65AF\u6D1B\u4F10\u514B\u8BED": "sk",
  "\u65AF\u6D1B\u6587\u5C3C\u4E9A\u8BED": "sl",
  "\u7D22\u9A6C\u91CC\u8BED\uFF08\u963F\u62C9\u4F2F\u8BED\uFF09": "so",
  "\u897F\u73ED\u7259\u8BED": "es",
  "\u65AF\u74E6\u5E0C\u91CC\u8BED\uFF08\u62C9\u4E01\u8BED\uFF09": "sw",
  "\u745E\u5178\u8BED": "sv",
  "\u5854\u5E0C\u63D0\u8BED": "ty",
  "\u6CF0\u7C73\u5C14\u8BED": "ta",
  "\u9791\u977C\u8BED\uFF08\u62C9\u4E01\u8BED\uFF09": "tt",
  "\u6CF0\u5362\u56FA\u8BED": "te",
  "\u6CF0\u8BED": "th",
  "\u85CF\u8BED": "bo",
  "\u63D0\u683C\u91CC\u5C3C\u4E9A\u8BED": "ti",
  "\u6C64\u52A0\u8BED": "to",
  "\u571F\u8033\u5176\u8BED": "tr",
  "\u571F\u5E93\u66FC\u8BED(\u62C9\u4E01\u8BED)": "tk",
  "\u4E4C\u514B\u5170\u8BED": "uk",
  "\u4E0A\u7D22\u5E03\u8BED": "hsb",
  "\u4E4C\u5C14\u90FD\u8BED": "ur",
  "\u7EF4\u543E\u5C14\u8BED\uFF08\u963F\u62C9\u4F2F\u8BED\uFF09": "ug",
  "\u4E4C\u5179\u522B\u514B\u8BED(\u62C9\u4E01\u8BED)": "uz",
  "\u8D8A\u5357\u8BED": "vi",
  "\u5A01\u5C14\u58EB\u8BED": "cy",
  "\u5C24\u5361\u5766\u739B\u96C5\u8BED": "yua",
  "\u7956\u9C81\u8BED": "zu"
};
var BAIDU_LANGUAGES = {
  \u963F\u62C9\u4F2F\u8BED: "ara",
  \u7231\u5C14\u5170\u8BED: "gle",
  \u5965\u514B\u8BED: "oci",
  \u963F\u5C14\u5DF4\u5C3C\u4E9A\u8BED: "alb",
  \u963F\u5C14\u53CA\u5229\u4E9A\u963F\u62C9\u4F2F\u8BED: "arq",
  \u963F\u80AF\u8BED: "aka",
  \u963F\u62C9\u8D21\u8BED: "arg",
  \u963F\u59C6\u54C8\u62C9\u8BED: "amh",
  \u963F\u8428\u59C6\u8BED: "asm",
  \u827E\u9A6C\u62C9\u8BED: "aym",
  \u963F\u585E\u62DC\u7586\u8BED: "aze",
  \u963F\u65AF\u56FE\u91CC\u4E9A\u65AF\u8BED: "ast",
  \u5965\u585E\u68AF\u8BED: "oss",
  \u7231\u6C99\u5C3C\u4E9A\u8BED: "est",
  \u5965\u6770\u5E03\u74E6\u8BED: "oji",
  \u5965\u91CC\u4E9A\u8BED: "ori",
  \u5965\u7F57\u83AB\u8BED: "orm",
  \u6CE2\u5170\u8BED: "pl",
  \u6CE2\u65AF\u8BED: "per",
  \u5E03\u5217\u5854\u5C3C\u8BED: "bre",
  \u5DF4\u4EC0\u57FA\u5C14\u8BED: "bak",
  \u5DF4\u65AF\u514B\u8BED: "baq",
  \u5DF4\u897F\u8461\u8404\u7259\u8BED: "pot",
  \u767D\u4FC4\u7F57\u65AF\u8BED: "bel",
  \u67CF\u67CF\u5C14\u8BED: "ber",
  \u90A6\u677F\u7259\u8BED: "pam",
  \u4FDD\u52A0\u5229\u4E9A\u8BED: "bul",
  \u5317\u65B9\u8428\u7C73\u8BED: "sme",
  \u5317\u7D22\u6258\u8BED: "ped",
  \u672C\u5DF4\u8BED: "bem",
  \u6BD4\u6797\u8BED: "bli",
  \u6BD4\u65AF\u62C9\u9A6C\u8BED: "bis",
  \u4FFE\u8DEF\u652F\u8BED: "bal",
  \u51B0\u5C9B\u8BED: "ice",
  \u6CE2\u65AF\u5C3C\u4E9A\u8BED: "bos",
  \u535A\u6770\u666E\u5C14\u8BED: "bho",
  \u695A\u74E6\u4EC0\u8BED: "chv",
  \u806A\u52A0\u8BED: "tso",
  \u4E39\u9EA6\u8BED: "dan",
  \u5FB7\u8BED: "de",
  \u9791\u977C\u8BED: "tat",
  \u63B8\u8BED: "sha",
  \u5FB7\u987F\u8BED: "tet",
  \u8FEA\u7EF4\u5E0C\u8BED: "div",
  \u4F4E\u5730\u5FB7\u8BED: "log",
  \u4FC4\u8BED: "ru",
  \u6CD5\u8BED: "fra",
  \u83F2\u5F8B\u5BBE\u8BED: "fil",
  \u82AC\u5170\u8BED: "fin",
  \u68B5\u8BED: "san",
  \u5F17\u7559\u5229\u8BED: "fri",
  \u5BCC\u62C9\u5C3C\u8BED: "ful",
  \u6CD5\u7F57\u8BED: "fao",
  \u76D6\u5C14\u8BED: "gla",
  \u521A\u679C\u8BED: "kon",
  \u9AD8\u5730\u7D22\u5E03\u8BED: "ups",
  \u9AD8\u68C9\u8BED: "hkm",
  \u683C\u9675\u5170\u8BED: "kal",
  \u683C\u9C81\u5409\u4E9A\u8BED: "geo",
  \u53E4\u5409\u62C9\u7279\u8BED: "guj",
  \u53E4\u5E0C\u814A\u8BED: "gra",
  \u53E4\u82F1\u8BED: "eno",
  \u74DC\u62C9\u5C3C\u8BED: "grn",
  \u97E9\u8BED: "kor",
  \u8377\u5170\u8BED: "nl",
  \u80E1\u5E15\u8BED: "hup",
  \u54C8\u5361\u94A6\u8BED: "hak",
  \u6D77\u5730\u8BED: "ht",
  \u9ED1\u5C71\u8BED: "mot",
  \u8C6A\u8428\u8BED: "hau",
  \u5409\u5C14\u5409\u65AF\u8BED: "kir",
  \u52A0\u5229\u897F\u4E9A\u8BED: "glg",
  \u52A0\u62FF\u5927\u6CD5\u8BED: "frn",
  \u52A0\u6CF0\u7F57\u5C3C\u4E9A\u8BED: "cat",
  \u6377\u514B\u8BED: "cs",
  \u5361\u62DC\u5C14\u8BED: "kab",
  \u5361\u7EB3\u8FBE\u8BED: "kan",
  \u5361\u52AA\u91CC\u8BED: "kau",
  \u5361\u8212\u6BD4\u8BED: "kah",
  \u5EB7\u74E6\u5C14\u8BED: "cor",
  \u79D1\u8428\u8BED: "xho",
  \u79D1\u897F\u5609\u8BED: "cos",
  \u514B\u91CC\u514B\u8BED: "cre",
  \u514B\u91CC\u7C73\u4E9A\u9791\u977C\u8BED: "cri",
  \u514B\u6797\u8D21\u8BED: "kli",
  \u514B\u7F57\u5730\u4E9A\u8BED: "hrv",
  \u514B\u4E18\u4E9A\u8BED: "que",
  \u514B\u4EC0\u7C73\u5C14\u8BED: "kas",
  \u5B54\u5361\u5C3C\u8BED: "kok",
  \u5E93\u5C14\u5FB7\u8BED: "kur",
  \u62C9\u4E01\u8BED: "lat",
  \u8001\u631D\u8BED: "lao",
  \u7F57\u9A6C\u5C3C\u4E9A\u8BED: "rom",
  \u62C9\u7279\u52A0\u83B1\u8BED: "lag",
  \u62C9\u8131\u7EF4\u4E9A\u8BED: "lav",
  \u6797\u5821\u8BED: "lim",
  \u6797\u52A0\u62C9\u8BED: "lin",
  \u5362\u5E72\u8FBE\u8BED: "lug",
  \u5362\u68EE\u5821\u8BED: "ltz",
  \u5362\u68EE\u5C3C\u4E9A\u8BED: "ruy",
  \u5362\u65FA\u8FBE\u8BED: "kin",
  \u7ACB\u9676\u5B9B\u8BED: "lit",
  \u7F57\u66FC\u4EC0\u8BED: "roh",
  \u7F57\u59C6\u8BED: "ro",
  \u903B\u8F91\u8BED: "loj",
  \u9A6C\u6765\u8BED: "may",
  \u7F05\u7538\u8BED: "bur",
  \u9A6C\u62C9\u5730\u8BED: "mar",
  \u9A6C\u62C9\u52A0\u65AF\u8BED: "mg",
  \u9A6C\u62C9\u96C5\u62C9\u59C6\u8BED: "mal",
  \u9A6C\u5176\u987F\u8BED: "mac",
  \u9A6C\u7ECD\u5C14\u8BED: "mah",
  \u8FC8\u8482\u5229\u8BED: "mai",
  \u66FC\u514B\u65AF\u8BED: "glv",
  \u6BDB\u91CC\u6C42\u65AF\u514B\u91CC\u5965\u5C14\u8BED: "mau",
  \u6BDB\u5229\u8BED: "mao",
  \u5B5F\u52A0\u62C9\u8BED: "ben",
  \u9A6C\u8033\u4ED6\u8BED: "mlt",
  \u82D7\u8BED: "hmn",
  \u632A\u5A01\u8BED: "nor",
  \u90A3\u4E0D\u52D2\u65AF\u8BED: "nea",
  \u5357\u6069\u5FB7\u8D1D\u83B1\u8BED: "nbl",
  \u5357\u975E\u8377\u5170\u8BED: "afr",
  \u5357\u7D22\u6258\u8BED: "sot",
  \u5C3C\u6CCA\u5C14\u8BED: "nep",
  \u8461\u8404\u7259\u8BED: "pt",
  \u65C1\u906E\u666E\u8BED: "pan",
  \u5E15\u76AE\u963F\u95E8\u6258\u8BED: "pap",
  \u666E\u4EC0\u56FE\u8BED: "pus",
  \u9F50\u5207\u74E6\u8BED: "nya",
  \u5951\u7EF4\u8BED: "twi",
  \u5207\u7F57\u57FA\u8BED: "chr",
  \u65E5\u8BED: "jp",
  \u745E\u5178\u8BED: "swe",
  \u8428\u4E01\u5C3C\u4E9A\u8BED: "srd",
  \u8428\u6469\u4E9A\u8BED: "sm",
  "\u585E\u5C14\u7EF4\u4E9A-\u514B\u7F57\u5730\u4E9A\u8BED": "sec",
  \u585E\u5C14\u7EF4\u4E9A\u8BED: "srp",
  \u6851\u6D77\u8BED: "sol",
  \u50E7\u4F3D\u7F57\u8BED: "sin",
  \u4E16\u754C\u8BED: "epo",
  \u4E66\u9762\u632A\u5A01\u8BED: "nob",
  \u65AF\u6D1B\u4F10\u514B\u8BED: "sk",
  \u65AF\u6D1B\u6587\u5C3C\u4E9A\u8BED: "slo",
  \u65AF\u74E6\u5E0C\u91CC\u8BED: "swa",
  "\u585E\u5C14\u7EF4\u4E9A\u8BED\uFF08\u897F\u91CC\u5C14\uFF09": "src",
  \u7D22\u9A6C\u91CC\u8BED: "som",
  \u6CF0\u8BED: "th",
  \u571F\u8033\u5176\u8BED: "tr",
  \u5854\u5409\u514B\u8BED: "tgk",
  \u6CF0\u7C73\u5C14\u8BED: "tam",
  \u4ED6\u52A0\u7984\u8BED: "tgl",
  \u63D0\u683C\u5229\u5C3C\u4E9A\u8BED: "tir",
  \u6CF0\u5362\u56FA\u8BED: "tel",
  \u7A81\u5C3C\u65AF\u963F\u62C9\u4F2F\u8BED: "tua",
  \u571F\u5E93\u66FC\u8BED: "tuk",
  \u4E4C\u514B\u5170\u8BED: "ukr",
  \u74E6\u9686\u8BED: "wln",
  \u5A01\u5C14\u58EB\u8BED: "wel",
  \u6587\u8FBE\u8BED: "ven",
  \u6C83\u6D1B\u592B\u8BED: "wol",
  \u4E4C\u5C14\u90FD\u8BED: "urd",
  \u897F\u73ED\u7259\u8BED: "spa",
  \u5E0C\u4F2F\u6765\u8BED: "heb",
  \u5E0C\u814A\u8BED: "el",
  \u5308\u7259\u5229\u8BED: "hu",
  \u897F\u5F17\u91CC\u65AF\u8BED: "fry",
  \u897F\u91CC\u897F\u4E9A\u8BED: "sil",
  \u5E0C\u5229\u76D6\u519C\u8BED: "hil",
  \u4E0B\u7D22\u5E03\u8BED: "los",
  \u590F\u5A01\u5937\u8BED: "haw",
  \u65B0\u632A\u5A01\u8BED: "nno",
  \u897F\u975E\u4E66\u9762\u8BED: "nqo",
  \u4FE1\u5FB7\u8BED: "snd",
  \u4FEE\u7EB3\u8BED: "sna",
  \u5BBF\u52A1\u8BED: "ceb",
  \u53D9\u5229\u4E9A\u8BED: "syr",
  \u5DFD\u4ED6\u8BED: "sun",
  \u82F1\u8BED: "en",
  \u5370\u5730\u8BED: "hi",
  \u5370\u5C3C\u8BED: "id",
  \u610F\u5927\u5229\u8BED: "it",
  \u8D8A\u5357\u8BED: "vie",
  \u610F\u7B2C\u7EEA\u8BED: "yid",
  \u56E0\u7279\u8BED: "ina",
  \u4E9A\u9F50\u8BED: "ach",
  \u5370\u53E4\u4EC0\u8BED: "ing",
  \u4F0A\u535A\u8BED: "ibo",
  \u4F0A\u591A\u8BED: "ido",
  \u7EA6\u9C81\u5DF4\u8BED: "yor",
  \u4E9A\u7F8E\u5C3C\u4E9A\u8BED: "arm",
  \u4F0A\u52AA\u514B\u63D0\u56FE\u7279\u8BED: "iku",
  \u4F0A\u6717\u8BED: "ir",
  \u7B80\u4F53\u4E2D\u6587: "zh",
  \u7E41\u4F53\u4E2D\u6587: "cht",
  \u6587\u8A00\u6587: "wyw",
  \u4E2D\u6587\u7CA4\u8BED: "yue",
  \u624E\u624E\u5176\u8BED: "zaz",
  \u4E2D\u53E4\u6CD5\u8BED: "frm",
  \u7956\u9C81\u8BED: "zul",
  \u722A\u54C7\u8BED: "jav"
};
function getLanguageOptions(languages) {
  return Object.keys(languages).reduce((obj, key) => __spreadProps(__spreadValues({}, obj), {
    [languages[key]]: `${key}-${languages[key]}`
  }), {});
}
function isObject(obj) {
  return obj !== null && Object.prototype.toString.call(obj) === "[object Object]";
}
function isEmptyObject(obj = {}) {
  return isObject(obj) && Object.keys(obj).length < 1;
}
function validator(items, cb) {
  const errorMessages = items.filter((item) => !item.value).map((item) => item.message);
  if (errorMessages.length) {
    noticeHandler(errorMessages.join(", "));
    return;
  } else {
    cb();
  }
}

// settings.ts
var SETTING_BLOCKS = [
  {
    title: "Youdao Translator Settings",
    desc: [
      { type: "text", text: "Before using this plugin, you need browse to " },
      { type: "href", href: "https://ai.youdao.com/#/", text: "https://ai.youdao.com/#/" },
      { type: "text", text: "to register first!" }
    ],
    settings: [
      {
        name: "Enable",
        desc: "Enable the youdao translator service.",
        type: "toggle",
        key: "youdaoEnable",
        default: true
      },
      {
        name: "AppId",
        desc: "Please set your app id.",
        type: "text",
        key: "appId",
        default: ""
      },
      {
        name: "SecretKey",
        desc: "Please set your secret id.",
        type: "text",
        key: "secretKey",
        default: ""
      },
      {
        name: "From",
        desc: "Choose which language you wanna translate from.",
        type: "select",
        key: "yFrom",
        default: "en",
        options: getLanguageOptions(LANGUAGES)
      },
      {
        name: "To",
        desc: "Choose which language you wanna translate into.",
        type: "select",
        key: "yTo",
        default: "zh-CHS",
        options: getLanguageOptions(LANGUAGES)
      },
      {
        name: "Audio",
        desc: "Whether to enable the audio function?",
        type: "toggle",
        key: "audio",
        default: false
      }
    ]
  },
  {
    title: "Microsoft Translator Settings",
    desc: [
      { type: "text", text: "For more infomation on using it, refer to " },
      {
        type: "href",
        href: "https://docs.microsoft.com/zh-cn/azure/cognitive-services/translator/quickstart-translator",
        text: "https://docs.microsoft.com/zh-cn/azure/cognitive-services/translator/quickstart-translator"
      },
      { type: "text", text: "." }
    ],
    settings: [
      {
        name: "Enable",
        desc: "Enable the Microsoft translator service.",
        type: "toggle",
        key: "microsoftEnable",
        default: false
      },
      {
        name: "SecretKey",
        desc: "Please set your secret key.",
        type: "text",
        key: "microsoftSecretKey",
        default: ""
      },
      {
        name: "Location",
        desc: "Please set your transaction service location.",
        type: "text",
        key: "microsoftLocation",
        default: ""
      },
      {
        name: "From",
        desc: "Choose which language you wanna translate from.",
        type: "select",
        key: "mFrom",
        default: "en",
        options: getLanguageOptions(MICROSOFT_LANGUAGES)
      },
      {
        name: "To",
        desc: "Choose which language you wanna translate into.",
        type: "select",
        key: "mTo",
        default: "zh-Hans",
        options: getLanguageOptions(MICROSOFT_LANGUAGES)
      }
    ]
  },
  {
    title: "Baidu Translator Settings",
    desc: [
      { type: "text", text: "Before using this plugin, you need browse to " },
      { type: "href", href: "http://api.fanyi.baidu.com/", text: "http://api.fanyi.baidu.com/" },
      { type: "text", text: "to register first!" }
    ],
    settings: [
      {
        name: "Enable",
        desc: "Enable the baidu translator service.",
        type: "toggle",
        key: "baiduEnable",
        default: true
      },
      {
        name: "AppId",
        desc: "Please set your baidu app id.",
        type: "text",
        key: "baiduAppId",
        default: ""
      },
      {
        name: "SecretKey",
        desc: "Please set your baidu secret id.",
        type: "text",
        key: "baiduSecretKey",
        default: ""
      },
      {
        name: "From",
        desc: "Choose which language you wanna translate from.",
        type: "select",
        key: "bFrom",
        default: "en",
        options: getLanguageOptions(BAIDU_LANGUAGES)
      },
      {
        name: "To",
        desc: "Choose which language you wanna translate into.",
        type: "select",
        key: "bTo",
        default: "zh",
        options: getLanguageOptions(BAIDU_LANGUAGES)
      },
      {
        name: "Audio",
        desc: "Whether to enable the audio function?",
        type: "toggle",
        key: "audio",
        default: false
      }
    ]
  }
];
function createDesc(container, desc) {
  const descEl = container.createEl("p", { cls: "transaction_container-desc" });
  desc.forEach(({ type, text, href }) => {
    switch (type) {
      case "text":
        descEl.appendText(text);
        break;
      case "href":
        descEl.appendChild(createEl("a", {
          text,
          href
        }));
        break;
    }
  });
}
var TranslatorSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Translator Settings" });
    SETTING_BLOCKS.forEach(({ title, settings, desc }) => {
      containerEl.createEl("h6", { text: title });
      desc && createDesc(containerEl, desc);
      settings.forEach((set) => {
        const { name, desc: desc2, type, key, default: defaultValue, options } = set;
        const el = new import_obsidian2.Setting(containerEl).setName(name).setDesc(desc2);
        const val = this.plugin.settings[key];
        switch (type) {
          case "text":
            el.addText((text) => text.setPlaceholder(name).setValue(val || defaultValue).onChange((value) => __async(this, null, function* () {
              this.plugin.settings[key] = value.trim();
              yield this.plugin.saveSettings();
            })));
            break;
          case "select":
            el.addDropdown((dp) => dp.addOptions(options).setValue(val || defaultValue).onChange((value) => __async(this, null, function* () {
              this.plugin.settings[key] = value;
              yield this.plugin.saveSettings();
            })));
            break;
          case "toggle":
            el.addToggle((tg) => {
              tg.setValue(val === void 0 ? defaultValue : val).onChange((value) => __async(this, null, function* () {
                this.plugin.settings[key] = value;
                yield this.plugin.saveSettings();
              }));
            });
            break;
          default:
            break;
        }
      });
    });
  }
};

// modals.ts
var import_obsidian3 = __toModule(require("obsidian"));
var LANGUAGES_MAP = {
  youdao: { key: "yTo", languages: LANGUAGES },
  microsoft: { key: "mTo", languages: MICROSOFT_LANGUAGES },
  baidu: { key: "bTo", languages: BAIDU_LANGUAGES }
};
var TranslatorModal = class extends import_obsidian3.Modal {
  constructor(app, text, settings) {
    super(app);
    this.text = text;
    this.empty = createEl("div", {
      cls: "translator_container-empty",
      text: "No results!"
    });
    this.settings = settings;
    this.text = text;
    this.customTo = {
      "youdao": "zh-CHS",
      "microsoft": "zh-Hans",
      "baidu": "zh"
    };
    this.customToPre = {};
  }
  createBlockTitleElement(containerEl, title, type) {
    const { languages } = LANGUAGES_MAP[type];
    const options = getLanguageOptions(languages);
    const titleContainer = containerEl.appendChild(createDiv({
      text: title,
      cls: `translator_container-block-title translator_container-block-title-${type}`
    }));
    new import_obsidian3.Setting(titleContainer).addDropdown((dp) => dp.addOptions(options).setValue(this.customTo[type]).onChange((value) => {
      this.customTo[type] = value;
    }));
  }
  translateResultsGenerator(contentObject, container) {
    Object.keys(contentObject).forEach((key) => {
      container.appendChild(createEl("p", {
        cls: `translator_container-${key}`,
        text: contentObject[key]
      }));
    });
  }
  createLoadingElement() {
    return createEl("div", {
      cls: "translator_container-overlay",
      text: "Translating..."
    });
  }
  youdaoTranslateHandler(containerEl) {
    const { yTo: to, yFrom: from, appId, secretKey, audio } = this.settings;
    const preMessage = `Youdao translation service's`;
    const lastMessage = `shouldn't be empty.`;
    validator([
      { value: appId, message: `${preMessage} appId ${lastMessage}` },
      { value: secretKey, message: `${preMessage} secretKey ${lastMessage}` }
    ], () => {
      const loadingEl = this.createLoadingElement();
      this.createBlockTitleElement(containerEl, "Youdao translation results", "youdao");
      containerEl.appendChild(loadingEl);
      handleTranslate(this.text, { to: this.customTo.youdao || to, appId, secretKey, from }, (data) => {
        containerEl.removeChild(loadingEl);
        if (isEmptyObject(data)) {
          containerEl.appendChild(this.empty);
        } else {
          const { query, translation, web, basic, l, webdict, tSpeakUrl, speakUrl } = data;
          const [FROM, TO] = l.split("2");
          containerEl.appendChild(createEl("a", {
            cls: "translator_container-title",
            text: query,
            href: webdict ? webdict.url : ""
          }));
          const audioesContainer = createEl("div", { cls: "translator_container-audioes" });
          if (audio) {
            const speakUrls = { origin: speakUrl, result: tSpeakUrl };
            Object.keys(speakUrls).forEach((key) => {
              new import_obsidian3.Setting(audioesContainer).setName(`${key}:`).addButton((btn) => {
                btn.setIcon("audio-file").onClick(() => {
                  document.getElementById(key).play();
                });
              });
              handleAudio(speakUrls[key], (res) => {
                audioesContainer.appendChild(createEl("div", {
                  cls: "translator_container-player"
                }));
                audioesContainer.appendChild(createEl("audio", {
                  attr: {
                    src: URL.createObjectURL(new Blob([res.arrayBuffer], { type: "audio/mp3" })),
                    id: key
                  }
                }));
              });
            });
            containerEl.appendChild(audioesContainer);
          }
          if (basic) {
            let symbolText = basic.phonetic ? `[${basic.phonetic}]` : "";
            if (FROM === "en" && TO === "zh-CHS") {
              symbolText = `${basic["us-phonetic"] ? `us: [${basic["us-phonetic"]}]` : ""}
    ${basic["uk-phonetic"] ? `uk: [${basic["uk-phonetic"]}]` : ""}`;
            }
            containerEl.appendChild(createEl("p", {
              cls: "translator_container-soundmark",
              text: symbolText
            }));
            const explains = FROM === "zh-CHS" && TO === "en" ? [...translation, basic.explains.toString()] : basic.explains;
            explains.forEach((exp) => {
              containerEl.appendChild(createEl("p", {
                cls: "translator_container-explain",
                text: exp
              }));
            });
            if (basic.wfs) {
              containerEl.appendChild(createEl("p", {
                cls: "translator_container-title",
                text: "Word forms"
              }));
              containerEl.appendChild(createEl("p", {
                cls: "translator_container-wfs",
                text: basic.wfs.map((item) => `${item.wf.name}: ${item.wf.value}`).join(", ")
              }));
            }
          } else {
            containerEl.appendChild(createEl("p", {
              cls: "translator_container-explain",
              text: translation == null ? void 0 : translation.toString()
            }));
          }
          if (web) {
            containerEl.appendChild(createEl("p", {
              cls: "translator_container-title",
              text: "Other translations"
            }));
            web.forEach((item) => {
              containerEl.appendChild(createEl("p", {
                cls: "translator_container-other",
                text: `${item.key}: ${item.value.toString()}`
              }));
            });
          }
        }
      });
    });
  }
  microsoftTranslateHandler(containerEl) {
    const loadingEl = this.createLoadingElement();
    const { mTo: to, mFrom: from, microsoftSecretKey, microsoftLocation } = this.settings;
    const preMessage = `Microsoft translation service's`;
    const lastMessage = `shouldn't be empty.`;
    validator([
      { value: microsoftSecretKey, message: `${preMessage} secret key ${lastMessage}` },
      { value: microsoftLocation, message: `${preMessage} location ${lastMessage}` }
    ], () => {
      this.createBlockTitleElement(containerEl, "Microsoft translation results", "microsoft");
      containerEl.appendChild(loadingEl);
      handleMicrosoftTranslate(this.text, {
        to: this.customTo.microsoft || to,
        from,
        secretKey: microsoftSecretKey,
        location: microsoftLocation
      }, (res) => {
        containerEl.removeChild(loadingEl);
        const contentObj = {
          title: this.text,
          explain: res
        };
        this.translateResultsGenerator(contentObj, containerEl);
      });
    });
  }
  baiduTranslateHandler(containerEl) {
    const { bTo: to, bFrom: from, baiduAppId, baiduSecretKey, baiduAudio } = this.settings;
    const preMessage = `Baidu translation service's`;
    const lastMessage = `shouldn't be empty.`;
    validator([
      { value: baiduAppId, message: `${preMessage} appId ${lastMessage}` },
      { value: baiduSecretKey, message: `${preMessage} secretKey ${lastMessage}` }
    ], () => {
      const loadingEl = this.createLoadingElement();
      this.createBlockTitleElement(containerEl, "Baidu translation results", "baidu");
      containerEl.appendChild(loadingEl);
      handleBaiduTranslate(this.text, { to: this.customTo.baidu || to, appId: baiduAppId, secretKey: baiduSecretKey, from }, (res) => {
        if (isEmptyObject(res)) {
          containerEl.appendChild(this.empty);
        } else {
          const { trans_result, error_code } = res;
          console.log(res, "////////////////res/////////////");
          if (trans_result) {
            containerEl.removeChild(loadingEl);
            const resData = trans_result.map(({ src, dst }) => ({
              title: src,
              explain: dst
            }));
            resData.forEach((contentObj) => {
              this.translateResultsGenerator(contentObj, containerEl);
            });
          } else {
            noticeHandler(`No results! (Code ${error_code})`);
          }
        }
      });
    });
  }
  translate(containerEls) {
    Object.keys(containerEls).forEach((key) => {
      const type = key.replace("Enable", "");
      if (this.text !== this.prevText || this.customTo[type] !== this.customToPre[type]) {
        const containerEl = containerEls[key];
        containerEl.empty();
        switch (key) {
          case "youdaoEnable": {
            this.youdaoTranslateHandler(containerEl);
            break;
          }
          case "microsoftEnable": {
            this.microsoftTranslateHandler(containerEl);
            break;
          }
          case "baiduEnable": {
            this.baiduTranslateHandler(containerEl);
            break;
          }
          default:
            break;
        }
        this.customToPre[type] = this.customTo[type];
      }
    });
    this.prevText = this.text;
  }
  onOpen() {
    const { contentEl, settings } = this;
    const enableKeys = Object.keys(settings).filter((key) => key.toLowerCase().includes("enable") && settings[key]);
    contentEl.createEl("h1", { text: "Translator", cls: "translator_title" });
    const setting = new import_obsidian3.Setting(contentEl).setClass("translator_search").addText((text) => text.setValue(this.text).setPlaceholder("To be translated").onChange((value) => {
      this.text = value;
    }));
    const containerEls = enableKeys.reduce((els, key) => __spreadProps(__spreadValues({}, els), { [key]: contentEl.createDiv({ cls: `translator_container translator_container-${key.replace("Enable", "")}` }) }), {});
    const translatorHandler = () => {
      if (this.text) {
        this.translate(containerEls);
      } else {
        Object.values(containerEls).forEach((el) => el.empty());
      }
    };
    setting.addButton((btn) => btn.setIcon("search").setCta().onClick(translatorHandler));
    if (document) {
      document.onkeydown = (event) => {
        event && event.keyCode === 13 && translatorHandler();
      };
    }
    this.text && this.translate(containerEls);
  }
  onClose() {
    this.contentEl.empty();
    this.text = this.prevText = "";
  }
};

// main.ts
var DEFAULT_SETTINGSF = {
  youdaoEnable: false,
  appId: "",
  secretKey: "",
  yFrom: "",
  yTo: "",
  audio: false,
  microsoftEnable: false,
  microsoftSecretKey: "",
  microsoftLocation: "",
  mFrom: "",
  mTo: "",
  baiduEnable: false,
  baiduSecretKey: "",
  baiduAppId: "",
  bFrom: "",
  bTo: ""
};
var TranslatorPlugin = class extends import_obsidian4.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new TranslatorSettingTab(this.app, this));
      this.addRibbonIcon("book", "Translate", () => {
        this.app.commands.executeCommandById("obsidian-translator:translate");
      });
      const validator2 = () => {
        const {
          youdaoEnable,
          appId,
          secretKey,
          baiduAppId,
          baiduEnable,
          baiduSecretKey,
          microsoftEnable,
          microsoftLocation,
          microsoftSecretKey
        } = this.settings;
        const getKeys = (obj) => {
          return Object.keys(obj).filter((key) => !obj[key]);
        };
        const getRes = (enable, idOrLocation, key) => enable && !!idOrLocation && !!key || !enable;
        const validateFailedList = [
          ...getRes(youdaoEnable, appId, secretKey) ? [] : getKeys({ appId, secretKey }),
          ...getRes(baiduEnable, baiduAppId, baiduSecretKey) ? [] : getKeys({ baiduAppId, baiduSecretKey }),
          ...getRes(microsoftEnable, microsoftLocation, microsoftSecretKey) ? [] : getKeys({ microsoftLocation, microsoftSecretKey })
        ];
        return validateFailedList;
      };
      this.addCommand({
        id: "translate",
        name: "translate",
        editorCallback: (editor) => {
          const { settings } = this;
          const enableKeys = Object.keys(settings).filter((key) => key.toLowerCase().includes("enable") && settings[key]);
          if (enableKeys.length) {
            const messages = validator2();
            if (!messages.length) {
              const sel = editor.getSelection();
              new TranslatorModal(this.app, sel, settings).open();
            } else {
              noticeHandler(`${messages.join(", ")} can not be empty!`);
            }
          }
        }
      });
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      const settings = yield this.loadData();
      this.settings = __spreadValues(__spreadValues({}, DEFAULT_SETTINGSF), settings || {});
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDAuMjcuMi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMC4yNy4yL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDAuMjcuMi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDAuMjcuMi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AwLjI3LjIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDAuMjcuMi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NFcnJvci5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMC4yNy4yL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AwLjI3LjIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvRm9ybURhdGEuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDAuMjcuMi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AwLjI3LjIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDAuMjcuMi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMC4yNy4yL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMC4yNy4yL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AwLjI3LjIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMC4yNy4yL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDAuMjcuMi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AwLjI3LjIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDAuMjcuMi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMC4yNy4yL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9udWxsLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AwLjI3LjIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMC4yNy4yL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AwLjI3LjIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDAuMjcuMi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AwLjI3LjIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AwLjI3LjIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMC4yNy4yL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDAuMjcuMi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDAuMjcuMi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMC4yNy4yL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL2F4aW9zQDAuMjcuMi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9heGlvc0AwLjI3LjIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vYXhpb3NAMC4yNy4yL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsICJtYWluLnRzIiwgInNldHRpbmdzLnRzIiwgInV0aWxzLnRzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS91dWlkQDguMy4yL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS91dWlkQDguMy4yL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcmVnZXguanMiLCAibm9kZV9tb2R1bGVzLy5wbnBtL3V1aWRAOC4zLjIvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92YWxpZGF0ZS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vdXVpZEA4LjMuMi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3N0cmluZ2lmeS5qcyIsICJub2RlX21vZHVsZXMvLnBucG0vdXVpZEA4LjMuMi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y0LmpzIiwgIm1kNS5qcyIsICJtb2RhbHMudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbnZhciBraW5kT2YgPSAoZnVuY3Rpb24oY2FjaGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoaW5nKSB7XG4gICAgdmFyIHN0ciA9IHRvU3RyaW5nLmNhbGwodGhpbmcpO1xuICAgIHJldHVybiBjYWNoZVtzdHJdIHx8IChjYWNoZVtzdHJdID0gc3RyLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpKTtcbiAgfTtcbn0pKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG5mdW5jdGlvbiBraW5kT2ZUZXN0KHR5cGUpIHtcbiAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzS2luZE9mKHRoaW5nKSB7XG4gICAgcmV0dXJuIGtpbmRPZih0aGluZykgPT09IHR5cGU7XG4gIH07XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKGtpbmRPZih2YWwpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzRmlsZSA9IGtpbmRPZlRlc3QoJ0ZpbGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0Jsb2IgPSBraW5kT2ZUZXN0KCdCbG9iJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlTGlzdFxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh0aGluZykge1xuICB2YXIgcGF0dGVybiA9ICdbb2JqZWN0IEZvcm1EYXRhXSc7XG4gIHJldHVybiB0aGluZyAmJiAoXG4gICAgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGluZyBpbnN0YW5jZW9mIEZvcm1EYXRhKSB8fFxuICAgIHRvU3RyaW5nLmNhbGwodGhpbmcpID09PSBwYXR0ZXJuIHx8XG4gICAgKGlzRnVuY3Rpb24odGhpbmcudG9TdHJpbmcpICYmIHRoaW5nLnRvU3RyaW5nKCkgPT09IHBhdHRlcm4pXG4gICk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc1VSTFNlYXJjaFBhcmFtcyA9IGtpbmRPZlRlc3QoJ1VSTFNlYXJjaFBhcmFtcycpO1xuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIudHJpbSA/IHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ29uc3RydWN0b3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcHJvcHNdXG4gKiBAcGFyYW0ge29iamVjdH0gW2Rlc2NyaXB0b3JzXVxuICovXG5cbmZ1bmN0aW9uIGluaGVyaXRzKGNvbnN0cnVjdG9yLCBzdXBlckNvbnN0cnVjdG9yLCBwcm9wcywgZGVzY3JpcHRvcnMpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZSwgZGVzY3JpcHRvcnMpO1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjtcbiAgcHJvcHMgJiYgT2JqZWN0LmFzc2lnbihjb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3BzKTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlIG9iamVjdCB3aXRoIGRlZXAgcHJvdG90eXBlIGNoYWluIHRvIGEgZmxhdCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmogc291cmNlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IFtkZXN0T2JqXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZpbHRlcl1cbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gdG9GbGF0T2JqZWN0KHNvdXJjZU9iaiwgZGVzdE9iaiwgZmlsdGVyKSB7XG4gIHZhciBwcm9wcztcbiAgdmFyIGk7XG4gIHZhciBwcm9wO1xuICB2YXIgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG5cbiAgZG8ge1xuICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlT2JqKTtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICBwcm9wID0gcHJvcHNbaV07XG4gICAgICBpZiAoIW1lcmdlZFtwcm9wXSkge1xuICAgICAgICBkZXN0T2JqW3Byb3BdID0gc291cmNlT2JqW3Byb3BdO1xuICAgICAgICBtZXJnZWRbcHJvcF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VPYmogPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc291cmNlT2JqKTtcbiAgfSB3aGlsZSAoc291cmNlT2JqICYmICghZmlsdGVyIHx8IGZpbHRlcihzb3VyY2VPYmosIGRlc3RPYmopKSAmJiBzb3VyY2VPYmogIT09IE9iamVjdC5wcm90b3R5cGUpO1xuXG4gIHJldHVybiBkZXN0T2JqO1xufVxuXG4vKlxuICogZGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb249IDBdXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbiA+IHN0ci5sZW5ndGgpIHtcbiAgICBwb3NpdGlvbiA9IHN0ci5sZW5ndGg7XG4gIH1cbiAgcG9zaXRpb24gLT0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgdmFyIGxhc3RJbmRleCA9IHN0ci5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBuZXcgYXJyYXkgZnJvbSBhcnJheSBsaWtlIG9iamVjdFxuICogQHBhcmFtIHsqfSBbdGhpbmddXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkodGhpbmcpIHtcbiAgaWYgKCF0aGluZykgcmV0dXJuIG51bGw7XG4gIHZhciBpID0gdGhpbmcubGVuZ3RoO1xuICBpZiAoaXNVbmRlZmluZWQoaSkpIHJldHVybiBudWxsO1xuICB2YXIgYXJyID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGFycltpXSA9IHRoaW5nW2ldO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG52YXIgaXNUeXBlZEFycmF5ID0gKGZ1bmN0aW9uKFR5cGVkQXJyYXkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoaW5nKSB7XG4gICAgcmV0dXJuIFR5cGVkQXJyYXkgJiYgdGhpbmcgaW5zdGFuY2VvZiBUeXBlZEFycmF5O1xuICB9O1xufSkodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihVaW50OEFycmF5KSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltLFxuICBzdHJpcEJPTTogc3RyaXBCT00sXG4gIGluaGVyaXRzOiBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0OiB0b0ZsYXRPYmplY3QsXG4gIGtpbmRPZjoga2luZE9mLFxuICBraW5kT2ZUZXN0OiBraW5kT2ZUZXN0LFxuICBlbmRzV2l0aDogZW5kc1dpdGgsXG4gIHRvQXJyYXk6IHRvQXJyYXksXG4gIGlzVHlwZWRBcnJheTogaXNUeXBlZEFycmF5LFxuICBpc0ZpbGVMaXN0OiBpc0ZpbGVMaXN0XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCxcbiAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBBeGlvc0Vycm9yKG1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5uYW1lID0gJ0F4aW9zRXJyb3InO1xuICBjb2RlICYmICh0aGlzLmNvZGUgPSBjb2RlKTtcbiAgY29uZmlnICYmICh0aGlzLmNvbmZpZyA9IGNvbmZpZyk7XG4gIHJlcXVlc3QgJiYgKHRoaXMucmVxdWVzdCA9IHJlcXVlc3QpO1xuICByZXNwb25zZSAmJiAodGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlKTtcbn1cblxudXRpbHMuaW5oZXJpdHMoQXhpb3NFcnJvciwgRXJyb3IsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9XG59KTtcblxudmFyIHByb3RvdHlwZSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xudmFyIGRlc2NyaXB0b3JzID0ge307XG5cbltcbiAgJ0VSUl9CQURfT1BUSU9OX1ZBTFVFJyxcbiAgJ0VSUl9CQURfT1BUSU9OJyxcbiAgJ0VDT05OQUJPUlRFRCcsXG4gICdFVElNRURPVVQnLFxuICAnRVJSX05FVFdPUksnLFxuICAnRVJSX0ZSX1RPT19NQU5ZX1JFRElSRUNUUycsXG4gICdFUlJfREVQUkVDQVRFRCcsXG4gICdFUlJfQkFEX1JFU1BPTlNFJyxcbiAgJ0VSUl9CQURfUkVRVUVTVCcsXG4gICdFUlJfQ0FOQ0VMRUQnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXS5mb3JFYWNoKGZ1bmN0aW9uKGNvZGUpIHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IGZ1bmN0aW9uKGVycm9yLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlLCBjdXN0b21Qcm9wcykge1xuICB2YXIgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcblxuICB1dGlscy50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0pO1xuXG4gIEF4aW9zRXJyb3IuY2FsbChheGlvc0Vycm9yLCBlcnJvci5tZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKTtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvc0Vycm9yO1xuIiwgIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHs/T2JqZWN0fSBbZm9ybURhdGFdXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICoqL1xuXG5mdW5jdGlvbiB0b0Zvcm1EYXRhKG9iaiwgZm9ybURhdGEpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IEZvcm1EYXRhKCk7XG5cbiAgdmFyIHN0YWNrID0gW107XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkKGRhdGEsIHBhcmVudEtleSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KGRhdGEpIHx8IHV0aWxzLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgIGlmIChzdGFjay5pbmRleE9mKGRhdGEpICE9PSAtMSkge1xuICAgICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXJlbnRLZXkpO1xuICAgICAgfVxuXG4gICAgICBzdGFjay5wdXNoKGRhdGEpO1xuXG4gICAgICB1dGlscy5mb3JFYWNoKGRhdGEsIGZ1bmN0aW9uIGVhY2godmFsdWUsIGtleSkge1xuICAgICAgICBpZiAodXRpbHMuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG4gICAgICAgIHZhciBmdWxsS2V5ID0gcGFyZW50S2V5ID8gcGFyZW50S2V5ICsgJy4nICsga2V5IDoga2V5O1xuICAgICAgICB2YXIgYXJyO1xuXG4gICAgICAgIGlmICh2YWx1ZSAmJiAhcGFyZW50S2V5ICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmVuZHNXaXRoKGtleSwgJ1tdJykgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICF1dGlscy5pc1VuZGVmaW5lZChlbCkgJiYgZm9ybURhdGEuYXBwZW5kKGZ1bGxLZXksIGNvbnZlcnRWYWx1ZShlbCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnVpbGQodmFsdWUsIGZ1bGxLZXkpO1xuICAgICAgfSk7XG5cbiAgICAgIHN0YWNrLnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQocGFyZW50S2V5LCBjb252ZXJ0VmFsdWUoZGF0YSkpO1xuICAgIH1cbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvRm9ybURhdGE7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4vQXhpb3NFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgW0F4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IocmVzcG9uc2Uuc3RhdHVzIC8gMTAwKSAtIDRdLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvQXhpb3NFcnJvcicpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgQXhpb3NFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UgPT0gbnVsbCA/ICdjYW5jZWxlZCcgOiBtZXNzYWdlLCBBeGlvc0Vycm9yLkVSUl9DQU5DRUxFRCk7XG4gIHRoaXMubmFtZSA9ICdDYW5jZWxlZEVycm9yJztcbn1cblxudXRpbHMuaW5oZXJpdHMoQ2FuY2VsZWRFcnJvciwgQXhpb3NFcnJvciwge1xuICBfX0NBTkNFTF9fOiB0cnVlXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxlZEVycm9yO1xuIiwgIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZVByb3RvY29sKHVybCkge1xuICB2YXIgbWF0Y2ggPSAvXihbLStcXHddezEsMjV9KSg6P1xcL1xcL3w6KS8uZXhlYyh1cmwpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIHRyYW5zaXRpb25hbERlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMvdHJhbnNpdGlvbmFsJyk7XG52YXIgQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvQXhpb3NFcnJvcicpO1xudmFyIENhbmNlbGVkRXJyb3IgPSByZXF1aXJlKCcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvcicpO1xudmFyIHBhcnNlUHJvdG9jb2wgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuICAgIHZhciByZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIHZhciBvbkNhbmNlbGVkO1xuICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi51bnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSAmJiB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgIHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCwgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgY29uZmlnLCByZXF1ZXN0LCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/IEF4aW9zRXJyb3IuRVRJTUVET1VUIDogQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuIHx8IGNvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoIWNhbmNlbCB8fCAoY2FuY2VsICYmIGNhbmNlbC50eXBlKSA/IG5ldyBDYW5jZWxlZEVycm9yKCkgOiBjYW5jZWwpO1xuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuICYmIGNvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBjb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0RGF0YSkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIHZhciBwcm90b2NvbCA9IHBhcnNlUHJvdG9jb2woZnVsbFBhdGgpO1xuXG4gICAgaWYgKHByb3RvY29sICYmIFsgJ2h0dHAnLCAnaHR0cHMnLCAnZmlsZScgXS5pbmRleE9mKHByb3RvY29sKSA9PT0gLTEpIHtcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignVW5zdXBwb3J0ZWQgcHJvdG9jb2wgJyArIHByb3RvY29sICsgJzonLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgY29uZmlnKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwgIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzdHJpY3Rcbm1vZHVsZS5leHBvcnRzID0gbnVsbDtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcbnZhciB0cmFuc2l0aW9uYWxEZWZhdWx0cyA9IHJlcXVpcmUoJy4vdHJhbnNpdGlvbmFsJyk7XG52YXIgdG9Gb3JtRGF0YSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdG9Gb3JtRGF0YScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4uL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscy50cmltKHJhd1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5uYW1lICE9PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChlbmNvZGVyIHx8IEpTT04uc3RyaW5naWZ5KShyYXdWYWx1ZSk7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHRyYW5zaXRpb25hbERlZmF1bHRzLFxuXG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHZhciBpc09iamVjdFBheWxvYWQgPSB1dGlscy5pc09iamVjdChkYXRhKTtcbiAgICB2YXIgY29udGVudFR5cGUgPSBoZWFkZXJzICYmIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddO1xuXG4gICAgdmFyIGlzRmlsZUxpc3Q7XG5cbiAgICBpZiAoKGlzRmlsZUxpc3QgPSB1dGlscy5pc0ZpbGVMaXN0KGRhdGEpKSB8fCAoaXNPYmplY3RQYXlsb2FkICYmIGNvbnRlbnRUeXBlID09PSAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScpKSB7XG4gICAgICB2YXIgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG4gICAgICByZXR1cm4gdG9Gb3JtRGF0YShpc0ZpbGVMaXN0ID8geydmaWxlc1tdJzogZGF0YX0gOiBkYXRhLCBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0UGF5bG9hZCB8fCBjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIHZhciB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgdmFyIHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICB2YXIgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIHZhciBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKHN0cmljdEpTT05QYXJzaW5nIHx8IChmb3JjZWRKU09OUGFyc2luZyAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiBkYXRhLmxlbmd0aCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZSwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFLCB0aGlzLCBudWxsLCB0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgZW52OiB7XG4gICAgRm9ybURhdGE6IHJlcXVpcmUoJy4vZW52L0Zvcm1EYXRhJylcbiAgfSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9LFxuXG4gIGhlYWRlcnM6IHtcbiAgICBjb21tb246IHtcbiAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICB2YXIgY29udGV4dCA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29udGV4dCwgZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgQ2FuY2VsZWRFcnJvciA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UodGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1lcmdlTWFwID0ge1xuICAgICd1cmwnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdtZXRob2QnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdkYXRhJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnYmFzZVVSTCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlcXVlc3QnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXNwb25zZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3BhcmFtc1NlcmlhbGl6ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dE1lc3NhZ2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd3aXRoQ3JlZGVudGlhbHMnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdhZGFwdGVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VUeXBlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkNvb2tpZU5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmSGVhZGVyTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uVXBsb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvbkRvd25sb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdkZWNvbXByZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Q29udGVudExlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heEJvZHlMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdiZWZvcmVSZWRpcmVjdCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zcG9ydCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2h0dHBBZ2VudCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2h0dHBzQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdjYW5jZWxUb2tlbic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3NvY2tldFBhdGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdyZXNwb25zZUVuY29kaW5nJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndmFsaWRhdGVTdGF0dXMnOiBtZXJnZURpcmVjdEtleXNcbiAgfTtcblxuICB1dGlscy5mb3JFYWNoKE9iamVjdC5rZXlzKGNvbmZpZzEpLmNvbmNhdChPYmplY3Qua2V5cyhjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgdmFyIG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICB2YXIgY29uZmlnVmFsdWUgPSBtZXJnZShwcm9wKTtcbiAgICAodXRpbHMuaXNVbmRlZmluZWQoY29uZmlnVmFsdWUpICYmIG1lcmdlICE9PSBtZXJnZURpcmVjdEtleXMpIHx8IChjb25maWdbcHJvcF0gPSBjb25maWdWYWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwgIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInZlcnNpb25cIjogXCIwLjI3LjJcIlxufTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2Vudi9kYXRhJykudmVyc2lvbjtcbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZS9BeGlvc0Vycm9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaChmdW5jdGlvbih0eXBlLCBpKSB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG52YXIgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvcHQsIG9wdHMpIHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfREVQUkVDQVRFRFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnLCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgfVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIHZhciBvcHQgPSBrZXlzW2ldO1xuICAgIHZhciB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTik7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NlcnRPcHRpb25zOiBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi9idWlsZEZ1bGxQYXRoJyk7XG52YXIgdmFsaWRhdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy92YWxpZGF0b3InKTtcblxudmFyIHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZ09yVXJsIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbDtcblxuICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgfSwgZmFsc2UpO1xuICB9XG5cbiAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICB2YXIgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdmFyIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcHJvbWlzZTtcblxuICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG5cbiAgICBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgIGNoYWluID0gY2hhaW4uY29uY2F0KHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG5cbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG5cbiAgdmFyIG5ld0NvbmZpZyA9IGNvbmZpZztcbiAgd2hpbGUgKHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHZhciBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdmFyIG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHRyeSB7XG4gICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvblJlamVjdGVkKGVycm9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdChuZXdDb25maWcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH1cblxuICB3aGlsZSAocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCksIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIHJldHVybiBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlSFRUUE1ldGhvZChpc0Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaHR0cE1ldGhvZCh1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGRhdGE6IGRhdGFcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBnZW5lcmF0ZUhUVFBNZXRob2QoKTtcblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kICsgJ0Zvcm0nXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCh0cnVlKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbGVkRXJyb3IgPSByZXF1aXJlKCcuL0NhbmNlbGVkRXJyb3InKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuXG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuKGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgdmFyIGk7XG4gICAgdmFyIGwgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICB9XG4gICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuID0gZnVuY3Rpb24ob25mdWxmaWxsZWQpIHtcbiAgICB2YXIgX3Jlc29sdmU7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcblxuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgfVxufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gdXRpbHMuaXNPYmplY3QocGF5bG9hZCkgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbGVkRXJyb3IgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxlZEVycm9yJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5heGlvcy5WRVJTSU9OID0gcmVxdWlyZSgnLi9lbnYvZGF0YScpLnZlcnNpb247XG5heGlvcy50b0Zvcm1EYXRhID0gcmVxdWlyZSgnLi9oZWxwZXJzL3RvRm9ybURhdGEnKTtcblxuLy8gRXhwb3NlIEF4aW9zRXJyb3IgY2xhc3NcbmF4aW9zLkF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9saWIvY29yZS9BeGlvc0Vycm9yJyk7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwgIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCAiLypcclxuICogQEF1dGhvcjogbHVoYWlmZW5nNjY2IHlvdXp1aUBob3RtYWlsLmNvbVxyXG4gKiBARGF0ZTogMjAyMi0wOC0wOSAxMTozODozOVxyXG4gKiBATGFzdEVkaXRvcnM6IGx1aGFpZmVuZzY2NlxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTEwLTI2IDE4OjQxOjA0XHJcbiAqIEBEZXNjcmlwdGlvbjogXHJcbiAqL1xyXG5pbXBvcnQgeyBQbHVnaW4gfSBmcm9tIFwib2JzaWRpYW5cIlxyXG5pbXBvcnQgeyBUcmFuc2xhdG9yU2V0dGluZ1RhYiB9IGZyb20gJy4vc2V0dGluZ3MnXHJcbmltcG9ydCB7IFRyYW5zbGF0b3JNb2RhbCB9IGZyb20gJy4vbW9kYWxzJ1xyXG5pbXBvcnQgeyBub3RpY2VIYW5kbGVyIH0gZnJvbSAnLi91dGlscydcclxuaW1wb3J0IHsgVHJhbnNsYXRvclNldHRpbmcgfSBmcm9tICcuL2ludGVyZmFjZXMnXHJcblxyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTRjogVHJhbnNsYXRvclNldHRpbmcgPSB7XHJcbiAgIC8vIFlvdWRhbyBTZXR0aW5nc1xyXG4gICB5b3VkYW9FbmFibGU6IGZhbHNlLFxyXG4gICBhcHBJZDogJycsXHJcbiAgIHNlY3JldEtleTogJycsXHJcbiAgIHlGcm9tOiAnJyxcclxuICAgeVRvOiAnJyxcclxuICAgYXVkaW86IGZhbHNlLFxyXG4gICAvLyBNaWNyb3NvZnQgU2V0dGluZ3NcclxuICAgbWljcm9zb2Z0RW5hYmxlOiBmYWxzZSxcclxuICAgbWljcm9zb2Z0U2VjcmV0S2V5OiAnJyxcclxuICAgbWljcm9zb2Z0TG9jYXRpb246ICcnLFxyXG4gICBtRnJvbTogJycsXHJcbiAgIG1UbzogJycsXHJcbiAgIC8vIEJhaWR1IFNldHRpbmdzXHJcbiAgIGJhaWR1RW5hYmxlOiBmYWxzZSxcclxuICAgYmFpZHVTZWNyZXRLZXk6ICcnLFxyXG4gICBiYWlkdUFwcElkOiAnJyxcclxuICAgYkZyb206ICcnLFxyXG4gICBiVG86ICcnXHJcbn1cclxuXHJcbnR5cGUgQ29uZmlnID0ga2V5b2YgVHJhbnNsYXRvclNldHRpbmdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYW5zbGF0b3JQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG4gIHNldHRpbmdzOiBUcmFuc2xhdG9yU2V0dGluZ1xyXG5cclxuICBhc3luYyBvbmxvYWQoKSB7XHJcbiAgICAvLyBsb2FkIHNldHRpbmdzXHJcbiAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpXHJcbiAgICAvLyBhZGQgc2V0dGluZyB0YWJcclxuICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgVHJhbnNsYXRvclNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKVxyXG4gICAgLy8gYWRkIHJpYmJvbiBpY29uXHJcbiAgICB0aGlzLmFkZFJpYmJvbkljb24oJ2Jvb2snLCAnVHJhbnNsYXRlJywgKCkgPT4ge1xyXG4gICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgIHRoaXMuYXBwLmNvbW1hbmRzLmV4ZWN1dGVDb21tYW5kQnlJZCgnb2JzaWRpYW4tdHJhbnNsYXRvcjp0cmFuc2xhdGUnKVxyXG4gICAgfSk7XHJcbiAgICAvLyB2YWxpZGF0b3JcclxuICAgIGNvbnN0IHZhbGlkYXRvciA9ICgpID0+IHtcclxuICAgICAgY29uc3Qge1xyXG4gICAgICAgIHlvdWRhb0VuYWJsZSwgYXBwSWQsIHNlY3JldEtleSwgYmFpZHVBcHBJZCwgYmFpZHVFbmFibGUsIGJhaWR1U2VjcmV0S2V5LCBtaWNyb3NvZnRFbmFibGUsIG1pY3Jvc29mdExvY2F0aW9uLCBtaWNyb3NvZnRTZWNyZXRLZXlcclxuICAgICAgfSA9IHRoaXMuc2V0dGluZ3NcclxuICAgICAgY29uc3QgZ2V0S2V5cyA9IChvYmo6IHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB9KTogc3RyaW5nW10gPT4ge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmZpbHRlcigoa2V5OiBDb25maWcpID0+ICFvYmpba2V5XSlcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBnZXRSZXMgPSAoZW5hYmxlOiBib29sZWFuLCBpZE9yTG9jYXRpb246IHN0cmluZywga2V5OiBzdHJpbmcpOiBib29sZWFuID0+IChlbmFibGUgJiYgISFpZE9yTG9jYXRpb24gJiYgISFrZXkpIHx8ICFlbmFibGVcclxuICAgICAgY29uc3QgdmFsaWRhdGVGYWlsZWRMaXN0ID0gW1xyXG4gICAgICAgIC4uLihnZXRSZXMoeW91ZGFvRW5hYmxlLCBhcHBJZCwgc2VjcmV0S2V5KSA/IFtdIDogZ2V0S2V5cyh7IGFwcElkLCBzZWNyZXRLZXkgfSkpLFxyXG4gICAgICAgIC4uLihnZXRSZXMoYmFpZHVFbmFibGUsIGJhaWR1QXBwSWQsIGJhaWR1U2VjcmV0S2V5KSA/IFtdIDogZ2V0S2V5cyh7IGJhaWR1QXBwSWQsIGJhaWR1U2VjcmV0S2V5IH0pKSxcclxuICAgICAgICAuLi4oZ2V0UmVzKG1pY3Jvc29mdEVuYWJsZSwgbWljcm9zb2Z0TG9jYXRpb24sIG1pY3Jvc29mdFNlY3JldEtleSkgPyBbXSA6IGdldEtleXMoeyBtaWNyb3NvZnRMb2NhdGlvbiwgbWljcm9zb2Z0U2VjcmV0S2V5IH0pKSxcclxuICAgICAgXVxyXG4gICAgICByZXR1cm4gdmFsaWRhdGVGYWlsZWRMaXN0XHJcbiAgICB9XHJcblx0XHQvLyBhZGQgY29tbWFuZFxyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6ICd0cmFuc2xhdGUnLFxyXG5cdFx0XHRuYW1lOiAndHJhbnNsYXRlJyxcclxuXHRcdFx0ZWRpdG9yQ2FsbGJhY2s6IGVkaXRvciA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBzZXR0aW5ncyB9ID0gdGhpc1xyXG4gICAgICAgIGNvbnN0IGVuYWJsZUtleXMgPSBPYmplY3Qua2V5cyhzZXR0aW5ncykuZmlsdGVyKGtleSA9PiBrZXkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnZW5hYmxlJykgJiYgc2V0dGluZ3Nba2V5IGFzIGtleW9mIFRyYW5zbGF0b3JTZXR0aW5nXSlcclxuICAgICAgICBpZiAoZW5hYmxlS2V5cy5sZW5ndGgpIHtcclxuICAgICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gdmFsaWRhdG9yKClcclxuICAgICAgICAgIGlmICghbWVzc2FnZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbCA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKVxyXG4gICAgICAgICAgICBuZXcgVHJhbnNsYXRvck1vZGFsKHRoaXMuYXBwLCBzZWwsIHNldHRpbmdzKS5vcGVuKClcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5vdGljZUhhbmRsZXIoYCR7bWVzc2FnZXMuam9pbignLCAnKX0gY2FuIG5vdCBiZSBlbXB0eSFgKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuICB9XHJcblxyXG4gIGFzeW5jIGxvYWRTZXR0aW5ncyAoKSB7XHJcbiAgICBjb25zdCBzZXR0aW5ncyA9IGF3YWl0IHRoaXMubG9hZERhdGEoKVxyXG4gICAgdGhpcy5zZXR0aW5ncyA9IHtcclxuICAgICAgLi4uREVGQVVMVF9TRVRUSU5HU0YsXHJcbiAgICAgIC4uLihzZXR0aW5ncyB8fCB7fSlcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgYXN5bmMgc2F2ZVNldHRpbmdzICgpIHtcclxuICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncylcclxuICB9XHJcbn1cclxuIiwgImltcG9ydCBUcmFuc2xhdG9yUGx1Z2luIGZyb20gJy4vbWFpbidcbmltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJ1xuaW1wb3J0IHsgZ2V0TGFuZ3VhZ2VPcHRpb25zLCBMQU5HVUFHRVMsIE1JQ1JPU09GVF9MQU5HVUFHRVMsIEJBSURVX0xBTkdVQUdFUyB9IGZyb20gJy4vdXRpbHMnXG5pbXBvcnQgeyBUcmFuc2xhdG9yU2V0dGluZyB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbmludGVyZmFjZSBEZXNjIHtcbiAgdHlwZTogc3RyaW5nXG4gIGhyZWY/OiBzdHJpbmdcbiAgdGV4dDogc3RyaW5nXG59XG5cbmludGVyZmFjZSBTZXR0aW5nSXRlbSB7XG4gIG5hbWU6IHN0cmluZ1xuICB0eXBlOiBzdHJpbmdcbiAga2V5OiBzdHJpbmdcbiAgZGVzYzogc3RyaW5nXG4gIGRlZmF1bHQ6IGJvb2xlYW4gfCBzdHJpbmdcbiAgb3B0aW9ucz86IHtba2V5OiBzdHJpbmddOiBzdHJpbmd9XG59XG5cbmludGVyZmFjZSBCbG9jayB7XG4gIHRpdGxlOiBzdHJpbmcsXG4gIGRlc2M/OiBBcnJheTxEZXNjPixcbiAgc2V0dGluZ3M6IEFycmF5PFNldHRpbmdJdGVtPlxufVxuXG5cbmNvbnN0IFNFVFRJTkdfQkxPQ0tTOiBBcnJheTxCbG9jaz4gPSBbXG4gIHtcbiAgICB0aXRsZTogJ1lvdWRhbyBUcmFuc2xhdG9yIFNldHRpbmdzJyxcbiAgICBkZXNjOiBbXG4gICAgICB7IHR5cGU6ICd0ZXh0JywgdGV4dDogJ0JlZm9yZSB1c2luZyB0aGlzIHBsdWdpbiwgeW91IG5lZWQgYnJvd3NlIHRvICcgfSxcbiAgICAgIHsgdHlwZTogJ2hyZWYnLCBocmVmOiAnaHR0cHM6Ly9haS55b3VkYW8uY29tLyMvJywgdGV4dDogJ2h0dHBzOi8vYWkueW91ZGFvLmNvbS8jLycgfSxcbiAgICAgIHsgdHlwZTogJ3RleHQnLCB0ZXh0OiAndG8gcmVnaXN0ZXIgZmlyc3QhJyB9XG4gICAgXSxcbiAgICBzZXR0aW5nczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiAnRW5hYmxlJyxcbiAgICAgICAgZGVzYzogJ0VuYWJsZSB0aGUgeW91ZGFvIHRyYW5zbGF0b3Igc2VydmljZS4nLFxuICAgICAgICB0eXBlOiAndG9nZ2xlJyxcbiAgICAgICAga2V5OiAneW91ZGFvRW5hYmxlJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ0FwcElkJyxcbiAgICAgICAgZGVzYzogJ1BsZWFzZSBzZXQgeW91ciBhcHAgaWQuJyxcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICBrZXk6ICdhcHBJZCcsXG4gICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdTZWNyZXRLZXknLFxuICAgICAgICBkZXNjOiAnUGxlYXNlIHNldCB5b3VyIHNlY3JldCBpZC4nLFxuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIGtleTogJ3NlY3JldEtleScsXG4gICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdGcm9tJyxcbiAgICAgICAgZGVzYzogJ0Nob29zZSB3aGljaCBsYW5ndWFnZSB5b3Ugd2FubmEgdHJhbnNsYXRlIGZyb20uJyxcbiAgICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICAgIGtleTogJ3lGcm9tJyxcbiAgICAgICAgZGVmYXVsdDogJ2VuJyxcbiAgICAgICAgb3B0aW9uczogZ2V0TGFuZ3VhZ2VPcHRpb25zKExBTkdVQUdFUylcbiAgICAgIH0sIHtcbiAgICAgICAgbmFtZTogJ1RvJyxcbiAgICAgICAgZGVzYzogJ0Nob29zZSB3aGljaCBsYW5ndWFnZSB5b3Ugd2FubmEgdHJhbnNsYXRlIGludG8uJyxcbiAgICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICAgIGtleTogJ3lUbycsXG4gICAgICAgIGRlZmF1bHQ6ICd6aC1DSFMnLFxuICAgICAgICBvcHRpb25zOiBnZXRMYW5ndWFnZU9wdGlvbnMoTEFOR1VBR0VTKVxuICAgICAgfSwge1xuICAgICAgICBuYW1lOiAnQXVkaW8nLFxuICAgICAgICBkZXNjOiAnV2hldGhlciB0byBlbmFibGUgdGhlIGF1ZGlvIGZ1bmN0aW9uPycsXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnLFxuICAgICAgICBrZXk6ICdhdWRpbycsXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgdGl0bGU6ICdNaWNyb3NvZnQgVHJhbnNsYXRvciBTZXR0aW5ncycsXG4gICAgZGVzYzogW1xuICAgICAgeyB0eXBlOiAndGV4dCcsIHRleHQ6ICdGb3IgbW9yZSBpbmZvbWF0aW9uIG9uIHVzaW5nIGl0LCByZWZlciB0byAnIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdocmVmJyxcbiAgICAgICAgaHJlZjogJ2h0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3poLWNuL2F6dXJlL2NvZ25pdGl2ZS1zZXJ2aWNlcy90cmFuc2xhdG9yL3F1aWNrc3RhcnQtdHJhbnNsYXRvcicsXG4gICAgICAgIHRleHQ6ICdodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS96aC1jbi9henVyZS9jb2duaXRpdmUtc2VydmljZXMvdHJhbnNsYXRvci9xdWlja3N0YXJ0LXRyYW5zbGF0b3InXG4gICAgICB9LFxuICAgICAgeyB0eXBlOiAndGV4dCcsIHRleHQ6ICcuJyB9XG4gICAgXSxcbiAgICBzZXR0aW5nczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiAnRW5hYmxlJyxcbiAgICAgICAgZGVzYzogJ0VuYWJsZSB0aGUgTWljcm9zb2Z0IHRyYW5zbGF0b3Igc2VydmljZS4nLFxuICAgICAgICB0eXBlOiAndG9nZ2xlJyxcbiAgICAgICAga2V5OiAnbWljcm9zb2Z0RW5hYmxlJyxcbiAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgbmFtZTogJ1NlY3JldEtleScsXG4gICAgICAgIGRlc2M6ICdQbGVhc2Ugc2V0IHlvdXIgc2VjcmV0IGtleS4nLFxuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIGtleTogJ21pY3Jvc29mdFNlY3JldEtleScsXG4gICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdMb2NhdGlvbicsXG4gICAgICAgIGRlc2M6J1BsZWFzZSBzZXQgeW91ciB0cmFuc2FjdGlvbiBzZXJ2aWNlIGxvY2F0aW9uLicsXG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAga2V5OiAnbWljcm9zb2Z0TG9jYXRpb24nLFxuICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgfSwge1xuICAgICAgICBuYW1lOiAnRnJvbScsXG4gICAgICAgIGRlc2M6ICdDaG9vc2Ugd2hpY2ggbGFuZ3VhZ2UgeW91IHdhbm5hIHRyYW5zbGF0ZSBmcm9tLicsXG4gICAgICAgIHR5cGU6ICdzZWxlY3QnLFxuICAgICAgICBrZXk6ICdtRnJvbScsXG4gICAgICAgIGRlZmF1bHQ6ICdlbicsXG4gICAgICAgIG9wdGlvbnM6IGdldExhbmd1YWdlT3B0aW9ucyhNSUNST1NPRlRfTEFOR1VBR0VTKVxuICAgICAgfSwge1xuICAgICAgICBuYW1lOiAnVG8nLFxuICAgICAgICBkZXNjOiAnQ2hvb3NlIHdoaWNoIGxhbmd1YWdlIHlvdSB3YW5uYSB0cmFuc2xhdGUgaW50by4nLFxuICAgICAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICAgICAga2V5OiAnbVRvJyxcbiAgICAgICAgZGVmYXVsdDogJ3poLUhhbnMnLFxuICAgICAgICBvcHRpb25zOiBnZXRMYW5ndWFnZU9wdGlvbnMoTUlDUk9TT0ZUX0xBTkdVQUdFUylcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICB0aXRsZTogJ0JhaWR1IFRyYW5zbGF0b3IgU2V0dGluZ3MnLFxuICAgIGRlc2M6IFtcbiAgICAgIHsgdHlwZTogJ3RleHQnLCB0ZXh0OiAnQmVmb3JlIHVzaW5nIHRoaXMgcGx1Z2luLCB5b3UgbmVlZCBicm93c2UgdG8gJyB9LFxuICAgICAgeyB0eXBlOiAnaHJlZicsIGhyZWY6ICdodHRwOi8vYXBpLmZhbnlpLmJhaWR1LmNvbS8nLCB0ZXh0OiAnaHR0cDovL2FwaS5mYW55aS5iYWlkdS5jb20vJyB9LFxuICAgICAgeyB0eXBlOiAndGV4dCcsIHRleHQ6ICd0byByZWdpc3RlciBmaXJzdCEnIH1cbiAgICBdLFxuICAgIHNldHRpbmdzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdFbmFibGUnLFxuICAgICAgICBkZXNjOiAnRW5hYmxlIHRoZSBiYWlkdSB0cmFuc2xhdG9yIHNlcnZpY2UuJyxcbiAgICAgICAgdHlwZTogJ3RvZ2dsZScsXG4gICAgICAgIGtleTogJ2JhaWR1RW5hYmxlJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ0FwcElkJyxcbiAgICAgICAgZGVzYzogJ1BsZWFzZSBzZXQgeW91ciBiYWlkdSBhcHAgaWQuJyxcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICBrZXk6ICdiYWlkdUFwcElkJyxcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH0sIHtcbiAgICAgICAgbmFtZTogJ1NlY3JldEtleScsXG4gICAgICAgIGRlc2M6ICdQbGVhc2Ugc2V0IHlvdXIgYmFpZHUgc2VjcmV0IGlkLicsXG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAga2V5OiAnYmFpZHVTZWNyZXRLZXknLFxuICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ0Zyb20nLFxuICAgICAgICBkZXNjOiAnQ2hvb3NlIHdoaWNoIGxhbmd1YWdlIHlvdSB3YW5uYSB0cmFuc2xhdGUgZnJvbS4nLFxuICAgICAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICAgICAga2V5OiAnYkZyb20nLFxuICAgICAgICBkZWZhdWx0OiAnZW4nLFxuICAgICAgICBvcHRpb25zOiBnZXRMYW5ndWFnZU9wdGlvbnMoQkFJRFVfTEFOR1VBR0VTKVxuICAgICAgfSwge1xuICAgICAgICBuYW1lOiAnVG8nLFxuICAgICAgICBkZXNjOiAnQ2hvb3NlIHdoaWNoIGxhbmd1YWdlIHlvdSB3YW5uYSB0cmFuc2xhdGUgaW50by4nLFxuICAgICAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICAgICAga2V5OiAnYlRvJyxcbiAgICAgICAgZGVmYXVsdDogJ3poJyxcbiAgICAgICAgb3B0aW9uczogZ2V0TGFuZ3VhZ2VPcHRpb25zKEJBSURVX0xBTkdVQUdFUylcbiAgICAgIH0sIHtcbiAgICAgICAgbmFtZTogJ0F1ZGlvJyxcbiAgICAgICAgZGVzYzogJ1doZXRoZXIgdG8gZW5hYmxlIHRoZSBhdWRpbyBmdW5jdGlvbj8nLFxuICAgICAgICB0eXBlOiAndG9nZ2xlJyxcbiAgICAgICAga2V5OiAnYXVkaW8nLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgfVxuICAgIF1cbiAgfVxuXVxuXG4vLyBkZXNjIGNyZWF0b3JcbmZ1bmN0aW9uIGNyZWF0ZURlc2MoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgZGVzYzogQXJyYXk8RGVzYz4pIHtcbiAgY29uc3QgZGVzY0VsID0gY29udGFpbmVyLmNyZWF0ZUVsKFwicFwiLCB7IGNsczogJ3RyYW5zYWN0aW9uX2NvbnRhaW5lci1kZXNjJyB9KTtcbiAgZGVzYy5mb3JFYWNoKCh7IHR5cGUsIHRleHQsIGhyZWYgfSkgPT4ge1xuICAgIHN3aXRjaCh0eXBlKSB7XG4gICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgZGVzY0VsLmFwcGVuZFRleHQodGV4dClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2hyZWYnOlxuICAgICAgICBkZXNjRWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWwoJ2EnLCB7XG4gICAgICAgICAgdGV4dCwgaHJlZlxuICAgICAgICB9KSlcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH0pXG59XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2xhdG9yU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICBwbHVnaW46IFRyYW5zbGF0b3JQbHVnaW5cblxuICBjb25zdHJ1Y3RvciAoYXBwOiBBcHAsIHBsdWdpbjogVHJhbnNsYXRvclBsdWdpbikge1xuICAgIHN1cGVyIChhcHAsIHBsdWdpbilcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpblxuICB9XG5cbiAgZGlzcGxheSgpOiB2b2lkIHtcblx0XHRjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzXG4gICAgY29udGFpbmVyRWwuZW1wdHkoKVxuXG5cdFx0Ly8gQWRkIFNldHRpbmcgdGl0bGVcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbChcImgyXCIsIHsgdGV4dDogXCJUcmFuc2xhdG9yIFNldHRpbmdzXCIgfSk7XG5cdFx0Ly8gSW5pdCBzZXR0aW5nc1xuICAgIFNFVFRJTkdfQkxPQ0tTLmZvckVhY2goKHsgdGl0bGUsIHNldHRpbmdzLCBkZXNjIH0pID0+IHtcbiAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDZcIiwgeyB0ZXh0OiB0aXRsZSB9KVxuICAgICAgZGVzYyAmJiBjcmVhdGVEZXNjKGNvbnRhaW5lckVsLCBkZXNjKVxuICAgICAgc2V0dGluZ3MuZm9yRWFjaChzZXQgPT4ge1xuICAgICAgICBjb25zdCB7IG5hbWUsIGRlc2MsIHR5cGUsIGtleSwgZGVmYXVsdDogZGVmYXVsdFZhbHVlLCBvcHRpb25zIH0gPSBzZXRcbiAgICAgICAgY29uc3QgZWwgPSBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAuc2V0TmFtZShuYW1lKVxuICAgICAgICAgIC5zZXREZXNjKGRlc2MpXG4gICAgICAgIGNvbnN0IHZhbCA9IHRoaXMucGx1Z2luLnNldHRpbmdzW2tleSBhcyBrZXlvZiBUcmFuc2xhdG9yU2V0dGluZ11cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgICAgICBlbC5hZGRUZXh0KCh0ZXh0KSA9PlxuICAgICAgICAgICAgICB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKG5hbWUpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKCh2YWwgfHwgZGVmYXVsdFZhbHVlKSBhcyBzdHJpbmcpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgKHRoaXMucGx1Z2luLnNldHRpbmdzW2tleSBhcyBrZXlvZiBUcmFuc2xhdG9yU2V0dGluZ10gYXMgc3RyaW5nKSA9IHZhbHVlLnRyaW0oKVxuICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICAgICAgZWwuYWRkRHJvcGRvd24oZHAgPT5cbiAgICAgICAgICAgICAgZHBcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9ucyhvcHRpb25zKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSgodmFsIHx8IGRlZmF1bHRWYWx1ZSkgYXMgc3RyaW5nKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyB2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAodGhpcy5wbHVnaW4uc2V0dGluZ3Nba2V5IGFzIGtleW9mIFRyYW5zbGF0b3JTZXR0aW5nXSBhcyBzdHJpbmcpID0gdmFsdWVcbiAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSAndG9nZ2xlJzpcbiAgICAgICAgICAgIGVsLmFkZFRvZ2dsZSh0ZyA9PiB7XG4gICAgICAgICAgICAgIHRnXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKCh2YWwgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHZhbCkgYXMgYm9vbGVhbilcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgdmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgKHRoaXMucGx1Z2luLnNldHRpbmdzW2tleSBhcyBrZXlvZiBUcmFuc2xhdG9yU2V0dGluZ10gYXMgYm9vbGVhbikgPSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgZGVmYXVsdDogYnJlYWtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG4iLCAiaW1wb3J0IHsgTm90aWNlLCByZXF1ZXN0LCByZXF1ZXN0VXJsIH0gZnJvbSAnb2JzaWRpYW4nXG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJ1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuaW1wb3J0IHsgTUQ1IH0gZnJvbSAnLi9tZDUnXG5cbmludGVyZmFjZSBQYXJhbXMge1xuXHRba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXJcbn1cblxuaW50ZXJmYWNlIExhbmd1YWdlT3B0aW9ucyB7XG4gIFtrZXk6IHN0cmluZ106IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgTWljcm9zb2Z0VHJhbnNsYXRpb25zIHtcbiAgdHJhbnNsYXRpb25zOiBBcnJheTx7IHRleHQ6IHN0cmluZywgW2tleTogc3RyaW5nXTogc3RyaW5nIH0+XG59XG5cbnR5cGUgVHJhbnNsYXRlQ2FsbGJhY2sgPSAocmVzOiBhbnkpID0+IHZvaWRcblxuLyoqXG4gKiBub3RpY2UgaGFuZGxlclxuICogQHBhcmFtIG1zZzogbm90aWNlIG1lc3NhZ2VcbiAqL1xuY29uc3Qgbm90aWNlSGFuZGxlciA9IChtc2c6IHN0cmluZykgPT4gbmV3IE5vdGljZShtc2cpXG5cbmZ1bmN0aW9uIHRydW5jYXRlIChxOiBzdHJpbmcpIHtcblx0Y29uc3QgbGVuID0gcS5sZW5ndGhcblx0aWYobGVuIDw9IDIwKSByZXR1cm4gcVxuXHRyZXR1cm4gcS5zdWJzdHJpbmcoMCwgMTApICsgbGVuICsgcS5zdWJzdHJpbmcobGVuIC0gMTAsIGxlbilcbn1cblxuLyoqXG4gKiBnZXRSZXF1ZXN0XG4gKiBAcGFyYW0gdXJsIFxuICogQHBhcmFtIGNiIGNhbGxiYWNrIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldFJlcXVlc3QodXJsOiBzdHJpbmcsIGNiOiBUcmFuc2xhdGVDYWxsYmFjaykge1xuICByZXF1ZXN0KHtcblx0XHRtZXRob2Q6ICdnZXQnLFxuXHRcdHVybFxuXHR9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZTogYW55KSB7XG5cdFx0Y2IoSlNPTi5wYXJzZShyZXNwb25zZSB8fCAne30nKSlcblx0fSlcblx0LmNhdGNoKGZ1bmN0aW9uIChlcnJvcjogeyBtZXNzYWdlOiBzdHJpbmcgfSkge1xuXHRcdG5vdGljZUhhbmRsZXIoZXJyb3IubWVzc2FnZSB8fCAnTm8gcmVzdWx0cyEnKVxuXHR9KVxufVxuXG4vKipcbiAqIHlvdWRhbyB0cmFuc2xhdGUgaGFuZGxlclxuICogQHBhcmFtIHE6IHRleHQgbmVlZCB0cmFuc2xhdGVkXG4gKiBAcGFyYW0gY29uZmlnOiB5b3VkYW8gY29uZmlnXG4gKiBAcGFyYW0gY2I6IGNhbGxiYWNrIGZ1bmN0aW9uXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZVRyYW5zbGF0ZSAocTogc3RyaW5nLCBjb25maWc6IHtcblx0YXBwSWQ6IHN0cmluZyxcblx0c2VjcmV0S2V5OiBzdHJpbmcsXG4gIGZyb20/OiBzdHJpbmcsXG5cdHRvOiBzdHJpbmdcbn0sIGNiOiBUcmFuc2xhdGVDYWxsYmFjaykge1xuXHRjb25zdCBzYWx0ID0gbmV3IERhdGUoKS5nZXRUaW1lKClcblx0Y29uc3QgY3VydGltZSA9IE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKVxuXHRjb25zdCBzdHIxID0gY29uZmlnLmFwcElkICsgdHJ1bmNhdGUocSkgKyBzYWx0ICsgY3VydGltZSArIGNvbmZpZy5zZWNyZXRLZXlcblx0Ly8gZW5jb2RlIGFzICh1dGYtOCkgVWludDhBcnJheVxuXHRjb25zdCBoYXNoQnVmZmVyID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoJ1NIQS0yNTYnLCBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyMSkpO1xuXHQvLyBoYXNoIHRoZSBtZXNzYWdlXG5cdGNvbnN0IGhhc2hBcnJheSA9IEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoaGFzaEJ1ZmZlcikpOyAvLyBjb252ZXJ0IGJ1ZmZlciB0byBieXRlIGFycmF5XG5cdGNvbnN0IHNpZ24gPSBoYXNoQXJyYXkubWFwKGIgPT4gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuam9pbignJyk7IC8vIGNvbnZlcnQgYnl0ZXMgdG8gaGV4IHN0cmluZ1xuXHRjb25zdCBmcm9tID0gY29uZmlnLmZyb20gfHwgJ2F1dG8nXG5cdGNvbnN0IHBhcmFtczogUGFyYW1zID0geyBxLCBhcHBLZXk6IGNvbmZpZy5hcHBJZCwgc2FsdCwgZnJvbSwgdG86IGNvbmZpZy50bywgc2lnbiwgY3VydGltZSwgc2lnblR5cGU6ICd2MycgfVxuXHRjb25zdCBxdWVyeSA9IE9iamVjdC5rZXlzKHBhcmFtcykubWFwKGtleSA9PiBgJHtrZXl9PSR7cGFyYW1zW2tleV19YCkuam9pbignJicpXG4gIGdldFJlcXVlc3QoYGh0dHBzOi8vb3BlbmFwaS55b3VkYW8uY29tL2FwaT8ke3F1ZXJ5fWAsIGNiKVxufVxuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVNaWNyb3NvZnRUcmFuc2xhdGUocTogc3RyaW5nLCBjb25maWc6IHtcbiAgc2VjcmV0S2V5OiBzdHJpbmcsXG4gIGZyb20/OiBzdHJpbmcsXG4gIHRvOiBzdHJpbmcsXG4gIGxvY2F0aW9uOiBzdHJpbmdcbn0sIGNiOiBUcmFuc2xhdGVDYWxsYmFjaykge1xuXHRjb25zdCBlbmRwb2ludCA9ICdodHRwczovL2FwaS1hcGMuY29nbml0aXZlLm1pY3Jvc29mdHRyYW5zbGF0b3IuY29tJ1xuICBjb25zdCB7IGZyb20gPSAnZW4nLCB0bywgc2VjcmV0S2V5LCBsb2NhdGlvbiB9ID0gY29uZmlnXG5cblx0Ly8gQWRkIHlvdXIgbG9jYXRpb24sIGFsc28ga25vd24gYXMgcmVnaW9uLiBUaGUgZGVmYXVsdCBpcyBnbG9iYWwuXG5cdC8vIFRoaXMgaXMgcmVxdWlyZWQgaWYgdXNpbmcgYSBDb2duaXRpdmUgU2VydmljZXMgcmVzb3VyY2UuXG4gIC8vIFRPRE86IHJlcGxhY2Ugd2l0aCBgcmVxdWVzdFVybGAgbWV0aG9kXG5cdGF4aW9zKHtcblx0XHR1cmw6IGAke2VuZHBvaW50fS90cmFuc2xhdGU/YXBpLXZlcnNpb249My4wJmZyb209JHtmcm9tfSZ0bz0ke3RvfSZpbmNsdWRlQWxpZ25tZW50PXRydWUmdGV4dFR5cGU9aHRtbGAsXG5cdFx0bWV0aG9kOiAncG9zdCcsXG5cdFx0aGVhZGVyczoge1xuXHRcdFx0J09jcC1BcGltLVN1YnNjcmlwdGlvbi1LZXknOiBzZWNyZXRLZXksXG5cdFx0XHQnT2NwLUFwaW0tU3Vic2NyaXB0aW9uLVJlZ2lvbic6IGxvY2F0aW9uLFxuXHRcdFx0J0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcblx0XHRcdCdYLUNsaWVudFRyYWNlSWQnOiB1dWlkdjQoKS50b1N0cmluZygpXG5cdFx0fSxcbiAgICBkYXRhOiBbeyB0ZXh0OiBxIH1dLFxuXHRcdHJlc3BvbnNlVHlwZTogJ2pzb24nXG5cdH0pLnRoZW4oKCB7IGRhdGEgfSApID0+IHtcblx0XHRjb25zdCByZXMgPSAoZGF0YSB8fCBbXSkucmVkdWNlKChzdHI6IHN0cmluZywgaXRlbTogTWljcm9zb2Z0VHJhbnNsYXRpb25zKSA9PiB7XG5cdFx0XHRjb25zdCB7IHRyYW5zbGF0aW9ucyA9IFtdIH0gPSBpdGVtXG5cdFx0XHRyZXR1cm4gc3RyICsgdHJhbnNsYXRpb25zLm1hcCgoeyB0ZXh0IH0pID0+IHRleHQpLmpvaW4oJywgJylcblx0XHR9LCAnJylcbiAgICBjYihyZXMpXG5cdH0pLmNhdGNoKChlKSA9PiB7XG4gICAgbm90aWNlSGFuZGxlcignTmV0d29yayBFcnJvciEnKVxuICB9KVxufVxuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVCYWlkdVRyYW5zbGF0ZShxOiBzdHJpbmcsIGNvbmZpZzoge1xuICBhcHBJZDogc3RyaW5nLFxuXHRzZWNyZXRLZXk6IHN0cmluZyxcbiAgZnJvbT86IHN0cmluZyxcblx0dG86IHN0cmluZ1xufSwgY2I6IFRyYW5zbGF0ZUNhbGxiYWNrKSB7XG4gIGNvbnN0IHsgdG8sIGZyb20sIGFwcElkLCBzZWNyZXRLZXkgfSA9IGNvbmZpZ1xuICBjb25zdCBzYWx0ID0gKG5ldyBEYXRlKS5nZXRUaW1lKCk7XG4gIC8vIFx1NTkxQVx1NEUyQXF1ZXJ5XHU1M0VGXHU0RUU1XHU3NTI4XFxuXHU4RkRFXHU2M0E1ICBcdTU5ODIgcXVlcnk9J2FwcGxlXFxub3JhbmdlXFxuYmFuYW5hXFxucGVhcidcbiAgY29uc3Qgc2lnbiA9IE1ENShgJHthcHBJZH0ke3F9JHtzYWx0fSR7c2VjcmV0S2V5fWApO1xuICBnZXRSZXF1ZXN0KGBodHRwOi8vYXBpLmZhbnlpLmJhaWR1LmNvbS9hcGkvdHJhbnMvdmlwL3RyYW5zbGF0ZT9xPSR7cX0mZnJvbT0ke2Zyb20gfHwgJ2VuJ30mdG89JHt0byB8fCAnemgnfSZhcHBpZD0ke2FwcElkfSZzYWx0PSR7c2FsdH0mc2lnbj0ke3NpZ259YCwgY2IpXG59XG5cbmZ1bmN0aW9uIGhhbmRsZUF1ZGlvICh1cmw6IHN0cmluZywgY2I6IGFueSkge1xuXHRyZXF1ZXN0VXJsKHsgbWV0aG9kOiAncG9zdCcsIHVybCB9KS50aGVuKChyZXM6IGFueSkgPT4ge1xuXHRcdGNiKHJlcylcblx0fSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yOiB7IG1lc3NhZ2U6IHN0cmluZyB9KSB7XG5cdFx0bm90aWNlSGFuZGxlcihlcnJvci5tZXNzYWdlIHx8ICdObyByZXN1bHRzIScpXG5cdH0pXG59XG5cbi8vIGxhbmd1YWdlIG9wdGlvbnMgZGVmaW5hdGlvblxuY29uc3QgTEFOR1VBR0VTOiBMYW5ndWFnZU9wdGlvbnMgPSB7XG5cdC8vIFx1ODFFQVx1NTJBODogJ2F1dG8nLFxuXHRcdTdCODBcdTRGNTNcdTRFMkRcdTY1ODc6ICd6aC1DSFMnLFxuXHRcdTdFNDFcdTRGNTNcdTRFMkRcdTY1ODc6ICd6aC1DSFQnLFxuXHRcdTgyRjFcdTY1ODc6ICdlbicsXG5cdFx1NjVFNVx1NjU4NzogJ2phJyxcblx0XHU5N0U5XHU2NTg3OiAna28nLFxuXHRcdTZDRDVcdTY1ODc6ICdmcicsXG5cdFx1ODk3Rlx1NzNFRFx1NzI1OVx1NjU4NzogJ2VzJyxcblx0XHU4NDYxXHU4NDA0XHU3MjU5XHU2NTg3OiAncHQnLFxuXHRcdTYxMEZcdTU5MjdcdTUyMjlcdTY1ODc6ICdpdCcsXG5cdFx1NEZDNFx1NjU4NzogJ3J1Jyxcblx0XHU4RDhBXHU1MzU3XHU2NTg3OiAndmknLFxuXHRcdTVGQjdcdTY1ODc6ICdkZScsXG5cdFx1OTYzRlx1NjJDOVx1NEYyRlx1NjU4NzogJ2FyJyxcblx0XHU1MzcwXHU1QzNDXHU2NTg3OiAnaWQnLFxuXHRcdTUzNTdcdTk3NUVcdTgzNzdcdTUxNzBcdThCRUQ6ICdhZicsXG5cdFx1NkNFMlx1NjVBRlx1NUMzQ1x1NEU5QVx1OEJFRDogJ2JzJyxcblx0XHU0RkREXHU1MkEwXHU1MjI5XHU0RTlBXHU4QkVEOiAnYmcnLFxuXHRcdTRFMkRcdTY1ODdcdTdDQTRcdThCRUQ6ICd5dWUnLFxuXHRcdTUyQTBcdTZDRjBcdTk2ODZcdThCRUQ6ICdjYScsXG5cdFx1NTE0Qlx1N0Y1N1x1NTczMFx1NEU5QVx1OEJFRDogJ2hyJyxcblx0XHU2Mzc3XHU1MTRCXHU4QkVEOiAnY3MnLFxuXHRcdTRFMzlcdTlFQTZcdThCRUQ6ICdkYScsXG5cdFx1ODM3N1x1NTE3MFx1OEJFRDogJ25sJyxcblx0XHU3MjMxXHU2Qzk5XHU1QzNDXHU0RTlBXHU4QkVEOiAnZXQnLFxuXHRcdTY1OTBcdTZENEVcdThCRUQ6ICdmaicsXG5cdFx1ODJBQ1x1NTE3MFx1OEJFRDogJ2ZpJyxcblx0XHU1RTBDXHU4MTRBXHU4QkVEOiAnZWwnLFxuXHRcdTZENzdcdTU3MzBcdTUxNEJcdTkxQ0NcdTU5NjVcdTVDMTRcdThCRUQ6ICdodCcsXG5cdFx1NUUwQ1x1NEYyRlx1Njc2NVx1OEJFRDogJ2hlJyxcblx0XHU1MzcwXHU1NzMwXHU4QkVEOiAnaGknLFxuXHRcdTc2N0RcdTgyRDdcdThCRUQ6ICdtd3cnLFxuXHRcdTUzMDhcdTcyNTlcdTUyMjlcdThCRUQ6ICdodScsXG5cdFx1NjVBRlx1NzRFNlx1NUUwQ1x1OTFDQ1x1OEJFRDogJ3N3Jyxcblx0XHU1MTRCXHU2Nzk3XHU4RDIxXHU4QkVEOiAndGxoJyxcblx0XHU2MkM5XHU4MTMxXHU3RUY0XHU0RTlBXHU4QkVEOiAnbHYnLFxuXHRcdTdBQ0JcdTk2NzZcdTVCOUJcdThCRUQ6ICdsdCcsXG5cdFx1OUE2Q1x1Njc2NVx1OEJFRDogJ21zJyxcblx0XHU5QTZDXHU4MDMzXHU0RUQ2XHU4QkVEOiAnbXQnLFxuXHRcdTYzMkFcdTVBMDFcdThCRUQ6ICdubycsXG5cdFx1NkNFMlx1NjVBRlx1OEJFRDogJ2ZhJyxcblx0XHU2Q0UyXHU1MTcwXHU4QkVEOiAncGwnLFxuXHRcdTUxNEJcdTk2RjdcdTU4NTRcdTdGNTdcdTU5NjVcdTYyNThcdTdDNzNcdThCRUQ6ICdvdHEnLFxuXHRcdTdGNTdcdTlBNkNcdTVDM0NcdTRFOUFcdThCRUQ6ICdybycsXG5cdCdcdTU4NUVcdTVDMTRcdTdFRjRcdTRFOUFcdThCRUQoXHU4OTdGXHU5MUNDXHU1QzE0XHU2NTg3KSc6ICdzci1DeXJsJyxcblx0J1x1NTg1RVx1NUMxNFx1N0VGNFx1NEU5QVx1OEJFRChcdTYyQzlcdTRFMDFcdTY1ODcpJzogJ3NyLUxhdG4nLFxuXHRcdTY1QUZcdTZEMUJcdTRGMTBcdTUxNEJcdThCRUQ6ICdzaycsXG5cdFx1NjVBRlx1NkQxQlx1NjU4N1x1NUMzQ1x1NEU5QVx1OEJFRDogJ3NsJyxcblx0XHU3NDVFXHU1MTc4XHU4QkVEOiAnc3YnLFxuXHRcdTU4NTRcdTVFMENcdTYzRDBcdThCRUQ6ICd0eScsXG5cdFx1NkNGMFx1OEJFRDogJ3RoJyxcblx0XHU2QzY0XHU1MkEwXHU4QkVEOiAndG8nLFxuXHRcdTU3MUZcdTgwMzNcdTUxNzZcdThCRUQ6ICd0cicsXG5cdFx1NEU0Q1x1NTE0Qlx1NTE3MFx1OEJFRDogJ3VrJyxcblx0XHU0RTRDXHU1QzE0XHU5MEZEXHU4QkVEOiAndXInLFxuXHRcdTVBMDFcdTVDMTRcdTU4RUJcdThCRUQ6ICdjeScsXG5cdFx1NUMyNFx1NTM2MVx1NTc2Nlx1NzM5Qlx1OTZDNVx1OEJFRDogJ3l1YScsXG5cdFx1OTYzRlx1NUMxNFx1NURGNFx1NUMzQ1x1NEU5QVx1OEJFRDogJ3NxJyxcblx0XHU5NjNGXHU1OUM2XHU1NEM4XHU2MkM5XHU4QkVEOiAnYW0nLFxuXHRcdTRFOUFcdTdGOEVcdTVDM0NcdTRFOUFcdThCRUQ6ICdoeScsXG5cdFx1OTYzRlx1NTg1RVx1NjJEQ1x1NzU4Nlx1OEJFRDogJ2F6Jyxcblx0XHU1QjVGXHU1MkEwXHU2MkM5XHU4QkVEOiAnYm4nLFxuXHRcdTVERjRcdTY1QUZcdTUxNEJcdThCRUQ6ICdldScsXG5cdFx1NzY3RFx1NEZDNFx1N0Y1N1x1NjVBRlx1OEJFRDogJ2JlJyxcblx0XHU1QkJGXHU1MkExXHU4QkVEOiAnY2ViJyxcblx0XHU3OUQxXHU4OTdGXHU1NjA5XHU4QkVEOiAnY28nLFxuXHRcdTRFMTZcdTc1NENcdThCRUQ6ICdlbycsXG5cdFx1ODNGMlx1NUY4Qlx1NUJCRVx1OEJFRDogJ3RsJyxcblx0XHU1RjE3XHU5MUNDXHU4OTdGXHU4QkVEOiAnZnknLFxuXHRcdTUyQTBcdTUyMjlcdTg5N0ZcdTRFOUFcdThCRUQ6ICdnbCcsXG5cdFx1NjgzQ1x1OUM4MVx1NTQwOVx1NEU5QVx1OEJFRDogJ2thJyxcblx0XHU1M0U0XHU1NDA5XHU2MkM5XHU3Mjc5XHU4QkVEOiAnZ3UnLFxuXHRcdThDNkFcdTg0MjhcdThCRUQ6ICdoYScsXG5cdFx1NTkwRlx1NUEwMVx1NTkzN1x1OEJFRDogJ2hhdycsXG5cdFx1NTFCMFx1NUM5Qlx1OEJFRDogJ2lzJyxcblx0XHU0RjBBXHU1MzVBXHU4QkVEOiAnaWcnLFxuXHRcdTcyMzFcdTVDMTRcdTUxNzBcdThCRUQ6ICdnYScsXG5cdFx1NzIyQVx1NTRDN1x1OEJFRDogJ2p3Jyxcblx0XHU1MzYxXHU3RUIzXHU4RkJFXHU4QkVEOiAna24nLFxuXHRcdTU0QzhcdTg0MjhcdTUxNEJcdThCRUQ6ICdraycsXG5cdFx1OUFEOFx1NjhDOVx1OEJFRDogJ2ttJyxcblx0XHU1RTkzXHU1QzE0XHU1RkI3XHU4QkVEOiAna3UnLFxuXHRcdTY3RUZcdTVDMTRcdTUxNEJcdTVCNUNcdThCRUQ6ICdreScsXG5cdFx1ODAwMVx1NjMxRFx1OEJFRDogJ2xvJyxcblx0XHU2MkM5XHU0RTAxXHU4QkVEOiAnbGEnLFxuXHRcdTUzNjJcdTY4RUVcdTU4MjFcdThCRUQ6ICdsYicsXG5cdFx1OUE2Q1x1NTE3Nlx1OTg3Rlx1OEJFRDogJ21rJyxcblx0XHU5QTZDXHU1QzE0XHU1MkEwXHU0RUMwXHU4QkVEOiAnbWcnLFxuXHRcdTlBNkNcdTYyQzlcdTk2QzVcdTYyQzlcdTU5QzZcdThCRUQ6ICdtbCcsXG5cdFx1NkJEQlx1NTIyOVx1OEJFRDogJ21pJyxcblx0XHU5QTZDXHU2MkM5XHU1NzMwXHU4QkVEOiAnbXInLFxuXHRcdTg0OTlcdTUzRTRcdThCRUQ6ICdtbicsXG5cdFx1N0YwNVx1NzUzOFx1OEJFRDogJ215Jyxcblx0XHU1QzNDXHU2Q0NBXHU1QzE0XHU4QkVEOiAnbmUnLFxuXHRcdTlGNTBcdTUyMDdcdTc0RTZcdThCRUQ6ICdueScsXG5cdFx1NjY2RVx1NEVDMFx1NTZGRVx1OEJFRDogJ3BzJyxcblx0XHU2NUMxXHU5MDZFXHU2NjZFXHU4QkVEOiAncGEnLFxuXHRcdTg0MjhcdTY0NjlcdTRFOUFcdThCRUQ6ICdzbScsXG5cdFx1ODJDRlx1NjgzQ1x1NTE3MFx1NzZENlx1NUMxNFx1OEJFRDogJ2dkJyxcblx0XHU1ODVFXHU3RDIyXHU2MjU4XHU4QkVEOiAnc3QnLFxuXHRcdTRGRUVcdTdFQjNcdThCRUQ6ICdzbicsXG5cdFx1NEZFMVx1NUZCN1x1OEJFRDogJ3NkJyxcblx0XHU1MEU3XHU0RjNEXHU3RjU3XHU4QkVEOiAnc2knLFxuXHRcdTdEMjJcdTlBNkNcdTkxQ0NcdThCRUQ6ICdzbycsXG5cdFx1NURGRFx1NEVENlx1OEJFRDogJ3N1Jyxcblx0XHU1ODU0XHU1NDA5XHU1MTRCXHU4QkVEOiAndGcnLFxuXHRcdTZDRjBcdTdDNzNcdTVDMTRcdThCRUQ6ICd0YScsXG5cdFx1NkNGMFx1NTM2Mlx1NTZGQVx1OEJFRDogJ3RlJyxcblx0XHU0RTRDXHU1MTc5XHU1MjJCXHU1MTRCXHU4QkVEOiAndXonLFxuXHRcdTUzNTdcdTk3NUVcdTc5RDFcdTg0MjhcdThCRUQ6ICd4aCcsXG5cdFx1NjEwRlx1N0IyQ1x1N0VFQVx1OEJFRDogJ3lpJyxcblx0XHU3RUE2XHU5QzgxXHU1REY0XHU4QkVEOiAneW8nLFxuXHRcdTUzNTdcdTk3NUVcdTc5NTZcdTlDODFcdThCRUQ6ICd6dScsXG5cdFx1ODFFQVx1NTJBOFx1OEJDNlx1NTIyQjogJ2F1dG8nXG59XG5cbi8vIE1pY3Jvc29mdCBsYW5ndWFnZXNcbmNvbnN0IE1JQ1JPU09GVF9MQU5HVUFHRVM6IExhbmd1YWdlT3B0aW9ucyA9IHtcblx0J1x1NTM1N1x1OTc1RVx1ODM3N1x1NTE3MFx1OEJFRCc6ICdhZicsXG5cdCdcdTk2M0ZcdTVDMTRcdTVERjRcdTVDM0NcdTRFOUFcdThCRUQnOiAnc3EnLFxuXHQnXHU5NjNGXHU1OUM2XHU1NEM4XHU2MkM5XHU4QkVEJzogJ2FtJyxcblx0J1x1OTYzRlx1NjJDOVx1NEYyRlx1OEJFRCc6ICdhcicsXG5cdCdcdTRFOUFcdTdGOEVcdTVDM0NcdTRFOUFcdThCRUQnOiAnaHknLFxuXHQnXHU5NjNGXHU4NDI4XHU1OUM2XHU4QkVEJzogJ2FzJyxcblx0J1x1OTYzRlx1NTg1RVx1NjJEQ1x1NzU4Nlx1OEJFRChcdTYyQzlcdTRFMDFcdThCRUQpJzogJ2F6Jyxcblx0J0JhbmdsYSc6ICdibicsXG5cdCdcdTVERjRcdTRFQzBcdTU3RkFcdTVDMTRcdThCRUQnOiAnYmEnLFxuXHQnXHU1REY0XHU2NUFGXHU1MTRCXHU4QkVEJzogJ2V1Jyxcblx0J1x1NkNFMlx1NjVBRlx1NUMzQ1x1NEU5QVx1OEJFRChcdTYyQzlcdTRFMDFcdThCRURcdTdDRkIpJzogJ2JzJyxcblx0J1x1NEZERFx1NTJBMFx1NTIyOVx1NEU5QVx1OEJFRCc6ICdiZycsXG5cdCdcdTRFMkRcdTY1ODdcdTdDQTRcdThCRUQnOiAneXVlJyxcblx0J1x1NTJBMFx1NkNGMFx1N0Y1N1x1NUMzQ1x1NEU5QVx1OEJFRCc6ICdjYScsXG5cdCdcdTRFMkRcdTY1ODdcdTY1ODdcdTVCNjYnOiAnbHpoJyxcblx0J1x1N0I4MFx1NEY1M1x1NEUyRFx1NjU4Nyc6ICd6aC1IYW5zJyxcblx0J1x1N0U0MVx1NEY1M1x1NEUyRFx1NjU4Nyc6ICd6aC1IYW50Jyxcblx0J1x1NTE0Qlx1N0Y1N1x1NTczMFx1NEU5QVx1OEJFRCc6ICdocicsXG5cdCdcdTYzNzdcdTUxNEJcdThCRUQnOiAnY3MnLFxuXHQnXHU0RTM5XHU5RUE2XHU4QkVEJzogJ2RhJyxcblx0J1x1OEZCRVx1OTFDQ1x1OEJFRCc6ICdwcnMnLFxuXHQnXHU5QTZDXHU1QzE0XHU0RUUzXHU1OTJCXHU4QkVEJzogJ2R2Jyxcblx0J1x1ODM3N1x1NTE3MFx1OEJFRCc6ICdubCcsXG5cdCdcdTgyRjFcdThCRUQnOiAnZW4nLFxuXHQnXHU3MjMxXHU2Qzk5XHU1QzNDXHU0RTlBXHU4QkVEJzogJ2V0Jyxcblx0J1x1NkNENVx1N0Y1N1x1OEJFRCc6ICdmbycsXG5cdCdcdTY1OTBcdTZENEVcdThCRUQnOiAnZmonLFxuXHQnXHU4M0YyXHU1RjhCXHU1QkJFXHU4QkVEJzogJ2ZpbCcsXG5cdCdcdTgyQUNcdTUxNzBcdThCRUQnOiAnZmknLFxuXHQnXHU2Q0Q1XHU4QkVEJzogJ2ZyJyxcblx0J1x1NkNENVx1OEJFRFx1RkYwOFx1NTJBMFx1NjJGRlx1NTkyN1x1RkYwOSc6ICdmci1jYScsXG5cdCdcdTUyQTBcdTUyMjlcdTg5N0ZcdTRFOUFcdThCRUQnOiAnZ2wnLFxuXHQnXHU2ODNDXHU5QzgxXHU1NDA5XHU0RTlBXHU4QkVEJzogJ2thJyxcblx0J1x1NUZCN1x1OEJFRCc6ICdkZScsXG5cdCdcdTVFMENcdTgxNEFcdThCRUQnOiAnZWwnLFxuXHQnXHU1M0U0XHU1NDA5XHU2MkM5XHU3Mjc5XHU4QkVEJzogJ2d1Jyxcblx0J1x1NkQ3N1x1NTczMFx1NTE0Qlx1OTFDQ1x1NTk2NVx1NUMxNFx1OEJFRCc6ICdodCcsXG5cdCdcdTVFMENcdTRGMkZcdTY3NjVcdThCRUQnOiAnaGUnLFxuXHQnSGluZGknOiAnaGknLFxuXHQnXHU3NjdEXHU4MkQ3XHU4QkVEXHVGRjA4XHU2MkM5XHU0RTAxXHU4QkVEXHVGRjA5JzogJ213dycsXG5cdCdcdTUzMDhcdTcyNTlcdTUyMjlcdThCRUQnOiAnaHUnLFxuXHQnXHU1MUIwXHU1QzlCXHU4QkVEJzogJ2lzJyxcblx0J1x1NTM3MFx1NUVBNlx1NUMzQ1x1ODk3Rlx1NEU5QVx1OEJFRCc6ICdpZCcsXG5cdCdcdTU2RTBcdTdFQkRcdTdFQjNcdTY1NjZcdThCRUQnOiAnaWt0Jyxcblx0J1x1NTZFMFx1N0VCRFx1NzI3OVx1OEJFRCc6ICdpdScsXG5cdCdcdTU2RTBcdTdFQkRcdTcyNzlcdThCRUQoXHU2MkM5XHU0RTAxXHU4QkVEKSc6ICdpdS1MYXRuJyxcblx0J1x1NzIzMVx1NUMxNFx1NTE3MFx1OEJFRCc6ICdnYScsXG5cdCdcdTYxMEZcdTU5MjdcdTUyMjlcdThCRUQnOiAnaXQnLFxuXHQnXHU2NUU1XHU4QkVEJzogJ2phJyxcblx0J1x1NTM2MVx1N0VCM1x1OEZCRVx1OEJFRCc6ICdrbicsXG5cdCdcdTU0QzhcdTg0MjhcdTUxNEJcdThCRUQnOiAna2snLFxuXHQnXHU5QUQ4XHU2OEM5XHU4QkVEJzogJ2ttJyxcblx0J1x1NTE0Qlx1Njc5N1x1OEQyMVx1OEJFRCc6ICd0bGgtTGF0bicsXG5cdCdcdTUxNEJcdTY3OTdcdThEMjFcdThCRUQocGxxYUQpJzogJ3RsaC1QaXFkJyxcblx0J1x1OTdFOVx1OEJFRCc6ICdrbycsXG5cdCdcdTVFOTNcdTVDMTRcdTVGQjdcdThCRUQoXHU0RTJEXHU5MEU4KSc6ICdrdScsXG5cdCdcdTVFOTNcdTVDMTRcdTVGQjdcdThCRUQoXHU1MzE3XHU5MEU4KSc6ICdrbXInLFxuXHQnXHU1NDA5XHU1QzE0XHU1NDA5XHU2NUFGXHU4QkVEKFx1ODk3Rlx1OTFDQ1x1NUMxNFx1OEJFRCknOiAna3knLFxuXHQnXHU4MDAxXHU2MzFEXHU4QkVEJzogJ2xvJyxcblx0J1x1NjJDOVx1ODEzMVx1N0VGNFx1NEU5QVx1OEJFRCc6ICdsdicsXG5cdCdcdTdBQ0JcdTk2NzZcdTVCOUJcdThCRUQnOiAnbHQnLFxuXHQnXHU5QTZDXHU1MTc2XHU5ODdGXHU4QkVEJzogJ21rJyxcblx0J1x1OUE2Q1x1OEZCRVx1NTJBMFx1NjVBRlx1NTJBMFx1OEJFRCc6ICdtZycsXG5cdCdcdTlBNkNcdTY3NjVcdThCRUQoXHU2MkM5XHU0RTAxXHU4QkVEXHU3Q0ZCKSc6ICdtcycsXG5cdCdcdTlBNkNcdTYyQzlcdTk2QzVcdTYyQzlcdTU5QzZcdThCRUQnOiAnbWwnLFxuXHQnXHU5QTZDXHU4MDMzXHU0RUQ2XHU4QkVEJzogJ210Jyxcblx0J1x1NkJEQlx1NTIyOVx1OEJFRCc6ICdtaScsXG5cdCdcdTlBNkNcdTYyQzlcdTU3MzBcdThCRUQnOiAnbXInLFxuXHQnXHU4NDk5XHU1M0U0XHU4QkVEKFx1ODk3Rlx1OTFDQ1x1NUMxNFx1NjU4NyknOiAnbW4tQ3lybCcsXG5cdCdcdTg0OTlcdTUzRTRcdThCRUQoXHU0RjIwXHU3RURGKSc6ICdtbi1Nb25nJyxcblx0J1x1N0YwNVx1NzUzOCc6ICdteScsXG5cdCdcdTVDM0NcdTZDQ0FcdTVDMTRcdThCRUQnOiAnbmUnLFxuXHQnXHU2MzJBXHU1QTAxXHU4QkVEJzogJ25iJyxcblx0J1x1NTk2NVx1OTFDQ1x1NEU5QVx1OEJFRCc6ICdvcicsXG5cdCdcdTY2NkVcdTRFQzBcdTU2RkVcdThCRUQnOiAncHMnLFxuXHQnXHU2Q0UyXHU2NUFGXHU4QkVEJzogJ2ZhJyxcblx0J1x1NkNFMlx1NTE3MFx1OEJFRCc6ICdwbCcsXG5cdCdcdTg0NjFcdTg0MDRcdTcyNTlcdThCRURcdUZGMDhcdTVERjRcdTg5N0ZcdUZGMDknOiAncHQnLFxuXHQnXHU4NDYxXHU4NDA0XHU3MjU5XHU4QkVEKFx1ODQ2MVx1ODQwNFx1NzI1OSknOiAncHQtcHQnLFxuXHQnXHU2NUMxXHU5MDZFXHU2NjZFXHU4QkVEJzogJ3BhJyxcblx0J1x1NTE0Qlx1OTZGN1x1NTg1NFx1N0Y1N1x1NTk2NVx1NjI1OFx1N0M3M1x1OEJFRCc6ICdvdHEnLFxuXHQnXHU3RjU3XHU5QTZDXHU1QzNDXHU0RTlBXHU4QkVEJzogJ3JvJyxcblx0J1x1NEZDNFx1OEJFRCc6ICdydScsXG5cdCdcdTg0MjhcdTY0NjlcdTRFOUFcdThCRUQoXHU2MkM5XHU0RTAxXHU4QkVEKSc6ICdzbScsXG5cdCdcdTU4NUVcdTVDMTRcdTdFRjRcdTRFOUFcdThCRURcdUZGMDhcdTg5N0ZcdTkxQ0NcdTVDMTRcdUZGMDknOiAnc3ItQ3lybCcsXG5cdCdcdTU4NUVcdTVDMTRcdTdFRjRcdTRFOUFcdThCRURcdUZGMDhcdTYyQzlcdTRFMDFcdUZGMDknOiAnc3ItTGF0bicsXG5cdCdcdTY1QUZcdTZEMUJcdTRGMTBcdTUxNEJcdThCRUQnOiAnc2snLFxuXHQnXHU2NUFGXHU2RDFCXHU2NTg3XHU1QzNDXHU0RTlBXHU4QkVEJzogJ3NsJyxcblx0J1x1N0QyMlx1OUE2Q1x1OTFDQ1x1OEJFRFx1RkYwOFx1OTYzRlx1NjJDOVx1NEYyRlx1OEJFRFx1RkYwOSc6ICdzbycsXG5cdCdcdTg5N0ZcdTczRURcdTcyNTlcdThCRUQnOiAnZXMnLFxuXHQnXHU2NUFGXHU3NEU2XHU1RTBDXHU5MUNDXHU4QkVEXHVGRjA4XHU2MkM5XHU0RTAxXHU4QkVEXHVGRjA5JzogJ3N3Jyxcblx0J1x1NzQ1RVx1NTE3OFx1OEJFRCc6ICdzdicsXG5cdCdcdTU4NTRcdTVFMENcdTYzRDBcdThCRUQnOiAndHknLFxuXHQnXHU2Q0YwXHU3QzczXHU1QzE0XHU4QkVEJzogJ3RhJyxcblx0J1x1OTc5MVx1OTc3Q1x1OEJFRFx1RkYwOFx1NjJDOVx1NEUwMVx1OEJFRFx1RkYwOSc6ICd0dCcsXG5cdCdcdTZDRjBcdTUzNjJcdTU2RkFcdThCRUQnOiAndGUnLFxuXHQnXHU2Q0YwXHU4QkVEJzogJ3RoJyxcblx0J1x1ODVDRlx1OEJFRCc6ICdibycsXG5cdCdcdTYzRDBcdTY4M0NcdTkxQ0NcdTVDM0NcdTRFOUFcdThCRUQnOiAndGknLFxuXHQnXHU2QzY0XHU1MkEwXHU4QkVEJzogJ3RvJyxcblx0J1x1NTcxRlx1ODAzM1x1NTE3Nlx1OEJFRCc6ICd0cicsXG5cdCdcdTU3MUZcdTVFOTNcdTY2RkNcdThCRUQoXHU2MkM5XHU0RTAxXHU4QkVEKSc6ICd0aycsXG5cdCdcdTRFNENcdTUxNEJcdTUxNzBcdThCRUQnOiAndWsnLFxuXHQnXHU0RTBBXHU3RDIyXHU1RTAzXHU4QkVEJzogJ2hzYicsXG5cdCdcdTRFNENcdTVDMTRcdTkwRkRcdThCRUQnOiAndXInLFxuXHQnXHU3RUY0XHU1NDNFXHU1QzE0XHU4QkVEXHVGRjA4XHU5NjNGXHU2MkM5XHU0RjJGXHU4QkVEXHVGRjA5JzogJ3VnJyxcblx0J1x1NEU0Q1x1NTE3OVx1NTIyQlx1NTE0Qlx1OEJFRChcdTYyQzlcdTRFMDFcdThCRUQpJzogJ3V6Jyxcblx0J1x1OEQ4QVx1NTM1N1x1OEJFRCc6ICd2aScsXG5cdCdcdTVBMDFcdTVDMTRcdTU4RUJcdThCRUQnOiAnY3knLFxuXHQnXHU1QzI0XHU1MzYxXHU1NzY2XHU3MzlCXHU5NkM1XHU4QkVEJzogJ3l1YScsXG5cdCdcdTc5NTZcdTlDODFcdThCRUQnOiAnenUnLFxufVxuXG4vLyBCYWlkdSBsYW5ndWFnZXNcbmNvbnN0IEJBSURVX0xBTkdVQUdFUzogTGFuZ3VhZ2VPcHRpb25zID0ge1xuICBcdTk2M0ZcdTYyQzlcdTRGMkZcdThCRUQ6ICdhcmEnLFxuICBcdTcyMzFcdTVDMTRcdTUxNzBcdThCRUQ6ICdnbGUnLFxuICBcdTU5NjVcdTUxNEJcdThCRUQ6ICdvY2knLFxuICBcdTk2M0ZcdTVDMTRcdTVERjRcdTVDM0NcdTRFOUFcdThCRUQ6ICdhbGInLFxuICBcdTk2M0ZcdTVDMTRcdTUzQ0FcdTUyMjlcdTRFOUFcdTk2M0ZcdTYyQzlcdTRGMkZcdThCRUQ6ICdhcnEnLFxuICBcdTk2M0ZcdTgwQUZcdThCRUQ6ICdha2EnLFxuICBcdTk2M0ZcdTYyQzlcdThEMjFcdThCRUQ6ICdhcmcnLFxuICBcdTk2M0ZcdTU5QzZcdTU0QzhcdTYyQzlcdThCRUQ6ICdhbWgnLFxuICBcdTk2M0ZcdTg0MjhcdTU5QzZcdThCRUQ6ICdhc20nLFxuICBcdTgyN0VcdTlBNkNcdTYyQzlcdThCRUQ6ICdheW0nLFxuICBcdTk2M0ZcdTU4NUVcdTYyRENcdTc1ODZcdThCRUQ6ICdhemUnLFxuICBcdTk2M0ZcdTY1QUZcdTU2RkVcdTkxQ0NcdTRFOUFcdTY1QUZcdThCRUQ6ICdhc3QnLFxuICBcdTU5NjVcdTU4NUVcdTY4QUZcdThCRUQ6ICdvc3MnLFxuICBcdTcyMzFcdTZDOTlcdTVDM0NcdTRFOUFcdThCRUQ6ICdlc3QnLFxuICBcdTU5NjVcdTY3NzBcdTVFMDNcdTc0RTZcdThCRUQ6ICdvamknLFxuICBcdTU5NjVcdTkxQ0NcdTRFOUFcdThCRUQ6ICdvcmknLFxuICBcdTU5NjVcdTdGNTdcdTgzQUJcdThCRUQ6ICdvcm0nLFxuICBcdTZDRTJcdTUxNzBcdThCRUQ6ICdwbCcsXG4gIFx1NkNFMlx1NjVBRlx1OEJFRDogJ3BlcicsXG4gIFx1NUUwM1x1NTIxN1x1NTg1NFx1NUMzQ1x1OEJFRDogJ2JyZScsXG4gIFx1NURGNFx1NEVDMFx1NTdGQVx1NUMxNFx1OEJFRDogJ2JhaycsXG4gIFx1NURGNFx1NjVBRlx1NTE0Qlx1OEJFRDogJ2JhcScsXG4gIFx1NURGNFx1ODk3Rlx1ODQ2MVx1ODQwNFx1NzI1OVx1OEJFRDogJ3BvdCcsXG4gIFx1NzY3RFx1NEZDNFx1N0Y1N1x1NjVBRlx1OEJFRDogJ2JlbCcsXG4gIFx1NjdDRlx1NjdDRlx1NUMxNFx1OEJFRDogJ2JlcicsXG4gIFx1OTBBNlx1Njc3Rlx1NzI1OVx1OEJFRDogJ3BhbScsXG4gIFx1NEZERFx1NTJBMFx1NTIyOVx1NEU5QVx1OEJFRDogJ2J1bCcsXG4gIFx1NTMxN1x1NjVCOVx1ODQyOFx1N0M3M1x1OEJFRDogJ3NtZScsXG4gIFx1NTMxN1x1N0QyMlx1NjI1OFx1OEJFRDogJ3BlZCcsXG4gIFx1NjcyQ1x1NURGNFx1OEJFRDogJ2JlbScsXG4gIFx1NkJENFx1Njc5N1x1OEJFRDogJ2JsaScsXG4gIFx1NkJENFx1NjVBRlx1NjJDOVx1OUE2Q1x1OEJFRDogJ2JpcycsXG4gIFx1NEZGRVx1OERFRlx1NjUyRlx1OEJFRDogJ2JhbCcsXG4gIFx1NTFCMFx1NUM5Qlx1OEJFRDogJ2ljZScsXG4gIFx1NkNFMlx1NjVBRlx1NUMzQ1x1NEU5QVx1OEJFRDogJ2JvcycsXG4gIFx1NTM1QVx1Njc3MFx1NjY2RVx1NUMxNFx1OEJFRDogJ2JobycsXG4gIFx1Njk1QVx1NzRFNlx1NEVDMFx1OEJFRDogJ2NodicsXG4gIFx1ODA2QVx1NTJBMFx1OEJFRDogJ3RzbycsXG4gIFx1NEUzOVx1OUVBNlx1OEJFRDogJ2RhbicsXG4gIFx1NUZCN1x1OEJFRDogJ2RlJyxcbiAgXHU5NzkxXHU5NzdDXHU4QkVEOiAndGF0JyxcbiAgXHU2M0I4XHU4QkVEOiAnc2hhJyxcbiAgXHU1RkI3XHU5ODdGXHU4QkVEOiAndGV0JyxcbiAgXHU4RkVBXHU3RUY0XHU1RTBDXHU4QkVEOiAnZGl2JyxcbiAgXHU0RjRFXHU1NzMwXHU1RkI3XHU4QkVEOiAnbG9nJyxcbiAgXHU0RkM0XHU4QkVEOiAncnUnLFxuICBcdTZDRDVcdThCRUQ6ICdmcmEnLFxuICBcdTgzRjJcdTVGOEJcdTVCQkVcdThCRUQ6ICdmaWwnLFxuICBcdTgyQUNcdTUxNzBcdThCRUQ6ICdmaW4nLFxuICBcdTY4QjVcdThCRUQ6ICdzYW4nLFxuICBcdTVGMTdcdTc1NTlcdTUyMjlcdThCRUQ6ICdmcmknLFxuICBcdTVCQ0NcdTYyQzlcdTVDM0NcdThCRUQ6ICdmdWwnLFxuICBcdTZDRDVcdTdGNTdcdThCRUQ6ICdmYW8nLFxuICBcdTc2RDZcdTVDMTRcdThCRUQ6ICdnbGEnLFxuICBcdTUyMUFcdTY3OUNcdThCRUQ6ICdrb24nLFxuICBcdTlBRDhcdTU3MzBcdTdEMjJcdTVFMDNcdThCRUQ6ICd1cHMnLFxuICBcdTlBRDhcdTY4QzlcdThCRUQ6ICdoa20nLFxuICBcdTY4M0NcdTk2NzVcdTUxNzBcdThCRUQ6ICdrYWwnLFxuICBcdTY4M0NcdTlDODFcdTU0MDlcdTRFOUFcdThCRUQ6ICdnZW8nLFxuICBcdTUzRTRcdTU0MDlcdTYyQzlcdTcyNzlcdThCRUQ6ICdndWonLFxuICBcdTUzRTRcdTVFMENcdTgxNEFcdThCRUQ6ICdncmEnLFxuICBcdTUzRTRcdTgyRjFcdThCRUQ6ICdlbm8nLFxuICBcdTc0RENcdTYyQzlcdTVDM0NcdThCRUQ6ICdncm4nLFxuICBcdTk3RTlcdThCRUQ6ICdrb3InLFxuICBcdTgzNzdcdTUxNzBcdThCRUQ6ICdubCcsXG4gIFx1ODBFMVx1NUUxNVx1OEJFRDogJ2h1cCcsXG4gIFx1NTRDOFx1NTM2MVx1OTRBNlx1OEJFRDogJ2hhaycsXG4gIFx1NkQ3N1x1NTczMFx1OEJFRDogJ2h0JyxcbiAgXHU5RUQxXHU1QzcxXHU4QkVEOiAnbW90JyxcbiAgXHU4QzZBXHU4NDI4XHU4QkVEOiAnaGF1JyxcbiAgXHU1NDA5XHU1QzE0XHU1NDA5XHU2NUFGXHU4QkVEOiAna2lyJyxcbiAgXHU1MkEwXHU1MjI5XHU4OTdGXHU0RTlBXHU4QkVEOiAnZ2xnJyxcbiAgXHU1MkEwXHU2MkZGXHU1OTI3XHU2Q0Q1XHU4QkVEOiAnZnJuJyxcbiAgXHU1MkEwXHU2Q0YwXHU3RjU3XHU1QzNDXHU0RTlBXHU4QkVEOiAnY2F0JyxcbiAgXHU2Mzc3XHU1MTRCXHU4QkVEOiAnY3MnLFxuICBcdTUzNjFcdTYyRENcdTVDMTRcdThCRUQ6ICdrYWInLFxuICBcdTUzNjFcdTdFQjNcdThGQkVcdThCRUQ6ICdrYW4nLFxuICBcdTUzNjFcdTUyQUFcdTkxQ0NcdThCRUQ6ICdrYXUnLFxuICBcdTUzNjFcdTgyMTJcdTZCRDRcdThCRUQ6ICdrYWgnLFxuICBcdTVFQjdcdTc0RTZcdTVDMTRcdThCRUQ6ICdjb3InLFxuICBcdTc5RDFcdTg0MjhcdThCRUQ6ICd4aG8nLFxuICBcdTc5RDFcdTg5N0ZcdTU2MDlcdThCRUQ6ICdjb3MnLFxuICBcdTUxNEJcdTkxQ0NcdTUxNEJcdThCRUQ6ICdjcmUnLFxuICBcdTUxNEJcdTkxQ0NcdTdDNzNcdTRFOUFcdTk3OTFcdTk3N0NcdThCRUQ6ICdjcmknLFxuICBcdTUxNEJcdTY3OTdcdThEMjFcdThCRUQ6ICdrbGknLFxuICBcdTUxNEJcdTdGNTdcdTU3MzBcdTRFOUFcdThCRUQ6ICdocnYnLFxuICBcdTUxNEJcdTRFMThcdTRFOUFcdThCRUQ6ICdxdWUnLFxuICBcdTUxNEJcdTRFQzBcdTdDNzNcdTVDMTRcdThCRUQ6ICdrYXMnLFxuICBcdTVCNTRcdTUzNjFcdTVDM0NcdThCRUQ6ICdrb2snLFxuICBcdTVFOTNcdTVDMTRcdTVGQjdcdThCRUQ6ICdrdXInLFxuICBcdTYyQzlcdTRFMDFcdThCRUQ6ICdsYXQnLFxuICBcdTgwMDFcdTYzMURcdThCRUQ6ICdsYW8nLFxuICBcdTdGNTdcdTlBNkNcdTVDM0NcdTRFOUFcdThCRUQ6ICdyb20nLFxuICBcdTYyQzlcdTcyNzlcdTUyQTBcdTgzQjFcdThCRUQ6ICdsYWcnLFxuICBcdTYyQzlcdTgxMzFcdTdFRjRcdTRFOUFcdThCRUQ6ICdsYXYnLFxuICBcdTY3OTdcdTU4MjFcdThCRUQ6ICdsaW0nLFxuICBcdTY3OTdcdTUyQTBcdTYyQzlcdThCRUQ6ICdsaW4nLFxuICBcdTUzNjJcdTVFNzJcdThGQkVcdThCRUQ6ICdsdWcnLFxuICBcdTUzNjJcdTY4RUVcdTU4MjFcdThCRUQ6ICdsdHonLFxuICBcdTUzNjJcdTY4RUVcdTVDM0NcdTRFOUFcdThCRUQ6ICdydXknLFxuICBcdTUzNjJcdTY1RkFcdThGQkVcdThCRUQ6ICdraW4nLFxuICBcdTdBQ0JcdTk2NzZcdTVCOUJcdThCRUQ6ICdsaXQnLFxuICBcdTdGNTdcdTY2RkNcdTRFQzBcdThCRUQ6ICdyb2gnLFxuICBcdTdGNTdcdTU5QzZcdThCRUQ6ICdybycsXG4gIFx1OTAzQlx1OEY5MVx1OEJFRDogJ2xvaicsXG4gIFx1OUE2Q1x1Njc2NVx1OEJFRDogJ21heScsXG4gIFx1N0YwNVx1NzUzOFx1OEJFRDogJ2J1cicsXG4gIFx1OUE2Q1x1NjJDOVx1NTczMFx1OEJFRDogJ21hcicsXG4gIFx1OUE2Q1x1NjJDOVx1NTJBMFx1NjVBRlx1OEJFRDogJ21nJyxcbiAgXHU5QTZDXHU2MkM5XHU5NkM1XHU2MkM5XHU1OUM2XHU4QkVEOiAnbWFsJyxcbiAgXHU5QTZDXHU1MTc2XHU5ODdGXHU4QkVEOiAnbWFjJyxcbiAgXHU5QTZDXHU3RUNEXHU1QzE0XHU4QkVEOiAnbWFoJyxcbiAgXHU4RkM4XHU4NDgyXHU1MjI5XHU4QkVEOiAnbWFpJyxcbiAgXHU2NkZDXHU1MTRCXHU2NUFGXHU4QkVEOiAnZ2x2JyxcbiAgXHU2QkRCXHU5MUNDXHU2QzQyXHU2NUFGXHU1MTRCXHU5MUNDXHU1OTY1XHU1QzE0XHU4QkVEOiAnbWF1JyxcbiAgXHU2QkRCXHU1MjI5XHU4QkVEOiAnbWFvJyxcbiAgXHU1QjVGXHU1MkEwXHU2MkM5XHU4QkVEOiAnYmVuJyxcbiAgXHU5QTZDXHU4MDMzXHU0RUQ2XHU4QkVEOiAnbWx0JyxcbiAgXHU4MkQ3XHU4QkVEOiAnaG1uJyxcbiAgXHU2MzJBXHU1QTAxXHU4QkVEOiAnbm9yJyxcbiAgXHU5MEEzXHU0RTBEXHU1MkQyXHU2NUFGXHU4QkVEOiAnbmVhJyxcbiAgXHU1MzU3XHU2MDY5XHU1RkI3XHU4RDFEXHU4M0IxXHU4QkVEOiAnbmJsJyxcbiAgXHU1MzU3XHU5NzVFXHU4Mzc3XHU1MTcwXHU4QkVEOiAnYWZyJyxcbiAgXHU1MzU3XHU3RDIyXHU2MjU4XHU4QkVEOiAnc290JyxcbiAgXHU1QzNDXHU2Q0NBXHU1QzE0XHU4QkVEOiAnbmVwJyxcbiAgXHU4NDYxXHU4NDA0XHU3MjU5XHU4QkVEOiAncHQnLFxuICBcdTY1QzFcdTkwNkVcdTY2NkVcdThCRUQ6ICdwYW4nLFxuICBcdTVFMTVcdTc2QUVcdTk2M0ZcdTk1RThcdTYyNThcdThCRUQ6ICdwYXAnLFxuICBcdTY2NkVcdTRFQzBcdTU2RkVcdThCRUQ6ICdwdXMnLFxuICBcdTlGNTBcdTUyMDdcdTc0RTZcdThCRUQ6ICdueWEnLFxuICBcdTU5NTFcdTdFRjRcdThCRUQ6ICd0d2knLFxuICBcdTUyMDdcdTdGNTdcdTU3RkFcdThCRUQ6ICdjaHInLFxuICBcdTY1RTVcdThCRUQ6ICdqcCcsXG4gIFx1NzQ1RVx1NTE3OFx1OEJFRDogJ3N3ZScsXG4gIFx1ODQyOFx1NEUwMVx1NUMzQ1x1NEU5QVx1OEJFRDogJ3NyZCcsXG4gIFx1ODQyOFx1NjQ2OVx1NEU5QVx1OEJFRDogJ3NtJyxcbiAgJ1x1NTg1RVx1NUMxNFx1N0VGNFx1NEU5QS1cdTUxNEJcdTdGNTdcdTU3MzBcdTRFOUFcdThCRUQnOiAnc2VjJyxcbiAgXHU1ODVFXHU1QzE0XHU3RUY0XHU0RTlBXHU4QkVEOiAnc3JwJyxcbiAgXHU2ODUxXHU2RDc3XHU4QkVEOiAnc29sJyxcbiAgXHU1MEU3XHU0RjNEXHU3RjU3XHU4QkVEOiAnc2luJyxcbiAgXHU0RTE2XHU3NTRDXHU4QkVEOiAnZXBvJyxcbiAgXHU0RTY2XHU5NzYyXHU2MzJBXHU1QTAxXHU4QkVEOiAnbm9iJyxcbiAgXHU2NUFGXHU2RDFCXHU0RjEwXHU1MTRCXHU4QkVEOiAnc2snLFxuICBcdTY1QUZcdTZEMUJcdTY1ODdcdTVDM0NcdTRFOUFcdThCRUQ6ICdzbG8nLFxuICBcdTY1QUZcdTc0RTZcdTVFMENcdTkxQ0NcdThCRUQ6ICdzd2EnLFxuICAnXHU1ODVFXHU1QzE0XHU3RUY0XHU0RTlBXHU4QkVEXHVGRjA4XHU4OTdGXHU5MUNDXHU1QzE0XHVGRjA5JzogJ3NyYycsXG4gIFx1N0QyMlx1OUE2Q1x1OTFDQ1x1OEJFRDogJ3NvbScsXG4gIFx1NkNGMFx1OEJFRDogJ3RoJyxcbiAgXHU1NzFGXHU4MDMzXHU1MTc2XHU4QkVEOiAndHInLFxuICBcdTU4NTRcdTU0MDlcdTUxNEJcdThCRUQ6ICd0Z2snLFxuICBcdTZDRjBcdTdDNzNcdTVDMTRcdThCRUQ6ICd0YW0nLFxuICBcdTRFRDZcdTUyQTBcdTc5ODRcdThCRUQ6ICd0Z2wnLFxuICBcdTYzRDBcdTY4M0NcdTUyMjlcdTVDM0NcdTRFOUFcdThCRUQ6ICd0aXInLFxuICBcdTZDRjBcdTUzNjJcdTU2RkFcdThCRUQ6ICd0ZWwnLFxuICBcdTdBODFcdTVDM0NcdTY1QUZcdTk2M0ZcdTYyQzlcdTRGMkZcdThCRUQ6ICd0dWEnLFxuICBcdTU3MUZcdTVFOTNcdTY2RkNcdThCRUQ6ICd0dWsnLFxuICBcdTRFNENcdTUxNEJcdTUxNzBcdThCRUQ6ICd1a3InLFxuICBcdTc0RTZcdTk2ODZcdThCRUQ6ICd3bG4nLFxuICBcdTVBMDFcdTVDMTRcdTU4RUJcdThCRUQ6ICd3ZWwnLFxuICBcdTY1ODdcdThGQkVcdThCRUQ6ICd2ZW4nLFxuICBcdTZDODNcdTZEMUJcdTU5MkJcdThCRUQ6ICd3b2wnLFxuICBcdTRFNENcdTVDMTRcdTkwRkRcdThCRUQ6ICd1cmQnLFxuICBcdTg5N0ZcdTczRURcdTcyNTlcdThCRUQ6ICdzcGEnLFxuICBcdTVFMENcdTRGMkZcdTY3NjVcdThCRUQ6ICdoZWInLFxuICBcdTVFMENcdTgxNEFcdThCRUQ6ICdlbCcsXG4gIFx1NTMwOFx1NzI1OVx1NTIyOVx1OEJFRDogJ2h1JyxcbiAgXHU4OTdGXHU1RjE3XHU5MUNDXHU2NUFGXHU4QkVEOiAnZnJ5JyxcbiAgXHU4OTdGXHU5MUNDXHU4OTdGXHU0RTlBXHU4QkVEOiAnc2lsJyxcbiAgXHU1RTBDXHU1MjI5XHU3NkQ2XHU1MTlDXHU4QkVEOiAnaGlsJyxcbiAgXHU0RTBCXHU3RDIyXHU1RTAzXHU4QkVEOiAnbG9zJyxcbiAgXHU1OTBGXHU1QTAxXHU1OTM3XHU4QkVEOiAnaGF3JyxcbiAgXHU2NUIwXHU2MzJBXHU1QTAxXHU4QkVEOiAnbm5vJyxcbiAgXHU4OTdGXHU5NzVFXHU0RTY2XHU5NzYyXHU4QkVEOiAnbnFvJyxcbiAgXHU0RkUxXHU1RkI3XHU4QkVEOiAnc25kJyxcbiAgXHU0RkVFXHU3RUIzXHU4QkVEOiAnc25hJyxcbiAgXHU1QkJGXHU1MkExXHU4QkVEOiAnY2ViJyxcbiAgXHU1M0Q5XHU1MjI5XHU0RTlBXHU4QkVEOiAnc3lyJyxcbiAgXHU1REZEXHU0RUQ2XHU4QkVEOiAnc3VuJyxcbiAgXHU4MkYxXHU4QkVEOiAnZW4nLFxuICBcdTUzNzBcdTU3MzBcdThCRUQ6ICdoaScsXG4gIFx1NTM3MFx1NUMzQ1x1OEJFRDogJ2lkJyxcbiAgXHU2MTBGXHU1OTI3XHU1MjI5XHU4QkVEOiAnaXQnLFxuICBcdThEOEFcdTUzNTdcdThCRUQ6ICd2aWUnLFxuICBcdTYxMEZcdTdCMkNcdTdFRUFcdThCRUQ6ICd5aWQnLFxuICBcdTU2RTBcdTcyNzlcdThCRUQ6ICdpbmEnLFxuICBcdTRFOUFcdTlGNTBcdThCRUQ6ICdhY2gnLFxuICBcdTUzNzBcdTUzRTRcdTRFQzBcdThCRUQ6ICdpbmcnLFxuICBcdTRGMEFcdTUzNUFcdThCRUQ6ICdpYm8nLFxuICBcdTRGMEFcdTU5MUFcdThCRUQ6ICdpZG8nLFxuICBcdTdFQTZcdTlDODFcdTVERjRcdThCRUQ6ICd5b3InLFxuICBcdTRFOUFcdTdGOEVcdTVDM0NcdTRFOUFcdThCRUQ6ICdhcm0nLFxuICBcdTRGMEFcdTUyQUFcdTUxNEJcdTYzRDBcdTU2RkVcdTcyNzlcdThCRUQ6ICdpa3UnLFxuICBcdTRGMEFcdTY3MTdcdThCRUQ6ICdpcicsXG4gIFx1N0I4MFx1NEY1M1x1NEUyRFx1NjU4NzogJ3poJyxcbiAgXHU3RTQxXHU0RjUzXHU0RTJEXHU2NTg3OiAnY2h0JyxcbiAgXHU2NTg3XHU4QTAwXHU2NTg3OiAnd3l3JyxcbiAgXHU0RTJEXHU2NTg3XHU3Q0E0XHU4QkVEOiAneXVlJyxcbiAgXHU2MjRFXHU2MjRFXHU1MTc2XHU4QkVEOiAnemF6JyxcbiAgXHU0RTJEXHU1M0U0XHU2Q0Q1XHU4QkVEOiAnZnJtJyxcbiAgXHU3OTU2XHU5QzgxXHU4QkVEOiAnenVsJyxcbiAgXHU3MjJBXHU1NEM3XHU4QkVEOiAnamF2J1xufVxuXG4vLyBzZXR0aW5nJ3MgY29uZmlndXJhdGlvbiBkZWZpbmF0aW9uc1xuZnVuY3Rpb24gZ2V0TGFuZ3VhZ2VPcHRpb25zKGxhbmd1YWdlczogTGFuZ3VhZ2VPcHRpb25zKTogTGFuZ3VhZ2VPcHRpb25zIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGxhbmd1YWdlcykucmVkdWNlKChvYmo6IExhbmd1YWdlT3B0aW9ucywga2V5OiBzdHJpbmcpID0+ICh7XG4gICAgLi4ub2JqLCBbbGFuZ3VhZ2VzW2tleV1dOiBgJHtrZXl9LSR7bGFuZ3VhZ2VzW2tleV19YFxuICB9KSwge30pXG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iajogYW55KSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nXG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlPYmplY3QgKG9iaiA9IHt9KSB7IHJldHVybiBpc09iamVjdChvYmopICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoIDwgMSB9XG5cbmZ1bmN0aW9uIHZhbGlkYXRvcihpdGVtczogQXJyYXk8eyB2YWx1ZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcgfT4sIGNiOiAoKSA9PiB2b2lkKSB7XG4gIGNvbnN0IGVycm9yTWVzc2FnZXMgPSBpdGVtcy5maWx0ZXIoaXRlbSA9PiAhaXRlbS52YWx1ZSkubWFwKGl0ZW0gPT4gaXRlbS5tZXNzYWdlKVxuICBpZiAoZXJyb3JNZXNzYWdlcy5sZW5ndGgpIHtcbiAgICBub3RpY2VIYW5kbGVyKGVycm9yTWVzc2FnZXMuam9pbignLCAnKSlcbiAgICByZXR1cm5cbiAgfSBlbHNlIHtcbiAgICBjYigpXG4gIH1cbn1cblxuZXhwb3J0IHtcblx0bm90aWNlSGFuZGxlcixcblx0aGFuZGxlVHJhbnNsYXRlLFxuXHRoYW5kbGVBdWRpbyxcblx0Z2V0TGFuZ3VhZ2VPcHRpb25zLFxuICBpc0VtcHR5T2JqZWN0LFxuICBoYW5kbGVNaWNyb3NvZnRUcmFuc2xhdGUsXG4gIHZhbGlkYXRvcixcbiAgaGFuZGxlQmFpZHVUcmFuc2xhdGUsXG4gIExBTkdVQUdFUyxcbiAgTUlDUk9TT0ZUX0xBTkdVQUdFUyxcbiAgQkFJRFVfTEFOR1VBR0VTXG59XG4iLCAiLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gSW4gdGhlIGJyb3dzZXIgd2UgdGhlcmVmb3JlXG4vLyByZXF1aXJlIHRoZSBjcnlwdG8gQVBJIGFuZCBkbyBub3Qgc3VwcG9ydCBidWlsdC1pbiBmYWxsYmFjayB0byBsb3dlciBxdWFsaXR5IHJhbmRvbSBudW1iZXJcbi8vIGdlbmVyYXRvcnMgKGxpa2UgTWF0aC5yYW5kb20oKSkuXG52YXIgZ2V0UmFuZG9tVmFsdWVzO1xudmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICAvLyBsYXp5IGxvYWQgc28gdGhhdCBlbnZpcm9ubWVudHMgdGhhdCBuZWVkIHRvIHBvbHlmaWxsIGhhdmUgYSBjaGFuY2UgdG8gZG8gc29cbiAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uIEFsc28sXG4gICAgLy8gZmluZCB0aGUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gb2YgY3J5cHRvIChtc0NyeXB0bykgb24gSUUxMS5cbiAgICBnZXRSYW5kb21WYWx1ZXMgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pIHx8IHR5cGVvZiBtc0NyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PT0gJ2Z1bmN0aW9uJyAmJiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChtc0NyeXB0byk7XG5cbiAgICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xufSIsICJleHBvcnQgZGVmYXVsdCAvXig/OlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCkkL2k7IiwgImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyIsICJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cblxudmFyIGJ5dGVUb0hleCA9IFtdO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyKSB7XG4gIHZhciBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIC8vIE5vdGU6IEJlIGNhcmVmdWwgZWRpdGluZyB0aGlzIGNvZGUhICBJdCdzIGJlZW4gdHVuZWQgZm9yIHBlcmZvcm1hbmNlXG4gIC8vIGFuZCB3b3JrcyBpbiB3YXlzIHlvdSBtYXkgbm90IGV4cGVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzQzNFxuICB2YXIgdXVpZCA9IChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiLCAiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7IiwgImV4cG9ydCBjb25zdCBNRDUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIFxuICAgIGZ1bmN0aW9uIFJvdGF0ZUxlZnQobFZhbHVlLCBpU2hpZnRCaXRzKSB7XG4gICAgICAgIHJldHVybiAobFZhbHVlPDxpU2hpZnRCaXRzKSB8IChsVmFsdWU+Pj4oMzItaVNoaWZ0Qml0cykpO1xuICAgIH1cbiAgXG4gICAgZnVuY3Rpb24gQWRkVW5zaWduZWQobFgsbFkpIHtcbiAgICAgICAgbGV0IGxYNCxsWTQsbFg4LGxZOCxsUmVzdWx0O1xuICAgICAgICBsWDggPSAobFggJiAweDgwMDAwMDAwKTtcbiAgICAgICAgbFk4ID0gKGxZICYgMHg4MDAwMDAwMCk7XG4gICAgICAgIGxYNCA9IChsWCAmIDB4NDAwMDAwMDApO1xuICAgICAgICBsWTQgPSAobFkgJiAweDQwMDAwMDAwKTtcbiAgICAgICAgbFJlc3VsdCA9IChsWCAmIDB4M0ZGRkZGRkYpKyhsWSAmIDB4M0ZGRkZGRkYpO1xuICAgICAgICBpZiAobFg0ICYgbFk0KSB7XG4gICAgICAgICAgICByZXR1cm4gKGxSZXN1bHQgXiAweDgwMDAwMDAwIF4gbFg4IF4gbFk4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobFg0IHwgbFk0KSB7XG4gICAgICAgICAgICBpZiAobFJlc3VsdCAmIDB4NDAwMDAwMDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGxSZXN1bHQgXiAweEMwMDAwMDAwIF4gbFg4IF4gbFk4KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChsUmVzdWx0IF4gMHg0MDAwMDAwMCBeIGxYOCBeIGxZOCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKGxSZXN1bHQgXiBsWDggXiBsWTgpO1xuICAgICAgICB9XG4gICAgfVxuICBcbiAgICBmdW5jdGlvbiBGKHgseSx6KSB7IHJldHVybiAoeCAmIHkpIHwgKCh+eCkgJiB6KTsgfVxuICAgIGZ1bmN0aW9uIEcoeCx5LHopIHsgcmV0dXJuICh4ICYgeikgfCAoeSAmICh+eikpOyB9XG4gICAgZnVuY3Rpb24gSCh4LHkseikgeyByZXR1cm4gKHggXiB5IF4geik7IH1cbiAgICBmdW5jdGlvbiBJKHgseSx6KSB7IHJldHVybiAoeSBeICh4IHwgKH56KSkpOyB9XG4gIFxuICAgIGZ1bmN0aW9uIEZGKGEsYixjLGQseCxzLGFjKSB7XG4gICAgICAgIGEgPSBBZGRVbnNpZ25lZChhLCBBZGRVbnNpZ25lZChBZGRVbnNpZ25lZChGKGIsIGMsIGQpLCB4KSwgYWMpKTtcbiAgICAgICAgcmV0dXJuIEFkZFVuc2lnbmVkKFJvdGF0ZUxlZnQoYSwgcyksIGIpO1xuICAgIH1cbiAgXG4gICAgZnVuY3Rpb24gR0coYSxiLGMsZCx4LHMsYWMpIHtcbiAgICAgICAgYSA9IEFkZFVuc2lnbmVkKGEsIEFkZFVuc2lnbmVkKEFkZFVuc2lnbmVkKEcoYiwgYywgZCksIHgpLCBhYykpO1xuICAgICAgICByZXR1cm4gQWRkVW5zaWduZWQoUm90YXRlTGVmdChhLCBzKSwgYik7XG4gICAgfVxuICBcbiAgICBmdW5jdGlvbiBISChhLGIsYyxkLHgscyxhYykge1xuICAgICAgICBhID0gQWRkVW5zaWduZWQoYSwgQWRkVW5zaWduZWQoQWRkVW5zaWduZWQoSChiLCBjLCBkKSwgeCksIGFjKSk7XG4gICAgICAgIHJldHVybiBBZGRVbnNpZ25lZChSb3RhdGVMZWZ0KGEsIHMpLCBiKTtcbiAgICB9XG4gIFxuICAgIGZ1bmN0aW9uIElJKGEsYixjLGQseCxzLGFjKSB7XG4gICAgICAgIGEgPSBBZGRVbnNpZ25lZChhLCBBZGRVbnNpZ25lZChBZGRVbnNpZ25lZChJKGIsIGMsIGQpLCB4KSwgYWMpKTtcbiAgICAgICAgcmV0dXJuIEFkZFVuc2lnbmVkKFJvdGF0ZUxlZnQoYSwgcyksIGIpO1xuICAgIH1cbiAgXG4gICAgZnVuY3Rpb24gQ29udmVydFRvV29yZEFycmF5KHN0cmluZykge1xuICAgICAgICBsZXQgbFdvcmRDb3VudDtcbiAgICAgICAgY29uc3QgbE1lc3NhZ2VMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgICBjb25zdCBsTnVtYmVyT2ZXb3Jkc190ZW1wMT1sTWVzc2FnZUxlbmd0aCArIDg7XG4gICAgICAgIGNvbnN0IGxOdW1iZXJPZldvcmRzX3RlbXAyPShsTnVtYmVyT2ZXb3Jkc190ZW1wMS0obE51bWJlck9mV29yZHNfdGVtcDEgJSA2NCkpLzY0O1xuICAgICAgICBjb25zdCBsTnVtYmVyT2ZXb3JkcyA9IChsTnVtYmVyT2ZXb3Jkc190ZW1wMisxKSoxNjtcbiAgICAgICAgY29uc3QgbFdvcmRBcnJheT1BcnJheShsTnVtYmVyT2ZXb3Jkcy0xKTtcbiAgICAgICAgbGV0IGxCeXRlUG9zaXRpb24gPSAwO1xuICAgICAgICBsZXQgbEJ5dGVDb3VudCA9IDA7XG4gICAgICAgIHdoaWxlICggbEJ5dGVDb3VudCA8IGxNZXNzYWdlTGVuZ3RoICkge1xuICAgICAgICAgICAgbFdvcmRDb3VudCA9IChsQnl0ZUNvdW50LShsQnl0ZUNvdW50ICUgNCkpLzQ7XG4gICAgICAgICAgICBsQnl0ZVBvc2l0aW9uID0gKGxCeXRlQ291bnQgJSA0KSo4O1xuICAgICAgICAgICAgbFdvcmRBcnJheVtsV29yZENvdW50XSA9IChsV29yZEFycmF5W2xXb3JkQ291bnRdIHwgKHN0cmluZy5jaGFyQ29kZUF0KGxCeXRlQ291bnQpPDxsQnl0ZVBvc2l0aW9uKSk7XG4gICAgICAgICAgICBsQnl0ZUNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgbFdvcmRDb3VudCA9IChsQnl0ZUNvdW50LShsQnl0ZUNvdW50ICUgNCkpLzQ7XG4gICAgICAgIGxCeXRlUG9zaXRpb24gPSAobEJ5dGVDb3VudCAlIDQpKjg7XG4gICAgICAgIGxXb3JkQXJyYXlbbFdvcmRDb3VudF0gPSBsV29yZEFycmF5W2xXb3JkQ291bnRdIHwgKDB4ODA8PGxCeXRlUG9zaXRpb24pO1xuICAgICAgICBsV29yZEFycmF5W2xOdW1iZXJPZldvcmRzLTJdID0gbE1lc3NhZ2VMZW5ndGg8PDM7XG4gICAgICAgIGxXb3JkQXJyYXlbbE51bWJlck9mV29yZHMtMV0gPSBsTWVzc2FnZUxlbmd0aD4+PjI5O1xuICAgICAgICByZXR1cm4gbFdvcmRBcnJheTtcbiAgICB9XG4gIFxuICAgIGZ1bmN0aW9uIFdvcmRUb0hleChsVmFsdWUpIHtcbiAgICAgICAgbGV0IFdvcmRUb0hleFZhbHVlPVwiXCIsV29yZFRvSGV4VmFsdWVfdGVtcD1cIlwiLGxCeXRlLGxDb3VudDtcbiAgICAgICAgZm9yIChsQ291bnQgPSAwO2xDb3VudDw9MztsQ291bnQrKykge1xuICAgICAgICAgICAgbEJ5dGUgPSAobFZhbHVlPj4+KGxDb3VudCo4KSkgJiAyNTU7XG4gICAgICAgICAgICBXb3JkVG9IZXhWYWx1ZV90ZW1wID0gXCIwXCIgKyBsQnl0ZS50b1N0cmluZygxNik7XG4gICAgICAgICAgICBXb3JkVG9IZXhWYWx1ZSA9IFdvcmRUb0hleFZhbHVlICsgV29yZFRvSGV4VmFsdWVfdGVtcC5zdWJzdHIoV29yZFRvSGV4VmFsdWVfdGVtcC5sZW5ndGgtMiwyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gV29yZFRvSGV4VmFsdWU7XG4gICAgfVxuICBcbiAgICBmdW5jdGlvbiBVdGY4RW5jb2RlKHN0cmluZykge1xuICAgICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXFxyXFxuL2csXCJcXG5cIik7XG4gICAgICAgIGxldCB1dGZ0ZXh0ID0gXCJcIjtcbiAgXG4gICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgc3RyaW5nLmxlbmd0aDsgbisrKSB7XG4gIFxuICAgICAgICAgICAgY29uc3QgYyA9IHN0cmluZy5jaGFyQ29kZUF0KG4pO1xuICBcbiAgICAgICAgICAgIGlmIChjIDwgMTI4KSB7XG4gICAgICAgICAgICAgICAgdXRmdGV4dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZigoYyA+IDEyNykgJiYgKGMgPCAyMDQ4KSkge1xuICAgICAgICAgICAgICAgIHV0ZnRleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYyA+PiA2KSB8IDE5Mik7XG4gICAgICAgICAgICAgICAgdXRmdGV4dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjICYgNjMpIHwgMTI4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHV0ZnRleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYyA+PiAxMikgfCAyMjQpO1xuICAgICAgICAgICAgICAgIHV0ZnRleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMgPj4gNikgJiA2MykgfCAxMjgpO1xuICAgICAgICAgICAgICAgIHV0ZnRleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYyAmIDYzKSB8IDEyOCk7XG4gICAgICAgICAgICB9XG4gIFxuICAgICAgICB9XG4gIFxuICAgICAgICByZXR1cm4gdXRmdGV4dDtcbiAgICB9XG4gIFxuICAgIGxldCB4PVtdO1xuICAgIGxldCBrLEFBLEJCLENDLERELGEsYixjLGQ7XG4gICAgY29uc3QgUzExPTcsIFMxMj0xMiwgUzEzPTE3LCBTMTQ9MjI7XG4gICAgY29uc3QgUzIxPTUsIFMyMj05ICwgUzIzPTE0LCBTMjQ9MjA7XG4gICAgY29uc3QgUzMxPTQsIFMzMj0xMSwgUzMzPTE2LCBTMzQ9MjM7XG4gICAgY29uc3QgUzQxPTYsIFM0Mj0xMCwgUzQzPTE1LCBTNDQ9MjE7XG4gIFxuICAgIHN0cmluZyA9IFV0ZjhFbmNvZGUoc3RyaW5nKTtcbiAgXG4gICAgeCA9IENvbnZlcnRUb1dvcmRBcnJheShzdHJpbmcpO1xuICBcbiAgICBhID0gMHg2NzQ1MjMwMTsgYiA9IDB4RUZDREFCODk7IGMgPSAweDk4QkFEQ0ZFOyBkID0gMHgxMDMyNTQ3NjtcbiAgXG4gICAgZm9yIChrPTA7azx4Lmxlbmd0aDtrKz0xNikge1xuICAgICAgICBBQT1hOyBCQj1iOyBDQz1jOyBERD1kO1xuICAgICAgICBhPUZGKGEsYixjLGQseFtrKzBdLCBTMTEsMHhENzZBQTQ3OCk7XG4gICAgICAgIGQ9RkYoZCxhLGIsYyx4W2srMV0sIFMxMiwweEU4QzdCNzU2KTtcbiAgICAgICAgYz1GRihjLGQsYSxiLHhbaysyXSwgUzEzLDB4MjQyMDcwREIpO1xuICAgICAgICBiPUZGKGIsYyxkLGEseFtrKzNdLCBTMTQsMHhDMUJEQ0VFRSk7XG4gICAgICAgIGE9RkYoYSxiLGMsZCx4W2srNF0sIFMxMSwweEY1N0MwRkFGKTtcbiAgICAgICAgZD1GRihkLGEsYixjLHhbays1XSwgUzEyLDB4NDc4N0M2MkEpO1xuICAgICAgICBjPUZGKGMsZCxhLGIseFtrKzZdLCBTMTMsMHhBODMwNDYxMyk7XG4gICAgICAgIGI9RkYoYixjLGQsYSx4W2srN10sIFMxNCwweEZENDY5NTAxKTtcbiAgICAgICAgYT1GRihhLGIsYyxkLHhbays4XSwgUzExLDB4Njk4MDk4RDgpO1xuICAgICAgICBkPUZGKGQsYSxiLGMseFtrKzldLCBTMTIsMHg4QjQ0RjdBRik7XG4gICAgICAgIGM9RkYoYyxkLGEsYix4W2srMTBdLFMxMywweEZGRkY1QkIxKTtcbiAgICAgICAgYj1GRihiLGMsZCxhLHhbaysxMV0sUzE0LDB4ODk1Q0Q3QkUpO1xuICAgICAgICBhPUZGKGEsYixjLGQseFtrKzEyXSxTMTEsMHg2QjkwMTEyMik7XG4gICAgICAgIGQ9RkYoZCxhLGIsYyx4W2srMTNdLFMxMiwweEZEOTg3MTkzKTtcbiAgICAgICAgYz1GRihjLGQsYSxiLHhbaysxNF0sUzEzLDB4QTY3OTQzOEUpO1xuICAgICAgICBiPUZGKGIsYyxkLGEseFtrKzE1XSxTMTQsMHg0OUI0MDgyMSk7XG4gICAgICAgIGE9R0coYSxiLGMsZCx4W2srMV0sIFMyMSwweEY2MUUyNTYyKTtcbiAgICAgICAgZD1HRyhkLGEsYixjLHhbays2XSwgUzIyLDB4QzA0MEIzNDApO1xuICAgICAgICBjPUdHKGMsZCxhLGIseFtrKzExXSxTMjMsMHgyNjVFNUE1MSk7XG4gICAgICAgIGI9R0coYixjLGQsYSx4W2srMF0sIFMyNCwweEU5QjZDN0FBKTtcbiAgICAgICAgYT1HRyhhLGIsYyxkLHhbays1XSwgUzIxLDB4RDYyRjEwNUQpO1xuICAgICAgICBkPUdHKGQsYSxiLGMseFtrKzEwXSxTMjIsMHgyNDQxNDUzKTtcbiAgICAgICAgYz1HRyhjLGQsYSxiLHhbaysxNV0sUzIzLDB4RDhBMUU2ODEpO1xuICAgICAgICBiPUdHKGIsYyxkLGEseFtrKzRdLCBTMjQsMHhFN0QzRkJDOCk7XG4gICAgICAgIGE9R0coYSxiLGMsZCx4W2srOV0sIFMyMSwweDIxRTFDREU2KTtcbiAgICAgICAgZD1HRyhkLGEsYixjLHhbaysxNF0sUzIyLDB4QzMzNzA3RDYpO1xuICAgICAgICBjPUdHKGMsZCxhLGIseFtrKzNdLCBTMjMsMHhGNEQ1MEQ4Nyk7XG4gICAgICAgIGI9R0coYixjLGQsYSx4W2srOF0sIFMyNCwweDQ1NUExNEVEKTtcbiAgICAgICAgYT1HRyhhLGIsYyxkLHhbaysxM10sUzIxLDB4QTlFM0U5MDUpO1xuICAgICAgICBkPUdHKGQsYSxiLGMseFtrKzJdLCBTMjIsMHhGQ0VGQTNGOCk7XG4gICAgICAgIGM9R0coYyxkLGEsYix4W2srN10sIFMyMywweDY3NkYwMkQ5KTtcbiAgICAgICAgYj1HRyhiLGMsZCxhLHhbaysxMl0sUzI0LDB4OEQyQTRDOEEpO1xuICAgICAgICBhPUhIKGEsYixjLGQseFtrKzVdLCBTMzEsMHhGRkZBMzk0Mik7XG4gICAgICAgIGQ9SEgoZCxhLGIsYyx4W2srOF0sIFMzMiwweDg3NzFGNjgxKTtcbiAgICAgICAgYz1ISChjLGQsYSxiLHhbaysxMV0sUzMzLDB4NkQ5RDYxMjIpO1xuICAgICAgICBiPUhIKGIsYyxkLGEseFtrKzE0XSxTMzQsMHhGREU1MzgwQyk7XG4gICAgICAgIGE9SEgoYSxiLGMsZCx4W2srMV0sIFMzMSwweEE0QkVFQTQ0KTtcbiAgICAgICAgZD1ISChkLGEsYixjLHhbays0XSwgUzMyLDB4NEJERUNGQTkpO1xuICAgICAgICBjPUhIKGMsZCxhLGIseFtrKzddLCBTMzMsMHhGNkJCNEI2MCk7XG4gICAgICAgIGI9SEgoYixjLGQsYSx4W2srMTBdLFMzNCwweEJFQkZCQzcwKTtcbiAgICAgICAgYT1ISChhLGIsYyxkLHhbaysxM10sUzMxLDB4Mjg5QjdFQzYpO1xuICAgICAgICBkPUhIKGQsYSxiLGMseFtrKzBdLCBTMzIsMHhFQUExMjdGQSk7XG4gICAgICAgIGM9SEgoYyxkLGEsYix4W2srM10sIFMzMywweEQ0RUYzMDg1KTtcbiAgICAgICAgYj1ISChiLGMsZCxhLHhbays2XSwgUzM0LDB4NDg4MUQwNSk7XG4gICAgICAgIGE9SEgoYSxiLGMsZCx4W2srOV0sIFMzMSwweEQ5RDREMDM5KTtcbiAgICAgICAgZD1ISChkLGEsYixjLHhbaysxMl0sUzMyLDB4RTZEQjk5RTUpO1xuICAgICAgICBjPUhIKGMsZCxhLGIseFtrKzE1XSxTMzMsMHgxRkEyN0NGOCk7XG4gICAgICAgIGI9SEgoYixjLGQsYSx4W2srMl0sIFMzNCwweEM0QUM1NjY1KTtcbiAgICAgICAgYT1JSShhLGIsYyxkLHhbayswXSwgUzQxLDB4RjQyOTIyNDQpO1xuICAgICAgICBkPUlJKGQsYSxiLGMseFtrKzddLCBTNDIsMHg0MzJBRkY5Nyk7XG4gICAgICAgIGM9SUkoYyxkLGEsYix4W2srMTRdLFM0MywweEFCOTQyM0E3KTtcbiAgICAgICAgYj1JSShiLGMsZCxhLHhbays1XSwgUzQ0LDB4RkM5M0EwMzkpO1xuICAgICAgICBhPUlJKGEsYixjLGQseFtrKzEyXSxTNDEsMHg2NTVCNTlDMyk7XG4gICAgICAgIGQ9SUkoZCxhLGIsYyx4W2srM10sIFM0MiwweDhGMENDQzkyKTtcbiAgICAgICAgYz1JSShjLGQsYSxiLHhbaysxMF0sUzQzLDB4RkZFRkY0N0QpO1xuICAgICAgICBiPUlJKGIsYyxkLGEseFtrKzFdLCBTNDQsMHg4NTg0NUREMSk7XG4gICAgICAgIGE9SUkoYSxiLGMsZCx4W2srOF0sIFM0MSwweDZGQTg3RTRGKTtcbiAgICAgICAgZD1JSShkLGEsYixjLHhbaysxNV0sUzQyLDB4RkUyQ0U2RTApO1xuICAgICAgICBjPUlJKGMsZCxhLGIseFtrKzZdLCBTNDMsMHhBMzAxNDMxNCk7XG4gICAgICAgIGI9SUkoYixjLGQsYSx4W2srMTNdLFM0NCwweDRFMDgxMUExKTtcbiAgICAgICAgYT1JSShhLGIsYyxkLHhbays0XSwgUzQxLDB4Rjc1MzdFODIpO1xuICAgICAgICBkPUlJKGQsYSxiLGMseFtrKzExXSxTNDIsMHhCRDNBRjIzNSk7XG4gICAgICAgIGM9SUkoYyxkLGEsYix4W2srMl0sIFM0MywweDJBRDdEMkJCKTtcbiAgICAgICAgYj1JSShiLGMsZCxhLHhbays5XSwgUzQ0LDB4RUI4NkQzOTEpO1xuICAgICAgICBhPUFkZFVuc2lnbmVkKGEsQUEpO1xuICAgICAgICBiPUFkZFVuc2lnbmVkKGIsQkIpO1xuICAgICAgICBjPUFkZFVuc2lnbmVkKGMsQ0MpO1xuICAgICAgICBkPUFkZFVuc2lnbmVkKGQsREQpO1xuICAgIH1cbiAgXG4gICAgY29uc3QgdGVtcCA9IFdvcmRUb0hleChhKStXb3JkVG9IZXgoYikrV29yZFRvSGV4KGMpK1dvcmRUb0hleChkKTtcbiAgXG4gICAgcmV0dXJuIHRlbXAudG9Mb3dlckNhc2UoKTtcbn0iLCAiaW1wb3J0IHsgQXBwLCBNb2RhbCwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7XG4gIGhhbmRsZVRyYW5zbGF0ZSxcbiAgaGFuZGxlQXVkaW8sXG4gIGlzRW1wdHlPYmplY3QsXG4gIGhhbmRsZU1pY3Jvc29mdFRyYW5zbGF0ZSxcbiAgaGFuZGxlQmFpZHVUcmFuc2xhdGUsXG4gIHZhbGlkYXRvcixcbiAgbm90aWNlSGFuZGxlcixcbiAgZ2V0TGFuZ3VhZ2VPcHRpb25zLFxuICBMQU5HVUFHRVMsXG4gIE1JQ1JPU09GVF9MQU5HVUFHRVMsXG4gIEJBSURVX0xBTkdVQUdFU1xufSBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0IHsgVHJhbnNsYXRvclNldHRpbmcgfSBmcm9tICcuL2ludGVyZmFjZXMnXG5cbnR5cGUgU3BlYWtVcmxzID0ge1xuXHRba2V5OiBzdHJpbmddOiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIEVsZW1lbnRPYmplY3Qge1xuICBba2V5OiBzdHJpbmddOiBIVE1MRGl2RWxlbWVudCBcbn1cblxuaW50ZXJmYWNlIHNlcnZpY2VUeXBlcyB7XG4gIHlvdWRhbz86IHN0cmluZ1xuICBtaWNyb3NvZnQ/OiBzdHJpbmdcbiAgYmFpZHU/OiBzdHJpbmdcbn1cblxuY29uc3QgTEFOR1VBR0VTX01BUCA9IHtcbiAgeW91ZGFvOiB7IGtleTogJ3lUbycsIGxhbmd1YWdlczogTEFOR1VBR0VTIH0sXG4gIG1pY3Jvc29mdDogeyBrZXk6ICdtVG8nLCBsYW5ndWFnZXM6IE1JQ1JPU09GVF9MQU5HVUFHRVMgfSxcbiAgYmFpZHU6IHsga2V5OiAnYlRvJywgbGFuZ3VhZ2VzOiBCQUlEVV9MQU5HVUFHRVMgfVxufVxuXG4vLyB0cmFuc2xhdG9yXG5leHBvcnQgY2xhc3MgVHJhbnNsYXRvck1vZGFsIGV4dGVuZHMgTW9kYWwge1xuXHR0ZXh0OiBzdHJpbmdcbiAgcHJldlRleHQ6IHN0cmluZ1xuXHRjdXN0b21Ubzogc2VydmljZVR5cGVzXG4gIGN1c3RvbVRvUHJlOiBzZXJ2aWNlVHlwZXNcblx0Y29udGFpbmVyRWw6IEhUTUxEaXZFbGVtZW50XG4gIGVtcHR5OiBIVE1MRGl2RWxlbWVudFxuXHRzZXR0aW5nczogVHJhbnNsYXRvclNldHRpbmdcblxuICBjb25zdHJ1Y3RvciAoXG4gICAgYXBwOiBBcHAsXG5cdFx0dGV4dDogc3RyaW5nLFxuXHRcdHNldHRpbmdzOiBUcmFuc2xhdG9yU2V0dGluZ1xuICApIHtcbiAgICBzdXBlcihhcHApXG5cdFx0dGhpcy50ZXh0ID0gdGV4dFxuICAgIC8vIGVtcHR5IGVsZW1lbnRcbiAgICB0aGlzLmVtcHR5ID0gY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsczogJ3RyYW5zbGF0b3JfY29udGFpbmVyLWVtcHR5JyxcbiAgICAgIHRleHQ6ICdObyByZXN1bHRzISdcbiAgICB9KVxuXHRcdC8vIGdldCBzZXR0aW5nc1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5nc1xuICAgIHRoaXMudGV4dCA9IHRleHRcbiAgICB0aGlzLmN1c3RvbVRvID0ge1xuICAgICAgJ3lvdWRhbyc6ICd6aC1DSFMnLFxuICAgICAgJ21pY3Jvc29mdCc6ICd6aC1IYW5zJyxcbiAgICAgICdiYWlkdSc6ICd6aCdcbiAgICB9XG4gICAgdGhpcy5jdXN0b21Ub1ByZSA9IHt9XG4gIH1cblxuICAvLyBjcmVhdGUgdGl0bGUgZWxlbWVudFxuICBjcmVhdGVCbG9ja1RpdGxlRWxlbWVudChjb250YWluZXJFbDogSFRNTERpdkVsZW1lbnQsIHRpdGxlOiBzdHJpbmcsIHR5cGU6IHN0cmluZykge1xuICAgIGNvbnN0IHsgbGFuZ3VhZ2VzIH0gPSBMQU5HVUFHRVNfTUFQW3R5cGUgYXMga2V5b2YgdHlwZW9mIExBTkdVQUdFU19NQVBdXG4gICAgY29uc3Qgb3B0aW9ucyA9IGdldExhbmd1YWdlT3B0aW9ucyhsYW5ndWFnZXMpXG4gICAgY29uc3QgdGl0bGVDb250YWluZXIgPSBjb250YWluZXJFbC5hcHBlbmRDaGlsZChjcmVhdGVEaXYoe1xuICAgICAgdGV4dDogdGl0bGUsXG4gICAgICBjbHM6IGB0cmFuc2xhdG9yX2NvbnRhaW5lci1ibG9jay10aXRsZSB0cmFuc2xhdG9yX2NvbnRhaW5lci1ibG9jay10aXRsZS0ke3R5cGV9YFxuICAgIH0pKVxuICAgIG5ldyBTZXR0aW5nKHRpdGxlQ29udGFpbmVyKS5hZGREcm9wZG93bihkcCA9PlxuICAgICAgZHAuYWRkT3B0aW9ucyhvcHRpb25zKS5zZXRWYWx1ZSh0aGlzLmN1c3RvbVRvW3R5cGUgYXMga2V5b2Ygc2VydmljZVR5cGVzXSkub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICB0aGlzLmN1c3RvbVRvW3R5cGUgYXMga2V5b2Ygc2VydmljZVR5cGVzXSA9IHZhbHVlXG4gICAgICB9KVxuICAgIClcbiAgfVxuXG4gIC8vIHRyYW5zbGF0ZSByZXN1bHRzIGdlbmVyYXRvclxuICB0cmFuc2xhdGVSZXN1bHRzR2VuZXJhdG9yKGNvbnRlbnRPYmplY3Q6IHsgdGl0bGU6IHN0cmluZywgZXhwbGFpbjogc3RyaW5nIH0sIGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQpIHtcbiAgICBPYmplY3Qua2V5cyhjb250ZW50T2JqZWN0KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlRWwoJ3AnLCB7XG4gICAgICAgIGNsczogYHRyYW5zbGF0b3JfY29udGFpbmVyLSR7a2V5fWAsXG4gICAgICAgIHRleHQ6IGNvbnRlbnRPYmplY3Rba2V5IGFzIGtleW9mIHR5cGVvZiBjb250ZW50T2JqZWN0XVxuICAgICAgfSkpXG4gICAgfSlcbiAgfVxuXG4gIGNyZWF0ZUxvYWRpbmdFbGVtZW50KCkge1xuICAgIHJldHVybiBjcmVhdGVFbCgnZGl2Jywge1xuXHRcdFx0Y2xzOiAndHJhbnNsYXRvcl9jb250YWluZXItb3ZlcmxheScsXG5cdFx0XHR0ZXh0OiAnVHJhbnNsYXRpbmcuLi4nXG5cdFx0fSlcbiAgfVxuXG4gIC8vIHlvdWRhbyB0cmFuc2xhdGUgaGFuZGxlclxuICB5b3VkYW9UcmFuc2xhdGVIYW5kbGVyKGNvbnRhaW5lckVsOiBIVE1MRGl2RWxlbWVudCkge1xuICAgIGNvbnN0IHsgeVRvOiB0bywgeUZyb206IGZyb20sIGFwcElkLCBzZWNyZXRLZXksIGF1ZGlvIH0gPSB0aGlzLnNldHRpbmdzXG4gICAgY29uc3QgcHJlTWVzc2FnZSA9IGBZb3VkYW8gdHJhbnNsYXRpb24gc2VydmljZSdzYFxuICAgIGNvbnN0IGxhc3RNZXNzYWdlID0gYHNob3VsZG4ndCBiZSBlbXB0eS5gXG4gICAgdmFsaWRhdG9yKFtcbiAgICAgIHsgdmFsdWU6IGFwcElkLCBtZXNzYWdlOiBgJHtwcmVNZXNzYWdlfSBhcHBJZCAke2xhc3RNZXNzYWdlfWAgfSxcbiAgICAgIHsgdmFsdWU6IHNlY3JldEtleSwgbWVzc2FnZTogYCR7cHJlTWVzc2FnZX0gc2VjcmV0S2V5ICR7bGFzdE1lc3NhZ2V9YCB9XG4gICAgXSwgKCkgPT4ge1xuICAgICAgY29uc3QgbG9hZGluZ0VsID0gdGhpcy5jcmVhdGVMb2FkaW5nRWxlbWVudCgpXG4gICAgICB0aGlzLmNyZWF0ZUJsb2NrVGl0bGVFbGVtZW50KGNvbnRhaW5lckVsLCAnWW91ZGFvIHRyYW5zbGF0aW9uIHJlc3VsdHMnLCAneW91ZGFvJylcbiAgICAgIC8vIGFkZCBvdmVybGF5IG1hc2tcbiAgICAgIGNvbnRhaW5lckVsLmFwcGVuZENoaWxkKGxvYWRpbmdFbClcbiAgICAgIGhhbmRsZVRyYW5zbGF0ZSh0aGlzLnRleHQsIHsgdG86IHRoaXMuY3VzdG9tVG8ueW91ZGFvIHx8IHRvLCBhcHBJZCwgc2VjcmV0S2V5LCBmcm9tIH0sIChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgY29udGFpbmVyRWwucmVtb3ZlQ2hpbGQobG9hZGluZ0VsKVxuICAgICAgICBpZiAoaXNFbXB0eU9iamVjdChkYXRhKSkge1xuICAgICAgICAgIGNvbnRhaW5lckVsLmFwcGVuZENoaWxkKHRoaXMuZW1wdHkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgeyBxdWVyeSwgdHJhbnNsYXRpb24sIHdlYiwgYmFzaWMsIGwsIHdlYmRpY3QsIHRTcGVha1VybCwgc3BlYWtVcmwgfSA9IGRhdGFcbiAgICAgICAgICAvLyBleHBsYWluIHJ1bGVcbiAgICAgICAgICBjb25zdCBbRlJPTSwgVE9dID0gbC5zcGxpdCgnMicpXG4gICAgXG4gICAgICAgICAgLy8gYmUgdHJhbnNsYXRlZCB3b3JkXG4gICAgICAgICAgY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWwoJ2EnLCB7XG4gICAgICAgICAgICBjbHM6ICd0cmFuc2xhdG9yX2NvbnRhaW5lci10aXRsZScsXG4gICAgICAgICAgICB0ZXh0OiBxdWVyeSxcbiAgICAgICAgICAgIGhyZWY6IHdlYmRpY3QgPyB3ZWJkaWN0LnVybCA6ICcnXG4gICAgICAgICAgfSkpXG4gICAgICAgICAgLy8gZ2V0IGF1ZGlvZXNcbiAgICAgICAgICBjb25zdCBhdWRpb2VzQ29udGFpbmVyID0gY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAndHJhbnNsYXRvcl9jb250YWluZXItYXVkaW9lcycgfSlcbiAgICAgICAgICBpZiAoYXVkaW8pIHtcbiAgICAgICAgICAgIGNvbnN0IHNwZWFrVXJsczogU3BlYWtVcmxzID0ge29yaWdpbjogc3BlYWtVcmwsIHJlc3VsdDogdFNwZWFrVXJsfVxuICAgICAgICAgICAgT2JqZWN0LmtleXMoc3BlYWtVcmxzKS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICBuZXcgU2V0dGluZyhhdWRpb2VzQ29udGFpbmVyKVxuICAgICAgICAgICAgICAgIC5zZXROYW1lKGAke2tleX06YClcbiAgICAgICAgICAgICAgICAuYWRkQnV0dG9uKGJ0biA9PiB7XG4gICAgICAgICAgICAgICAgYnRuLnNldEljb24oJ2F1ZGlvLWZpbGUnKVxuICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGtleSkucGxheSgpXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBoYW5kbGVBdWRpbyhzcGVha1VybHNba2V5XSwgKHJlczogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgYXVkaW9lc0NvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVFbCgnZGl2Jywge1xuICAgICAgICAgICAgICAgICAgY2xzOiAndHJhbnNsYXRvcl9jb250YWluZXItcGxheWVyJ1xuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIGF1ZGlvZXNDb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlRWwoJ2F1ZGlvJywge1xuICAgICAgICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgICAgICBzcmM6ICBVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtyZXMuYXJyYXlCdWZmZXJdLCB7IHR5cGU6ICdhdWRpby9tcDMnIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGtleVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGNvbnRhaW5lckVsLmFwcGVuZENoaWxkKGF1ZGlvZXNDb250YWluZXIpXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHJlbmRlciBleHBsYWluc1xuICAgICAgICAgIGlmIChiYXNpYykge1xuICAgICAgICAgICAgLy8gc3ltYm9sXG4gICAgICAgICAgICBsZXQgc3ltYm9sVGV4dCA9IGJhc2ljLnBob25ldGljID8gYFske2Jhc2ljLnBob25ldGljfV1gIDogJydcbiAgICAgICAgICAgIGlmIChGUk9NID09PSAnZW4nICYmIFRPID09PSAnemgtQ0hTJykge1xuICAgICAgICAgICAgICBzeW1ib2xUZXh0ID0gYCR7YmFzaWNbJ3VzLXBob25ldGljJ10gPyBgdXM6IFske2Jhc2ljWyd1cy1waG9uZXRpYyddfV1gIDogJyd9XG4gICAgJHtiYXNpY1sndWstcGhvbmV0aWMnXSA/IGB1azogWyR7YmFzaWNbJ3VrLXBob25ldGljJ119XWAgOiAnJ31gXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250YWluZXJFbC5hcHBlbmRDaGlsZChjcmVhdGVFbCgncCcsIHtcbiAgICAgICAgICAgICAgY2xzOiAndHJhbnNsYXRvcl9jb250YWluZXItc291bmRtYXJrJyxcbiAgICAgICAgICAgICAgdGV4dDogc3ltYm9sVGV4dFxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAvLyBleHBsYWluc1xuICAgICAgICAgICAgY29uc3QgZXhwbGFpbnMgPSBGUk9NID09PSAnemgtQ0hTJyAmJiBUTyA9PT0gJ2VuJ1xuICAgICAgICAgICAgICA/IFsuLi50cmFuc2xhdGlvbiwgYmFzaWMuZXhwbGFpbnMudG9TdHJpbmcoKV1cbiAgICAgICAgICAgICAgOiBiYXNpYy5leHBsYWluc1xuICAgICAgICAgICAgZXhwbGFpbnMuZm9yRWFjaCgoZXhwOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWwoJ3AnLCB7XG4gICAgICAgICAgICAgICAgY2xzOiAndHJhbnNsYXRvcl9jb250YWluZXItZXhwbGFpbicsXG4gICAgICAgICAgICAgICAgdGV4dDogZXhwXG4gICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vIHdvcmQgZm9ybXNcbiAgICAgICAgICAgIGlmIChiYXNpYy53ZnMpIHtcbiAgICAgICAgICAgICAgY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWwoJ3AnLCB7XG4gICAgICAgICAgICAgICAgY2xzOiAndHJhbnNsYXRvcl9jb250YWluZXItdGl0bGUnLFxuICAgICAgICAgICAgICAgIHRleHQ6ICdXb3JkIGZvcm1zJ1xuICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWwoJ3AnLCB7XG4gICAgICAgICAgICAgICAgY2xzOiAndHJhbnNsYXRvcl9jb250YWluZXItd2ZzJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiBiYXNpYy53ZnMubWFwKChpdGVtOiB7XG4gICAgICAgICAgICAgICAgICB3ZjogeyBuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfVxuICAgICAgICAgICAgICAgIH0pID0+IGAke2l0ZW0ud2YubmFtZX06ICR7aXRlbS53Zi52YWx1ZX1gKS5qb2luKCcsICcpXG4gICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250YWluZXJFbC5hcHBlbmRDaGlsZChjcmVhdGVFbCgncCcsIHtcbiAgICAgICAgICAgICAgY2xzOiAndHJhbnNsYXRvcl9jb250YWluZXItZXhwbGFpbicsXG4gICAgICAgICAgICAgIHRleHQ6IHRyYW5zbGF0aW9uPy50b1N0cmluZygpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gb3RoZXJcbiAgICAgICAgICBpZiAod2ViKSB7XG4gICAgICAgICAgICBjb250YWluZXJFbC5hcHBlbmRDaGlsZChjcmVhdGVFbCgncCcsIHtcbiAgICAgICAgICAgICAgY2xzOiAndHJhbnNsYXRvcl9jb250YWluZXItdGl0bGUnLFxuICAgICAgICAgICAgICB0ZXh0OiAnT3RoZXIgdHJhbnNsYXRpb25zJ1xuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICB3ZWIuZm9yRWFjaCgoaXRlbTogeyB2YWx1ZTogc3RyaW5nW10sIGtleTogc3RyaW5nfSkgPT4ge1xuICAgICAgICAgICAgICBjb250YWluZXJFbC5hcHBlbmRDaGlsZChjcmVhdGVFbCgncCcsIHtcbiAgICAgICAgICAgICAgICBjbHM6ICd0cmFuc2xhdG9yX2NvbnRhaW5lci1vdGhlcicsXG4gICAgICAgICAgICAgICAgdGV4dDogYCR7aXRlbS5rZXl9OiAke2l0ZW0udmFsdWUudG9TdHJpbmcoKX1gXG4gICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIC8vIG1pY3Jvc29mdCB0cmFuc2xhdGUgaGFuZGxlclxuICBtaWNyb3NvZnRUcmFuc2xhdGVIYW5kbGVyKGNvbnRhaW5lckVsOiBIVE1MRGl2RWxlbWVudCkge1xuICAgIGNvbnN0IGxvYWRpbmdFbCA9IHRoaXMuY3JlYXRlTG9hZGluZ0VsZW1lbnQoKVxuICAgIGNvbnN0IHsgbVRvOiB0bywgbUZyb206IGZyb20sIG1pY3Jvc29mdFNlY3JldEtleSwgbWljcm9zb2Z0TG9jYXRpb24gfSA9IHRoaXMuc2V0dGluZ3NcbiAgICBjb25zdCBwcmVNZXNzYWdlID0gYE1pY3Jvc29mdCB0cmFuc2xhdGlvbiBzZXJ2aWNlJ3NgXG4gICAgY29uc3QgbGFzdE1lc3NhZ2UgPSBgc2hvdWxkbid0IGJlIGVtcHR5LmBcbiAgICB2YWxpZGF0b3IoW1xuICAgICAgeyB2YWx1ZTogbWljcm9zb2Z0U2VjcmV0S2V5LCBtZXNzYWdlOiBgJHtwcmVNZXNzYWdlfSBzZWNyZXQga2V5ICR7bGFzdE1lc3NhZ2V9YCB9LFxuICAgICAgeyB2YWx1ZTogbWljcm9zb2Z0TG9jYXRpb24sIG1lc3NhZ2U6IGAke3ByZU1lc3NhZ2V9IGxvY2F0aW9uICR7bGFzdE1lc3NhZ2V9YH1cbiAgICBdLCAoKSA9PiB7XG4gICAgICB0aGlzLmNyZWF0ZUJsb2NrVGl0bGVFbGVtZW50KGNvbnRhaW5lckVsLCAnTWljcm9zb2Z0IHRyYW5zbGF0aW9uIHJlc3VsdHMnLCAnbWljcm9zb2Z0JylcbiAgICAgIC8vIGFkZCBvdmVybGF5IG1hc2tcbiAgICAgIGNvbnRhaW5lckVsLmFwcGVuZENoaWxkKGxvYWRpbmdFbClcbiAgICAgIGhhbmRsZU1pY3Jvc29mdFRyYW5zbGF0ZSh0aGlzLnRleHQsIHtcbiAgICAgICAgdG86IHRoaXMuY3VzdG9tVG8ubWljcm9zb2Z0IHx8IHRvLCBmcm9tLCBzZWNyZXRLZXk6IG1pY3Jvc29mdFNlY3JldEtleSwgbG9jYXRpb246IG1pY3Jvc29mdExvY2F0aW9uXG4gICAgICB9LCAocmVzOiBzdHJpbmcpID0+IHtcbiAgICAgICAgY29udGFpbmVyRWwucmVtb3ZlQ2hpbGQobG9hZGluZ0VsKVxuICAgICAgICBjb25zdCBjb250ZW50T2JqID0ge1xuICAgICAgICAgIHRpdGxlOiB0aGlzLnRleHQsXG4gICAgICAgICAgZXhwbGFpbjogcmVzXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cmFuc2xhdGVSZXN1bHRzR2VuZXJhdG9yKGNvbnRlbnRPYmosIGNvbnRhaW5lckVsKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgLy8gYmFpZHUgdHJhbnNsYXRlIGhhbmRsZXJcbiAgYmFpZHVUcmFuc2xhdGVIYW5kbGVyKGNvbnRhaW5lckVsOiBIVE1MRGl2RWxlbWVudCkge1xuICAgIGNvbnN0IHsgYlRvOiB0bywgYkZyb206IGZyb20sIGJhaWR1QXBwSWQsIGJhaWR1U2VjcmV0S2V5LCBiYWlkdUF1ZGlvIH0gPSB0aGlzLnNldHRpbmdzXG4gICAgY29uc3QgcHJlTWVzc2FnZSA9IGBCYWlkdSB0cmFuc2xhdGlvbiBzZXJ2aWNlJ3NgXG4gICAgY29uc3QgbGFzdE1lc3NhZ2UgPSBgc2hvdWxkbid0IGJlIGVtcHR5LmBcbiAgICB2YWxpZGF0b3IoW1xuICAgICAgeyB2YWx1ZTogYmFpZHVBcHBJZCwgbWVzc2FnZTogYCR7cHJlTWVzc2FnZX0gYXBwSWQgJHtsYXN0TWVzc2FnZX1gIH0sXG4gICAgICB7IHZhbHVlOiBiYWlkdVNlY3JldEtleSwgbWVzc2FnZTogYCR7cHJlTWVzc2FnZX0gc2VjcmV0S2V5ICR7bGFzdE1lc3NhZ2V9YCB9XG4gICAgXSwgKCkgPT4ge1xuICAgICAgY29uc3QgbG9hZGluZ0VsID0gdGhpcy5jcmVhdGVMb2FkaW5nRWxlbWVudCgpXG4gICAgICB0aGlzLmNyZWF0ZUJsb2NrVGl0bGVFbGVtZW50KGNvbnRhaW5lckVsLCAnQmFpZHUgdHJhbnNsYXRpb24gcmVzdWx0cycsICdiYWlkdScpXG4gICAgICAvLyBhZGQgb3ZlcmxheSBtYXNrXG4gICAgICBjb250YWluZXJFbC5hcHBlbmRDaGlsZChsb2FkaW5nRWwpXG4gICAgICBoYW5kbGVCYWlkdVRyYW5zbGF0ZSh0aGlzLnRleHQsIHsgdG86IHRoaXMuY3VzdG9tVG8uYmFpZHUgfHwgdG8sIGFwcElkOiBiYWlkdUFwcElkLCBzZWNyZXRLZXk6IGJhaWR1U2VjcmV0S2V5LCBmcm9tIH0sIChyZXM6IGFueSkgPT4ge1xuICAgICAgICBpZiAoaXNFbXB0eU9iamVjdChyZXMpKSB7XG4gICAgICAgICAgY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQodGhpcy5lbXB0eSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB7IHRyYW5zX3Jlc3VsdCwgZXJyb3JfY29kZSB9ID0gcmVzXG4gICAgICAgICAgY29uc29sZS5sb2cocmVzLCAnLy8vLy8vLy8vLy8vLy8vL3Jlcy8vLy8vLy8vLy8vLy8nKVxuICAgICAgICAgIGlmICh0cmFuc19yZXN1bHQpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lckVsLnJlbW92ZUNoaWxkKGxvYWRpbmdFbClcbiAgICAgICAgICAgIGNvbnN0IHJlc0RhdGEgPSB0cmFuc19yZXN1bHQubWFwKCh7IHNyYywgZHN0IH06IHsgc3JjOiBzdHJpbmcsIGRzdDogc3RyaW5nIH0pID0+ICh7XG4gICAgICAgICAgICAgIHRpdGxlOiBzcmMsXG4gICAgICAgICAgICAgIGV4cGxhaW46IGRzdFxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICByZXNEYXRhLmZvckVhY2goKGNvbnRlbnRPYmo6IHsgdGl0bGU6IHN0cmluZywgZXhwbGFpbjogc3RyaW5nIH0pID0+IHtcbiAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGVSZXN1bHRzR2VuZXJhdG9yKGNvbnRlbnRPYmosIGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm90aWNlSGFuZGxlcihgTm8gcmVzdWx0cyEgKENvZGUgJHtlcnJvcl9jb2RlfSlgKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cblx0dHJhbnNsYXRlIChjb250YWluZXJFbHM6IEVsZW1lbnRPYmplY3QpIHtcbiAgICBPYmplY3Qua2V5cyhjb250YWluZXJFbHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IHR5cGUgPSBrZXkucmVwbGFjZSgnRW5hYmxlJywgJycpIGFzIGtleW9mIHNlcnZpY2VUeXBlc1xuICAgICAgaWYgKHRoaXMudGV4dCAhPT0gdGhpcy5wcmV2VGV4dCB8fCB0aGlzLmN1c3RvbVRvW3R5cGVdICE9PSB0aGlzLmN1c3RvbVRvUHJlW3R5cGVdKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckVsID0gY29udGFpbmVyRWxzW2tleV1cbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKVxuXG4gICAgICAgIHN3aXRjaChrZXkpIHtcbiAgICAgICAgICBjYXNlICd5b3VkYW9FbmFibGUnOiB7XG4gICAgICAgICAgICB0aGlzLnlvdWRhb1RyYW5zbGF0ZUhhbmRsZXIoY29udGFpbmVyRWwpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlICdtaWNyb3NvZnRFbmFibGUnOiB7XG4gICAgICAgICAgICB0aGlzLm1pY3Jvc29mdFRyYW5zbGF0ZUhhbmRsZXIoY29udGFpbmVyRWwpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlICdiYWlkdUVuYWJsZSc6IHtcbiAgICAgICAgICAgIHRoaXMuYmFpZHVUcmFuc2xhdGVIYW5kbGVyKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDogYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3VzdG9tVG9QcmVbdHlwZV0gPSB0aGlzLmN1c3RvbVRvW3R5cGVdXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLnByZXZUZXh0ID0gdGhpcy50ZXh0XG5cdH1cblxuXHQvLyBwb2VuIG1vZGFsXG5cdG9uT3BlbiAoKSB7XG5cdFx0Y29uc3QgeyBjb250ZW50RWwsIHNldHRpbmdzIH0gPSB0aGlzXG4gICAgY29uc3QgZW5hYmxlS2V5cyA9IE9iamVjdC5rZXlzKHNldHRpbmdzKS5maWx0ZXIoa2V5ID0+IGtleS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdlbmFibGUnKSAmJiBzZXR0aW5nc1trZXkgYXMga2V5b2YgVHJhbnNsYXRvclNldHRpbmddKVxuXHRcdGNvbnRlbnRFbC5jcmVhdGVFbCgnaDEnLCB7IHRleHQ6ICdUcmFuc2xhdG9yJywgY2xzOiAndHJhbnNsYXRvcl90aXRsZScgfSlcblx0XHQvLyBzZWFyY2hcblx0XHRjb25zdCBzZXR0aW5nID0gbmV3IFNldHRpbmcoY29udGVudEVsKS5zZXRDbGFzcygndHJhbnNsYXRvcl9zZWFyY2gnKS5hZGRUZXh0KHRleHQgPT5cblx0XHRcdHRleHQuc2V0VmFsdWUodGhpcy50ZXh0KS5zZXRQbGFjZWhvbGRlcignVG8gYmUgdHJhbnNsYXRlZCcpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLnRleHQgPSB2YWx1ZVxuXHRcdFx0fSlcblx0XHQpXG4gICAgY29uc3QgY29udGFpbmVyRWxzOiBFbGVtZW50T2JqZWN0ID0gZW5hYmxlS2V5cy5yZWR1Y2UoKGVsczogRWxlbWVudE9iamVjdCwga2V5OiBzdHJpbmcpID0+IChcbiAgICAgIHsuLi5lbHMsIFtrZXldOiBjb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiBgdHJhbnNsYXRvcl9jb250YWluZXIgdHJhbnNsYXRvcl9jb250YWluZXItJHtrZXkucmVwbGFjZSgnRW5hYmxlJywgJycpfWAgfSl9XG4gICAgKSwge30pXG5cbiAgICBjb25zdCB0cmFuc2xhdG9ySGFuZGxlciA9ICgpOnZvaWQgPT4ge1xuICAgICAgaWYgKHRoaXMudGV4dCkge1xuICAgICAgICB0aGlzLnRyYW5zbGF0ZShjb250YWluZXJFbHMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBPYmplY3QudmFsdWVzKGNvbnRhaW5lckVscykuZm9yRWFjaChlbCA9PiBlbC5lbXB0eSgpKVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBzZXR0aW5nLmFkZEJ1dHRvbigoYnRuKSA9PlxuXHRcdFx0YnRuXG5cdFx0XHRcdC5zZXRJY29uKCdzZWFyY2gnKVxuXHRcdFx0XHQuc2V0Q3RhKClcblx0XHRcdFx0Lm9uQ2xpY2sodHJhbnNsYXRvckhhbmRsZXIpXG5cdFx0KVxuXG4gICAgaWYgKGRvY3VtZW50KSB7XG4gICAgICBkb2N1bWVudC5vbmtleWRvd24gPSBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50ICYmIGV2ZW50LmtleUNvZGUgPT09IDEzICYmIHRyYW5zbGF0b3JIYW5kbGVyKClcbiAgICAgIH1cbiAgICB9XG4gICAgXG5cdFx0dGhpcy50ZXh0ICYmIHRoaXMudHJhbnNsYXRlKGNvbnRhaW5lckVscylcblx0fVxuXG5cdC8vIGNsb3NlIG1vZGFsXG5cdG9uQ2xvc2UgKCkge1xuICAgIHRoaXMuY29udGVudEVsLmVtcHR5KClcbiAgICB0aGlzLnRleHQgPSB0aGlzLnByZXZUZXh0ID0gJydcblx0fVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUVBLFlBQU8sVUFBVSxjQUFjLElBQUksU0FBUztBQUMxQyxhQUFPLGdCQUFnQjtBQUNyQixZQUFJLE9BQU8sSUFBSSxNQUFNLFVBQVU7QUFDL0IsaUJBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxRQUFRLEtBQUs7QUFDcEMsZUFBSyxLQUFLLFVBQVU7QUFBQTtBQUV0QixlQUFPLEdBQUcsTUFBTSxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQ1I3QjtBQUFBO0FBQUE7QUFFQSxRQUFJLE9BQU87QUFJWCxRQUFJLFdBQVcsT0FBTyxVQUFVO0FBR2hDLFFBQUksU0FBVSxTQUFTLE9BQU87QUFFNUIsYUFBTyxTQUFTLE9BQU87QUFDckIsWUFBSSxNQUFNLFNBQVMsS0FBSztBQUN4QixlQUFPLE1BQU0sUUFBUyxPQUFNLE9BQU8sSUFBSSxNQUFNLEdBQUcsSUFBSTtBQUFBO0FBQUEsTUFFckQsT0FBTyxPQUFPO0FBRWpCLHdCQUFvQixNQUFNO0FBQ3hCLGFBQU8sS0FBSztBQUNaLGFBQU8sa0JBQWtCLE9BQU87QUFDOUIsZUFBTyxPQUFPLFdBQVc7QUFBQTtBQUFBO0FBVTdCLHFCQUFpQixLQUFLO0FBQ3BCLGFBQU8sTUFBTSxRQUFRO0FBQUE7QUFTdkIseUJBQXFCLEtBQUs7QUFDeEIsYUFBTyxPQUFPLFFBQVE7QUFBQTtBQVN4QixzQkFBa0IsS0FBSztBQUNyQixhQUFPLFFBQVEsUUFBUSxDQUFDLFlBQVksUUFBUSxJQUFJLGdCQUFnQixRQUFRLENBQUMsWUFBWSxJQUFJLGdCQUNwRixPQUFPLElBQUksWUFBWSxhQUFhLGNBQWMsSUFBSSxZQUFZLFNBQVM7QUFBQTtBQVVsRixRQUFJLGdCQUFnQixXQUFXO0FBUy9CLCtCQUEyQixLQUFLO0FBQzlCLFVBQUk7QUFDSixVQUFLLE9BQU8sZ0JBQWdCLGVBQWlCLFlBQVksUUFBUztBQUNoRSxpQkFBUyxZQUFZLE9BQU87QUFBQSxhQUN2QjtBQUNMLGlCQUFVLE9BQVMsSUFBSSxVQUFZLGNBQWMsSUFBSTtBQUFBO0FBRXZELGFBQU87QUFBQTtBQVNULHNCQUFrQixLQUFLO0FBQ3JCLGFBQU8sT0FBTyxRQUFRO0FBQUE7QUFTeEIsc0JBQWtCLEtBQUs7QUFDckIsYUFBTyxPQUFPLFFBQVE7QUFBQTtBQVN4Qix1QkFBa0IsS0FBSztBQUNyQixhQUFPLFFBQVEsUUFBUSxPQUFPLFFBQVE7QUFBQTtBQVN4QywyQkFBdUIsS0FBSztBQUMxQixVQUFJLE9BQU8sU0FBUyxVQUFVO0FBQzVCLGVBQU87QUFBQTtBQUdULFVBQUksWUFBWSxPQUFPLGVBQWU7QUFDdEMsYUFBTyxjQUFjLFFBQVEsY0FBYyxPQUFPO0FBQUE7QUFVcEQsUUFBSSxTQUFTLFdBQVc7QUFTeEIsUUFBSSxTQUFTLFdBQVc7QUFTeEIsUUFBSSxTQUFTLFdBQVc7QUFTeEIsUUFBSSxhQUFhLFdBQVc7QUFRNUIsd0JBQW9CLEtBQUs7QUFDdkIsYUFBTyxTQUFTLEtBQUssU0FBUztBQUFBO0FBU2hDLHNCQUFrQixLQUFLO0FBQ3JCLGFBQU8sVUFBUyxRQUFRLFdBQVcsSUFBSTtBQUFBO0FBU3pDLHdCQUFvQixPQUFPO0FBQ3pCLFVBQUksVUFBVTtBQUNkLGFBQU8sU0FDSixRQUFPLGFBQWEsY0FBYyxpQkFBaUIsWUFDcEQsU0FBUyxLQUFLLFdBQVcsV0FDeEIsV0FBVyxNQUFNLGFBQWEsTUFBTSxlQUFlO0FBQUE7QUFVeEQsUUFBSSxvQkFBb0IsV0FBVztBQVFuQyxrQkFBYyxLQUFLO0FBQ2pCLGFBQU8sSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFFBQVEsY0FBYztBQUFBO0FBa0IzRCxvQ0FBZ0M7QUFDOUIsVUFBSSxPQUFPLGNBQWMsZUFBZ0IsV0FBVSxZQUFZLGlCQUN0QixVQUFVLFlBQVksa0JBQ3RCLFVBQVUsWUFBWSxPQUFPO0FBQ3BFLGVBQU87QUFBQTtBQUVULGFBQ0UsT0FBTyxXQUFXLGVBQ2xCLE9BQU8sYUFBYTtBQUFBO0FBZ0J4QixxQkFBaUIsS0FBSyxJQUFJO0FBRXhCLFVBQUksUUFBUSxRQUFRLE9BQU8sUUFBUSxhQUFhO0FBQzlDO0FBQUE7QUFJRixVQUFJLE9BQU8sUUFBUSxVQUFVO0FBRTNCLGNBQU0sQ0FBQztBQUFBO0FBR1QsVUFBSSxRQUFRLE1BQU07QUFFaEIsaUJBQVMsSUFBSSxHQUFHLElBQUksSUFBSSxRQUFRLElBQUksR0FBRyxLQUFLO0FBQzFDLGFBQUcsS0FBSyxNQUFNLElBQUksSUFBSSxHQUFHO0FBQUE7QUFBQSxhQUV0QjtBQUVMLGlCQUFTLE9BQU8sS0FBSztBQUNuQixjQUFJLE9BQU8sVUFBVSxlQUFlLEtBQUssS0FBSyxNQUFNO0FBQ2xELGVBQUcsS0FBSyxNQUFNLElBQUksTUFBTSxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUF1QnJDLHFCQUE0QztBQUMxQyxVQUFJLFNBQVM7QUFDYiwyQkFBcUIsS0FBSyxLQUFLO0FBQzdCLFlBQUksY0FBYyxPQUFPLFNBQVMsY0FBYyxNQUFNO0FBQ3BELGlCQUFPLE9BQU8sTUFBTSxPQUFPLE1BQU07QUFBQSxtQkFDeEIsY0FBYyxNQUFNO0FBQzdCLGlCQUFPLE9BQU8sTUFBTSxJQUFJO0FBQUEsbUJBQ2YsUUFBUSxNQUFNO0FBQ3ZCLGlCQUFPLE9BQU8sSUFBSTtBQUFBLGVBQ2I7QUFDTCxpQkFBTyxPQUFPO0FBQUE7QUFBQTtBQUlsQixlQUFTLElBQUksR0FBRyxJQUFJLFVBQVUsUUFBUSxJQUFJLEdBQUcsS0FBSztBQUNoRCxnQkFBUSxVQUFVLElBQUk7QUFBQTtBQUV4QixhQUFPO0FBQUE7QUFXVCxvQkFBZ0IsR0FBRyxHQUFHLFNBQVM7QUFDN0IsY0FBUSxHQUFHLHFCQUFxQixLQUFLLEtBQUs7QUFDeEMsWUFBSSxXQUFXLE9BQU8sUUFBUSxZQUFZO0FBQ3hDLFlBQUUsT0FBTyxLQUFLLEtBQUs7QUFBQSxlQUNkO0FBQ0wsWUFBRSxPQUFPO0FBQUE7QUFBQTtBQUdiLGFBQU87QUFBQTtBQVNULHNCQUFrQixTQUFTO0FBQ3pCLFVBQUksUUFBUSxXQUFXLE9BQU8sT0FBUTtBQUNwQyxrQkFBVSxRQUFRLE1BQU07QUFBQTtBQUUxQixhQUFPO0FBQUE7QUFXVCxzQkFBa0IsYUFBYSxrQkFBa0IsT0FBTyxhQUFhO0FBQ25FLGtCQUFZLFlBQVksT0FBTyxPQUFPLGlCQUFpQixXQUFXO0FBQ2xFLGtCQUFZLFVBQVUsY0FBYztBQUNwQyxlQUFTLE9BQU8sT0FBTyxZQUFZLFdBQVc7QUFBQTtBQVdoRCwwQkFBc0IsV0FBVyxTQUFTLFFBQVE7QUFDaEQsVUFBSTtBQUNKLFVBQUk7QUFDSixVQUFJO0FBQ0osVUFBSSxTQUFTO0FBRWIsZ0JBQVUsV0FBVztBQUVyQixTQUFHO0FBQ0QsZ0JBQVEsT0FBTyxvQkFBb0I7QUFDbkMsWUFBSSxNQUFNO0FBQ1YsZUFBTyxNQUFNLEdBQUc7QUFDZCxpQkFBTyxNQUFNO0FBQ2IsY0FBSSxDQUFDLE9BQU8sT0FBTztBQUNqQixvQkFBUSxRQUFRLFVBQVU7QUFDMUIsbUJBQU8sUUFBUTtBQUFBO0FBQUE7QUFHbkIsb0JBQVksT0FBTyxlQUFlO0FBQUEsZUFDM0IsYUFBYyxFQUFDLFVBQVUsT0FBTyxXQUFXLGFBQWEsY0FBYyxPQUFPO0FBRXRGLGFBQU87QUFBQTtBQVVULHNCQUFrQixLQUFLLGNBQWMsVUFBVTtBQUM3QyxZQUFNLE9BQU87QUFDYixVQUFJLGFBQWEsVUFBYSxXQUFXLElBQUksUUFBUTtBQUNuRCxtQkFBVyxJQUFJO0FBQUE7QUFFakIsa0JBQVksYUFBYTtBQUN6QixVQUFJLFlBQVksSUFBSSxRQUFRLGNBQWM7QUFDMUMsYUFBTyxjQUFjLE1BQU0sY0FBYztBQUFBO0FBUzNDLHFCQUFpQixPQUFPO0FBQ3RCLFVBQUksQ0FBQztBQUFPLGVBQU87QUFDbkIsVUFBSSxJQUFJLE1BQU07QUFDZCxVQUFJLFlBQVk7QUFBSSxlQUFPO0FBQzNCLFVBQUksTUFBTSxJQUFJLE1BQU07QUFDcEIsYUFBTyxNQUFNLEdBQUc7QUFDZCxZQUFJLEtBQUssTUFBTTtBQUFBO0FBRWpCLGFBQU87QUFBQTtBQUlULFFBQUksZUFBZ0IsU0FBUyxZQUFZO0FBRXZDLGFBQU8sU0FBUyxPQUFPO0FBQ3JCLGVBQU8sY0FBYyxpQkFBaUI7QUFBQTtBQUFBLE1BRXZDLE9BQU8sZUFBZSxlQUFlLE9BQU8sZUFBZTtBQUU5RCxZQUFPLFVBQVU7QUFBQSxNQUNmO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQSxVQUFVO0FBQUEsTUFDVjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBO0FBQUE7QUFBQTs7O0FDcGRGO0FBQUE7QUFBQTtBQUVBLFFBQUksUUFBUTtBQUVaLG9CQUFnQixLQUFLO0FBQ25CLGFBQU8sbUJBQW1CLEtBQ3hCLFFBQVEsU0FBUyxLQUNqQixRQUFRLFFBQVEsS0FDaEIsUUFBUSxTQUFTLEtBQ2pCLFFBQVEsUUFBUSxLQUNoQixRQUFRLFNBQVMsS0FDakIsUUFBUSxTQUFTO0FBQUE7QUFVckIsWUFBTyxVQUFVLGtCQUFrQixLQUFLLFFBQVEsa0JBQWtCO0FBRWhFLFVBQUksQ0FBQyxRQUFRO0FBQ1gsZUFBTztBQUFBO0FBR1QsVUFBSTtBQUNKLFVBQUksa0JBQWtCO0FBQ3BCLDJCQUFtQixpQkFBaUI7QUFBQSxpQkFDM0IsTUFBTSxrQkFBa0IsU0FBUztBQUMxQywyQkFBbUIsT0FBTztBQUFBLGFBQ3JCO0FBQ0wsWUFBSSxRQUFRO0FBRVosY0FBTSxRQUFRLFFBQVEsbUJBQW1CLEtBQUssS0FBSztBQUNqRCxjQUFJLFFBQVEsUUFBUSxPQUFPLFFBQVEsYUFBYTtBQUM5QztBQUFBO0FBR0YsY0FBSSxNQUFNLFFBQVEsTUFBTTtBQUN0QixrQkFBTSxNQUFNO0FBQUEsaUJBQ1A7QUFDTCxrQkFBTSxDQUFDO0FBQUE7QUFHVCxnQkFBTSxRQUFRLEtBQUssb0JBQW9CLEdBQUc7QUFDeEMsZ0JBQUksTUFBTSxPQUFPLElBQUk7QUFDbkIsa0JBQUksRUFBRTtBQUFBLHVCQUNHLE1BQU0sU0FBUyxJQUFJO0FBQzVCLGtCQUFJLEtBQUssVUFBVTtBQUFBO0FBRXJCLGtCQUFNLEtBQUssT0FBTyxPQUFPLE1BQU0sT0FBTztBQUFBO0FBQUE7QUFJMUMsMkJBQW1CLE1BQU0sS0FBSztBQUFBO0FBR2hDLFVBQUksa0JBQWtCO0FBQ3BCLFlBQUksZ0JBQWdCLElBQUksUUFBUTtBQUNoQyxZQUFJLGtCQUFrQixJQUFJO0FBQ3hCLGdCQUFNLElBQUksTUFBTSxHQUFHO0FBQUE7QUFHckIsZUFBUSxLQUFJLFFBQVEsU0FBUyxLQUFLLE1BQU0sT0FBTztBQUFBO0FBR2pELGFBQU87QUFBQTtBQUFBO0FBQUE7OztBQ3BFVDtBQUFBO0FBQUE7QUFFQSxRQUFJLFFBQVE7QUFFWixrQ0FBOEI7QUFDNUIsV0FBSyxXQUFXO0FBQUE7QUFXbEIsdUJBQW1CLFVBQVUsTUFBTSxhQUFhLFdBQVcsVUFBVSxTQUFTO0FBQzVFLFdBQUssU0FBUyxLQUFLO0FBQUEsUUFDakI7QUFBQSxRQUNBO0FBQUEsUUFDQSxhQUFhLFVBQVUsUUFBUSxjQUFjO0FBQUEsUUFDN0MsU0FBUyxVQUFVLFFBQVEsVUFBVTtBQUFBO0FBRXZDLGFBQU8sS0FBSyxTQUFTLFNBQVM7QUFBQTtBQVFoQyx1QkFBbUIsVUFBVSxRQUFRLGVBQWUsSUFBSTtBQUN0RCxVQUFJLEtBQUssU0FBUyxLQUFLO0FBQ3JCLGFBQUssU0FBUyxNQUFNO0FBQUE7QUFBQTtBQVl4Qix1QkFBbUIsVUFBVSxVQUFVLGlCQUFpQixJQUFJO0FBQzFELFlBQU0sUUFBUSxLQUFLLFVBQVUsd0JBQXdCLEdBQUc7QUFDdEQsWUFBSSxNQUFNLE1BQU07QUFDZCxhQUFHO0FBQUE7QUFBQTtBQUFBO0FBS1QsWUFBTyxVQUFVO0FBQUE7QUFBQTs7O0FDckRqQjtBQUFBO0FBQUE7QUFFQSxRQUFJLFFBQVE7QUFFWixZQUFPLFVBQVUsNkJBQTZCLFNBQVMsZ0JBQWdCO0FBQ3JFLFlBQU0sUUFBUSxTQUFTLHVCQUF1QixPQUFPLE1BQU07QUFDekQsWUFBSSxTQUFTLGtCQUFrQixLQUFLLGtCQUFrQixlQUFlLGVBQWU7QUFDbEYsa0JBQVEsa0JBQWtCO0FBQzFCLGlCQUFPLFFBQVE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUNSckI7QUFBQTtBQUFBO0FBRUEsUUFBSSxRQUFRO0FBWVosd0JBQW9CLFNBQVMsTUFBTSxRQUFRLFVBQVMsVUFBVTtBQUM1RCxZQUFNLEtBQUs7QUFDWCxXQUFLLFVBQVU7QUFDZixXQUFLLE9BQU87QUFDWixjQUFTLE1BQUssT0FBTztBQUNyQixnQkFBVyxNQUFLLFNBQVM7QUFDekIsa0JBQVksTUFBSyxVQUFVO0FBQzNCLGtCQUFhLE1BQUssV0FBVztBQUFBO0FBRy9CLFVBQU0sU0FBUyxZQUFZLE9BQU87QUFBQSxNQUNoQyxRQUFRLGtCQUFrQjtBQUN4QixlQUFPO0FBQUEsVUFFTCxTQUFTLEtBQUs7QUFBQSxVQUNkLE1BQU0sS0FBSztBQUFBLFVBRVgsYUFBYSxLQUFLO0FBQUEsVUFDbEIsUUFBUSxLQUFLO0FBQUEsVUFFYixVQUFVLEtBQUs7QUFBQSxVQUNmLFlBQVksS0FBSztBQUFBLFVBQ2pCLGNBQWMsS0FBSztBQUFBLFVBQ25CLE9BQU8sS0FBSztBQUFBLFVBRVosUUFBUSxLQUFLO0FBQUEsVUFDYixNQUFNLEtBQUs7QUFBQSxVQUNYLFFBQVEsS0FBSyxZQUFZLEtBQUssU0FBUyxTQUFTLEtBQUssU0FBUyxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBSzdFLFFBQUksWUFBWSxXQUFXO0FBQzNCLFFBQUksY0FBYztBQUVsQjtBQUFBLE1BQ0U7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUVBLFFBQVEsU0FBUyxNQUFNO0FBQ3ZCLGtCQUFZLFFBQVEsRUFBQyxPQUFPO0FBQUE7QUFHOUIsV0FBTyxpQkFBaUIsWUFBWTtBQUNwQyxXQUFPLGVBQWUsV0FBVyxnQkFBZ0IsRUFBQyxPQUFPO0FBR3pELGVBQVcsT0FBTyxTQUFTLE9BQU8sTUFBTSxRQUFRLFVBQVMsVUFBVSxhQUFhO0FBQzlFLFVBQUksYUFBYSxPQUFPLE9BQU87QUFFL0IsWUFBTSxhQUFhLE9BQU8sWUFBWSxnQkFBZ0IsS0FBSztBQUN6RCxlQUFPLFFBQVEsTUFBTTtBQUFBO0FBR3ZCLGlCQUFXLEtBQUssWUFBWSxNQUFNLFNBQVMsTUFBTSxRQUFRLFVBQVM7QUFFbEUsaUJBQVcsT0FBTyxNQUFNO0FBRXhCLHFCQUFlLE9BQU8sT0FBTyxZQUFZO0FBRXpDLGFBQU87QUFBQTtBQUdULFlBQU8sVUFBVTtBQUFBO0FBQUE7OztBQ3JGakI7QUFBQTtBQUFBO0FBRUEsWUFBTyxVQUFVO0FBQUEsTUFDZixtQkFBbUI7QUFBQSxNQUNuQixtQkFBbUI7QUFBQSxNQUNuQixxQkFBcUI7QUFBQTtBQUFBO0FBQUE7OztBQ0x2QjtBQUFBO0FBQUE7QUFFQSxRQUFJLFFBQVE7QUFTWix3QkFBb0IsS0FBSyxVQUFVO0FBRWpDLGlCQUFXLFlBQVksSUFBSTtBQUUzQixVQUFJLFFBQVE7QUFFWiw0QkFBc0IsT0FBTztBQUMzQixZQUFJLFVBQVU7QUFBTSxpQkFBTztBQUUzQixZQUFJLE1BQU0sT0FBTyxRQUFRO0FBQ3ZCLGlCQUFPLE1BQU07QUFBQTtBQUdmLFlBQUksTUFBTSxjQUFjLFVBQVUsTUFBTSxhQUFhLFFBQVE7QUFDM0QsaUJBQU8sT0FBTyxTQUFTLGFBQWEsSUFBSSxLQUFLLENBQUMsVUFBVSxPQUFPLEtBQUs7QUFBQTtBQUd0RSxlQUFPO0FBQUE7QUFHVCxxQkFBZSxNQUFNLFdBQVc7QUFDOUIsWUFBSSxNQUFNLGNBQWMsU0FBUyxNQUFNLFFBQVEsT0FBTztBQUNwRCxjQUFJLE1BQU0sUUFBUSxVQUFVLElBQUk7QUFDOUIsa0JBQU0sTUFBTSxvQ0FBb0M7QUFBQTtBQUdsRCxnQkFBTSxLQUFLO0FBRVgsZ0JBQU0sUUFBUSxNQUFNLGNBQWMsT0FBTyxLQUFLO0FBQzVDLGdCQUFJLE1BQU0sWUFBWTtBQUFRO0FBQzlCLGdCQUFJLFVBQVUsWUFBWSxZQUFZLE1BQU0sTUFBTTtBQUNsRCxnQkFBSTtBQUVKLGdCQUFJLFNBQVMsQ0FBQyxhQUFhLE9BQU8sVUFBVSxVQUFVO0FBQ3BELGtCQUFJLE1BQU0sU0FBUyxLQUFLLE9BQU87QUFFN0Isd0JBQVEsS0FBSyxVQUFVO0FBQUEseUJBQ2QsTUFBTSxTQUFTLEtBQUssU0FBVSxPQUFNLE1BQU0sUUFBUSxTQUFTO0FBRXBFLG9CQUFJLFFBQVEsU0FBUyxJQUFJO0FBQ3ZCLG1CQUFDLE1BQU0sWUFBWSxPQUFPLFNBQVMsT0FBTyxTQUFTLGFBQWE7QUFBQTtBQUVsRTtBQUFBO0FBQUE7QUFJSixrQkFBTSxPQUFPO0FBQUE7QUFHZixnQkFBTTtBQUFBLGVBQ0Q7QUFDTCxtQkFBUyxPQUFPLFdBQVcsYUFBYTtBQUFBO0FBQUE7QUFJNUMsWUFBTTtBQUVOLGFBQU87QUFBQTtBQUdULFlBQU8sVUFBVTtBQUFBO0FBQUE7OztBQ3ZFakI7QUFBQTtBQUFBO0FBRUEsUUFBSSxhQUFhO0FBU2pCLFlBQU8sVUFBVSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVU7QUFDMUQsVUFBSSxpQkFBaUIsU0FBUyxPQUFPO0FBQ3JDLFVBQUksQ0FBQyxTQUFTLFVBQVUsQ0FBQyxrQkFBa0IsZUFBZSxTQUFTLFNBQVM7QUFDMUUsZ0JBQVE7QUFBQSxhQUNIO0FBQ0wsZUFBTyxJQUFJLFdBQ1QscUNBQXFDLFNBQVMsUUFDOUMsQ0FBQyxXQUFXLGlCQUFpQixXQUFXLGtCQUFrQixLQUFLLE1BQU0sU0FBUyxTQUFTLE9BQU8sSUFDOUYsU0FBUyxRQUNULFNBQVMsU0FDVDtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUNyQk47QUFBQTtBQUFBO0FBRUEsUUFBSSxRQUFRO0FBRVosWUFBTyxVQUNMLE1BQU0seUJBR0gsOEJBQThCO0FBQzdCLGFBQU87QUFBQSxRQUNMLE9BQU8sZUFBZSxNQUFNLE9BQU8sU0FBUyxNQUFNLFFBQVEsUUFBUTtBQUNoRSxjQUFJLFNBQVM7QUFDYixpQkFBTyxLQUFLLE9BQU8sTUFBTSxtQkFBbUI7QUFFNUMsY0FBSSxNQUFNLFNBQVMsVUFBVTtBQUMzQixtQkFBTyxLQUFLLGFBQWEsSUFBSSxLQUFLLFNBQVM7QUFBQTtBQUc3QyxjQUFJLE1BQU0sU0FBUyxPQUFPO0FBQ3hCLG1CQUFPLEtBQUssVUFBVTtBQUFBO0FBR3hCLGNBQUksTUFBTSxTQUFTLFNBQVM7QUFDMUIsbUJBQU8sS0FBSyxZQUFZO0FBQUE7QUFHMUIsY0FBSSxXQUFXLE1BQU07QUFDbkIsbUJBQU8sS0FBSztBQUFBO0FBR2QsbUJBQVMsU0FBUyxPQUFPLEtBQUs7QUFBQTtBQUFBLFFBR2hDLE1BQU0sY0FBYyxNQUFNO0FBQ3hCLGNBQUksUUFBUSxTQUFTLE9BQU8sTUFBTSxJQUFJLE9BQU8sZUFBZSxPQUFPO0FBQ25FLGlCQUFRLFFBQVEsbUJBQW1CLE1BQU0sTUFBTTtBQUFBO0FBQUEsUUFHakQsUUFBUSxnQkFBZ0IsTUFBTTtBQUM1QixlQUFLLE1BQU0sTUFBTSxJQUFJLEtBQUssUUFBUTtBQUFBO0FBQUE7QUFBQSxVQU12QyxpQ0FBaUM7QUFDaEMsYUFBTztBQUFBLFFBQ0wsT0FBTyxpQkFBaUI7QUFBQTtBQUFBLFFBQ3hCLE1BQU0sZ0JBQWdCO0FBQUUsaUJBQU87QUFBQTtBQUFBLFFBQy9CLFFBQVEsa0JBQWtCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FDakRsQztBQUFBO0FBQUE7QUFRQSxZQUFPLFVBQVUsdUJBQXVCLEtBQUs7QUFJM0MsYUFBTyw4QkFBOEIsS0FBSztBQUFBO0FBQUE7QUFBQTs7O0FDWjVDO0FBQUE7QUFBQTtBQVNBLFlBQU8sVUFBVSxxQkFBcUIsU0FBUyxhQUFhO0FBQzFELGFBQU8sY0FDSCxRQUFRLFFBQVEsUUFBUSxNQUFNLE1BQU0sWUFBWSxRQUFRLFFBQVEsTUFDaEU7QUFBQTtBQUFBO0FBQUE7OztBQ1pOO0FBQUE7QUFBQTtBQUVBLFFBQUksZ0JBQWdCO0FBQ3BCLFFBQUksY0FBYztBQVdsQixZQUFPLFVBQVUsdUJBQXVCLFNBQVMsY0FBYztBQUM3RCxVQUFJLFdBQVcsQ0FBQyxjQUFjLGVBQWU7QUFDM0MsZUFBTyxZQUFZLFNBQVM7QUFBQTtBQUU5QixhQUFPO0FBQUE7QUFBQTtBQUFBOzs7QUNsQlQ7QUFBQTtBQUFBO0FBRUEsUUFBSSxRQUFRO0FBSVosUUFBSSxvQkFBb0I7QUFBQSxNQUN0QjtBQUFBLE1BQU87QUFBQSxNQUFpQjtBQUFBLE1BQWtCO0FBQUEsTUFBZ0I7QUFBQSxNQUMxRDtBQUFBLE1BQVc7QUFBQSxNQUFRO0FBQUEsTUFBUTtBQUFBLE1BQXFCO0FBQUEsTUFDaEQ7QUFBQSxNQUFpQjtBQUFBLE1BQVk7QUFBQSxNQUFnQjtBQUFBLE1BQzdDO0FBQUEsTUFBVztBQUFBLE1BQWU7QUFBQTtBQWdCNUIsWUFBTyxVQUFVLHNCQUFzQixTQUFTO0FBQzlDLFVBQUksU0FBUztBQUNiLFVBQUk7QUFDSixVQUFJO0FBQ0osVUFBSTtBQUVKLFVBQUksQ0FBQyxTQUFTO0FBQUUsZUFBTztBQUFBO0FBRXZCLFlBQU0sUUFBUSxRQUFRLE1BQU0sT0FBTyxnQkFBZ0IsTUFBTTtBQUN2RCxZQUFJLEtBQUssUUFBUTtBQUNqQixjQUFNLE1BQU0sS0FBSyxLQUFLLE9BQU8sR0FBRyxJQUFJO0FBQ3BDLGNBQU0sTUFBTSxLQUFLLEtBQUssT0FBTyxJQUFJO0FBRWpDLFlBQUksS0FBSztBQUNQLGNBQUksT0FBTyxRQUFRLGtCQUFrQixRQUFRLFFBQVEsR0FBRztBQUN0RDtBQUFBO0FBRUYsY0FBSSxRQUFRLGNBQWM7QUFDeEIsbUJBQU8sT0FBUSxRQUFPLE9BQU8sT0FBTyxPQUFPLElBQUksT0FBTyxDQUFDO0FBQUEsaUJBQ2xEO0FBQ0wsbUJBQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sTUFBTTtBQUFBO0FBQUE7QUFBQTtBQUs3RCxhQUFPO0FBQUE7QUFBQTtBQUFBOzs7QUNuRFQ7QUFBQTtBQUFBO0FBRUEsUUFBSSxRQUFRO0FBRVosWUFBTyxVQUNMLE1BQU0seUJBSUgsOEJBQThCO0FBQzdCLFVBQUksT0FBTyxrQkFBa0IsS0FBSyxVQUFVO0FBQzVDLFVBQUksaUJBQWlCLFNBQVMsY0FBYztBQUM1QyxVQUFJO0FBUUosMEJBQW9CLEtBQUs7QUFDdkIsWUFBSSxPQUFPO0FBRVgsWUFBSSxNQUFNO0FBRVIseUJBQWUsYUFBYSxRQUFRO0FBQ3BDLGlCQUFPLGVBQWU7QUFBQTtBQUd4Qix1QkFBZSxhQUFhLFFBQVE7QUFHcEMsZUFBTztBQUFBLFVBQ0wsTUFBTSxlQUFlO0FBQUEsVUFDckIsVUFBVSxlQUFlLFdBQVcsZUFBZSxTQUFTLFFBQVEsTUFBTSxNQUFNO0FBQUEsVUFDaEYsTUFBTSxlQUFlO0FBQUEsVUFDckIsUUFBUSxlQUFlLFNBQVMsZUFBZSxPQUFPLFFBQVEsT0FBTyxNQUFNO0FBQUEsVUFDM0UsTUFBTSxlQUFlLE9BQU8sZUFBZSxLQUFLLFFBQVEsTUFBTSxNQUFNO0FBQUEsVUFDcEUsVUFBVSxlQUFlO0FBQUEsVUFDekIsTUFBTSxlQUFlO0FBQUEsVUFDckIsVUFBVyxlQUFlLFNBQVMsT0FBTyxPQUFPLE1BQy9DLGVBQWUsV0FDZixNQUFNLGVBQWU7QUFBQTtBQUFBO0FBSTNCLGtCQUFZLFdBQVcsT0FBTyxTQUFTO0FBUXZDLGFBQU8seUJBQXlCLFlBQVk7QUFDMUMsWUFBSSxTQUFVLE1BQU0sU0FBUyxjQUFlLFdBQVcsY0FBYztBQUNyRSxlQUFRLE9BQU8sYUFBYSxVQUFVLFlBQ2xDLE9BQU8sU0FBUyxVQUFVO0FBQUE7QUFBQSxVQUtqQyxpQ0FBaUM7QUFDaEMsYUFBTywyQkFBMkI7QUFDaEMsZUFBTztBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUNoRWY7QUFBQTtBQUFBO0FBRUEsUUFBSSxhQUFhO0FBQ2pCLFFBQUksUUFBUTtBQVFaLDJCQUF1QixTQUFTO0FBRTlCLGlCQUFXLEtBQUssTUFBTSxXQUFXLE9BQU8sYUFBYSxTQUFTLFdBQVc7QUFDekUsV0FBSyxPQUFPO0FBQUE7QUFHZCxVQUFNLFNBQVMsZUFBZSxZQUFZO0FBQUEsTUFDeEMsWUFBWTtBQUFBO0FBR2QsWUFBTyxVQUFVO0FBQUE7QUFBQTs7O0FDckJqQjtBQUFBO0FBQUE7QUFFQSxZQUFPLFVBQVUsdUJBQXVCLEtBQUs7QUFDM0MsVUFBSSxRQUFRLDRCQUE0QixLQUFLO0FBQzdDLGFBQU8sU0FBUyxNQUFNLE1BQU07QUFBQTtBQUFBO0FBQUE7OztBQ0o5QjtBQUFBO0FBQUE7QUFFQSxRQUFJLFFBQVE7QUFDWixRQUFJLFNBQVM7QUFDYixRQUFJLFVBQVU7QUFDZCxRQUFJLFdBQVc7QUFDZixRQUFJLGdCQUFnQjtBQUNwQixRQUFJLGVBQWU7QUFDbkIsUUFBSSxrQkFBa0I7QUFDdEIsUUFBSSx1QkFBdUI7QUFDM0IsUUFBSSxhQUFhO0FBQ2pCLFFBQUksZ0JBQWdCO0FBQ3BCLFFBQUksZ0JBQWdCO0FBRXBCLFlBQU8sVUFBVSxvQkFBb0IsUUFBUTtBQUMzQyxhQUFPLElBQUksUUFBUSw0QkFBNEIsU0FBUyxRQUFRO0FBQzlELFlBQUksY0FBYyxPQUFPO0FBQ3pCLFlBQUksaUJBQWlCLE9BQU87QUFDNUIsWUFBSSxlQUFlLE9BQU87QUFDMUIsWUFBSTtBQUNKLHdCQUFnQjtBQUNkLGNBQUksT0FBTyxhQUFhO0FBQ3RCLG1CQUFPLFlBQVksWUFBWTtBQUFBO0FBR2pDLGNBQUksT0FBTyxRQUFRO0FBQ2pCLG1CQUFPLE9BQU8sb0JBQW9CLFNBQVM7QUFBQTtBQUFBO0FBSS9DLFlBQUksTUFBTSxXQUFXLGdCQUFnQixNQUFNLHdCQUF3QjtBQUNqRSxpQkFBTyxlQUFlO0FBQUE7QUFHeEIsWUFBSSxXQUFVLElBQUk7QUFHbEIsWUFBSSxPQUFPLE1BQU07QUFDZixjQUFJLFdBQVcsT0FBTyxLQUFLLFlBQVk7QUFDdkMsY0FBSSxXQUFXLE9BQU8sS0FBSyxXQUFXLFNBQVMsbUJBQW1CLE9BQU8sS0FBSyxhQUFhO0FBQzNGLHlCQUFlLGdCQUFnQixXQUFXLEtBQUssV0FBVyxNQUFNO0FBQUE7QUFHbEUsWUFBSSxXQUFXLGNBQWMsT0FBTyxTQUFTLE9BQU87QUFFcEQsaUJBQVEsS0FBSyxPQUFPLE9BQU8sZUFBZSxTQUFTLFVBQVUsT0FBTyxRQUFRLE9BQU8sbUJBQW1CO0FBR3RHLGlCQUFRLFVBQVUsT0FBTztBQUV6Qiw2QkFBcUI7QUFDbkIsY0FBSSxDQUFDLFVBQVM7QUFDWjtBQUFBO0FBR0YsY0FBSSxrQkFBa0IsMkJBQTJCLFdBQVUsYUFBYSxTQUFRLDJCQUEyQjtBQUMzRyxjQUFJLGVBQWUsQ0FBQyxnQkFBZ0IsaUJBQWlCLFVBQVcsaUJBQWlCLFNBQy9FLFNBQVEsZUFBZSxTQUFRO0FBQ2pDLGNBQUksV0FBVztBQUFBLFlBQ2IsTUFBTTtBQUFBLFlBQ04sUUFBUSxTQUFRO0FBQUEsWUFDaEIsWUFBWSxTQUFRO0FBQUEsWUFDcEIsU0FBUztBQUFBLFlBQ1Q7QUFBQSxZQUNBLFNBQVM7QUFBQTtBQUdYLGlCQUFPLGtCQUFrQixPQUFPO0FBQzlCLG9CQUFRO0FBQ1I7QUFBQSxhQUNDLGlCQUFpQixLQUFLO0FBQ3ZCLG1CQUFPO0FBQ1A7QUFBQSxhQUNDO0FBR0gscUJBQVU7QUFBQTtBQUdaLFlBQUksZUFBZSxVQUFTO0FBRTFCLG1CQUFRLFlBQVk7QUFBQSxlQUNmO0FBRUwsbUJBQVEscUJBQXFCLHNCQUFzQjtBQUNqRCxnQkFBSSxDQUFDLFlBQVcsU0FBUSxlQUFlLEdBQUc7QUFDeEM7QUFBQTtBQU9GLGdCQUFJLFNBQVEsV0FBVyxLQUFLLENBQUUsVUFBUSxlQUFlLFNBQVEsWUFBWSxRQUFRLGFBQWEsSUFBSTtBQUNoRztBQUFBO0FBSUYsdUJBQVc7QUFBQTtBQUFBO0FBS2YsaUJBQVEsVUFBVSx1QkFBdUI7QUFDdkMsY0FBSSxDQUFDLFVBQVM7QUFDWjtBQUFBO0FBR0YsaUJBQU8sSUFBSSxXQUFXLG1CQUFtQixXQUFXLGNBQWMsUUFBUTtBQUcxRSxxQkFBVTtBQUFBO0FBSVosaUJBQVEsVUFBVSx1QkFBdUI7QUFHdkMsaUJBQU8sSUFBSSxXQUFXLGlCQUFpQixXQUFXLGFBQWEsUUFBUSxVQUFTO0FBR2hGLHFCQUFVO0FBQUE7QUFJWixpQkFBUSxZQUFZLHlCQUF5QjtBQUMzQyxjQUFJLHNCQUFzQixPQUFPLFVBQVUsZ0JBQWdCLE9BQU8sVUFBVSxnQkFBZ0I7QUFDNUYsY0FBSSxlQUFlLE9BQU8sZ0JBQWdCO0FBQzFDLGNBQUksT0FBTyxxQkFBcUI7QUFDOUIsa0NBQXNCLE9BQU87QUFBQTtBQUUvQixpQkFBTyxJQUFJLFdBQ1QscUJBQ0EsYUFBYSxzQkFBc0IsV0FBVyxZQUFZLFdBQVcsY0FDckUsUUFDQTtBQUdGLHFCQUFVO0FBQUE7QUFNWixZQUFJLE1BQU0sd0JBQXdCO0FBRWhDLGNBQUksWUFBYSxRQUFPLG1CQUFtQixnQkFBZ0IsY0FBYyxPQUFPLGlCQUM5RSxRQUFRLEtBQUssT0FBTyxrQkFDcEI7QUFFRixjQUFJLFdBQVc7QUFDYiwyQkFBZSxPQUFPLGtCQUFrQjtBQUFBO0FBQUE7QUFLNUMsWUFBSSxzQkFBc0IsVUFBUztBQUNqQyxnQkFBTSxRQUFRLGdCQUFnQiwwQkFBMEIsS0FBSyxLQUFLO0FBQ2hFLGdCQUFJLE9BQU8sZ0JBQWdCLGVBQWUsSUFBSSxrQkFBa0IsZ0JBQWdCO0FBRTlFLHFCQUFPLGVBQWU7QUFBQSxtQkFDakI7QUFFTCx1QkFBUSxpQkFBaUIsS0FBSztBQUFBO0FBQUE7QUFBQTtBQU1wQyxZQUFJLENBQUMsTUFBTSxZQUFZLE9BQU8sa0JBQWtCO0FBQzlDLG1CQUFRLGtCQUFrQixDQUFDLENBQUMsT0FBTztBQUFBO0FBSXJDLFlBQUksZ0JBQWdCLGlCQUFpQixRQUFRO0FBQzNDLG1CQUFRLGVBQWUsT0FBTztBQUFBO0FBSWhDLFlBQUksT0FBTyxPQUFPLHVCQUF1QixZQUFZO0FBQ25ELG1CQUFRLGlCQUFpQixZQUFZLE9BQU87QUFBQTtBQUk5QyxZQUFJLE9BQU8sT0FBTyxxQkFBcUIsY0FBYyxTQUFRLFFBQVE7QUFDbkUsbUJBQVEsT0FBTyxpQkFBaUIsWUFBWSxPQUFPO0FBQUE7QUFHckQsWUFBSSxPQUFPLGVBQWUsT0FBTyxRQUFRO0FBR3ZDLHVCQUFhLFNBQVMsUUFBUTtBQUM1QixnQkFBSSxDQUFDLFVBQVM7QUFDWjtBQUFBO0FBRUYsbUJBQU8sQ0FBQyxVQUFXLFVBQVUsT0FBTyxPQUFRLElBQUksa0JBQWtCO0FBQ2xFLHFCQUFRO0FBQ1IsdUJBQVU7QUFBQTtBQUdaLGlCQUFPLGVBQWUsT0FBTyxZQUFZLFVBQVU7QUFDbkQsY0FBSSxPQUFPLFFBQVE7QUFDakIsbUJBQU8sT0FBTyxVQUFVLGVBQWUsT0FBTyxPQUFPLGlCQUFpQixTQUFTO0FBQUE7QUFBQTtBQUluRixZQUFJLENBQUMsYUFBYTtBQUNoQix3QkFBYztBQUFBO0FBR2hCLFlBQUksV0FBVyxjQUFjO0FBRTdCLFlBQUksWUFBWSxDQUFFLFFBQVEsU0FBUyxRQUFTLFFBQVEsY0FBYyxJQUFJO0FBQ3BFLGlCQUFPLElBQUksV0FBVywwQkFBMEIsV0FBVyxLQUFLLFdBQVcsaUJBQWlCO0FBQzVGO0FBQUE7QUFLRixpQkFBUSxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQzNOakI7QUFBQTtBQUNBLFlBQU8sVUFBVTtBQUFBO0FBQUE7OztBQ0RqQjtBQUFBO0FBQUE7QUFFQSxRQUFJLFFBQVE7QUFDWixRQUFJLHNCQUFzQjtBQUMxQixRQUFJLGFBQWE7QUFDakIsUUFBSSx1QkFBdUI7QUFDM0IsUUFBSSxhQUFhO0FBRWpCLFFBQUksdUJBQXVCO0FBQUEsTUFDekIsZ0JBQWdCO0FBQUE7QUFHbEIsbUNBQStCLFNBQVMsT0FBTztBQUM3QyxVQUFJLENBQUMsTUFBTSxZQUFZLFlBQVksTUFBTSxZQUFZLFFBQVEsa0JBQWtCO0FBQzdFLGdCQUFRLGtCQUFrQjtBQUFBO0FBQUE7QUFJOUIsaUNBQTZCO0FBQzNCLFVBQUk7QUFDSixVQUFJLE9BQU8sbUJBQW1CLGFBQWE7QUFFekMsa0JBQVU7QUFBQSxpQkFDRCxPQUFPLFlBQVksZUFBZSxPQUFPLFVBQVUsU0FBUyxLQUFLLGFBQWEsb0JBQW9CO0FBRTNHLGtCQUFVO0FBQUE7QUFFWixhQUFPO0FBQUE7QUFHVCw2QkFBeUIsVUFBVSxRQUFRLFNBQVM7QUFDbEQsVUFBSSxNQUFNLFNBQVMsV0FBVztBQUM1QixZQUFJO0FBQ0YsVUFBQyxXQUFVLEtBQUssT0FBTztBQUN2QixpQkFBTyxNQUFNLEtBQUs7QUFBQSxpQkFDWCxHQUFQO0FBQ0EsY0FBSSxFQUFFLFNBQVMsZUFBZTtBQUM1QixrQkFBTTtBQUFBO0FBQUE7QUFBQTtBQUtaLGFBQVEsWUFBVyxLQUFLLFdBQVc7QUFBQTtBQUdyQyxRQUFJLFdBQVc7QUFBQSxNQUViLGNBQWM7QUFBQSxNQUVkLFNBQVM7QUFBQSxNQUVULGtCQUFrQixDQUFDLDBCQUEwQixNQUFNLFNBQVM7QUFDMUQsNEJBQW9CLFNBQVM7QUFDN0IsNEJBQW9CLFNBQVM7QUFFN0IsWUFBSSxNQUFNLFdBQVcsU0FDbkIsTUFBTSxjQUFjLFNBQ3BCLE1BQU0sU0FBUyxTQUNmLE1BQU0sU0FBUyxTQUNmLE1BQU0sT0FBTyxTQUNiLE1BQU0sT0FBTyxPQUNiO0FBQ0EsaUJBQU87QUFBQTtBQUVULFlBQUksTUFBTSxrQkFBa0IsT0FBTztBQUNqQyxpQkFBTyxLQUFLO0FBQUE7QUFFZCxZQUFJLE1BQU0sa0JBQWtCLE9BQU87QUFDakMsZ0NBQXNCLFNBQVM7QUFDL0IsaUJBQU8sS0FBSztBQUFBO0FBR2QsWUFBSSxrQkFBa0IsTUFBTSxTQUFTO0FBQ3JDLFlBQUksY0FBYyxXQUFXLFFBQVE7QUFFckMsWUFBSTtBQUVKLFlBQUssY0FBYSxNQUFNLFdBQVcsVUFBVyxtQkFBbUIsZ0JBQWdCLHVCQUF3QjtBQUN2RyxjQUFJLFlBQVksS0FBSyxPQUFPLEtBQUssSUFBSTtBQUNyQyxpQkFBTyxXQUFXLGFBQWEsRUFBQyxXQUFXLFNBQVEsTUFBTSxhQUFhLElBQUk7QUFBQSxtQkFDakUsbUJBQW1CLGdCQUFnQixvQkFBb0I7QUFDaEUsZ0NBQXNCLFNBQVM7QUFDL0IsaUJBQU8sZ0JBQWdCO0FBQUE7QUFHekIsZUFBTztBQUFBO0FBQUEsTUFHVCxtQkFBbUIsQ0FBQywyQkFBMkIsTUFBTTtBQUNuRCxZQUFJLGVBQWUsS0FBSyxnQkFBZ0IsU0FBUztBQUNqRCxZQUFJLG9CQUFvQixnQkFBZ0IsYUFBYTtBQUNyRCxZQUFJLG9CQUFvQixnQkFBZ0IsYUFBYTtBQUNyRCxZQUFJLG9CQUFvQixDQUFDLHFCQUFxQixLQUFLLGlCQUFpQjtBQUVwRSxZQUFJLHFCQUFzQixxQkFBcUIsTUFBTSxTQUFTLFNBQVMsS0FBSyxRQUFTO0FBQ25GLGNBQUk7QUFDRixtQkFBTyxLQUFLLE1BQU07QUFBQSxtQkFDWCxHQUFQO0FBQ0EsZ0JBQUksbUJBQW1CO0FBQ3JCLGtCQUFJLEVBQUUsU0FBUyxlQUFlO0FBQzVCLHNCQUFNLFdBQVcsS0FBSyxHQUFHLFdBQVcsa0JBQWtCLE1BQU0sTUFBTSxLQUFLO0FBQUE7QUFFekUsb0JBQU07QUFBQTtBQUFBO0FBQUE7QUFLWixlQUFPO0FBQUE7QUFBQSxNQU9ULFNBQVM7QUFBQSxNQUVULGdCQUFnQjtBQUFBLE1BQ2hCLGdCQUFnQjtBQUFBLE1BRWhCLGtCQUFrQjtBQUFBLE1BQ2xCLGVBQWU7QUFBQSxNQUVmLEtBQUs7QUFBQSxRQUNILFVBQVU7QUFBQTtBQUFBLE1BR1osZ0JBQWdCLHdCQUF3QixRQUFRO0FBQzlDLGVBQU8sVUFBVSxPQUFPLFNBQVM7QUFBQTtBQUFBLE1BR25DLFNBQVM7QUFBQSxRQUNQLFFBQVE7QUFBQSxVQUNOLFVBQVU7QUFBQTtBQUFBO0FBQUE7QUFLaEIsVUFBTSxRQUFRLENBQUMsVUFBVSxPQUFPLFNBQVMsNkJBQTZCLFFBQVE7QUFDNUUsZUFBUyxRQUFRLFVBQVU7QUFBQTtBQUc3QixVQUFNLFFBQVEsQ0FBQyxRQUFRLE9BQU8sVUFBVSwrQkFBK0IsUUFBUTtBQUM3RSxlQUFTLFFBQVEsVUFBVSxNQUFNLE1BQU07QUFBQTtBQUd6QyxZQUFPLFVBQVU7QUFBQTtBQUFBOzs7QUNqSmpCO0FBQUE7QUFBQTtBQUVBLFFBQUksUUFBUTtBQUNaLFFBQUksV0FBVztBQVVmLFlBQU8sVUFBVSx1QkFBdUIsTUFBTSxTQUFTLEtBQUs7QUFDMUQsVUFBSSxVQUFVLFFBQVE7QUFFdEIsWUFBTSxRQUFRLEtBQUssbUJBQW1CLElBQUk7QUFDeEMsZUFBTyxHQUFHLEtBQUssU0FBUyxNQUFNO0FBQUE7QUFHaEMsYUFBTztBQUFBO0FBQUE7QUFBQTs7O0FDcEJUO0FBQUE7QUFBQTtBQUVBLFlBQU8sVUFBVSxrQkFBa0IsT0FBTztBQUN4QyxhQUFPLENBQUMsQ0FBRSxVQUFTLE1BQU07QUFBQTtBQUFBO0FBQUE7OztBQ0gzQjtBQUFBO0FBQUE7QUFFQSxRQUFJLFFBQVE7QUFDWixRQUFJLGdCQUFnQjtBQUNwQixRQUFJLFdBQVc7QUFDZixRQUFJLFdBQVc7QUFDZixRQUFJLGdCQUFnQjtBQUtwQiwwQ0FBc0MsUUFBUTtBQUM1QyxVQUFJLE9BQU8sYUFBYTtBQUN0QixlQUFPLFlBQVk7QUFBQTtBQUdyQixVQUFJLE9BQU8sVUFBVSxPQUFPLE9BQU8sU0FBUztBQUMxQyxjQUFNLElBQUk7QUFBQTtBQUFBO0FBVWQsWUFBTyxVQUFVLHlCQUF5QixRQUFRO0FBQ2hELG1DQUE2QjtBQUc3QixhQUFPLFVBQVUsT0FBTyxXQUFXO0FBR25DLGFBQU8sT0FBTyxjQUFjLEtBQzFCLFFBQ0EsT0FBTyxNQUNQLE9BQU8sU0FDUCxPQUFPO0FBSVQsYUFBTyxVQUFVLE1BQU0sTUFDckIsT0FBTyxRQUFRLFVBQVUsSUFDekIsT0FBTyxRQUFRLE9BQU8sV0FBVyxJQUNqQyxPQUFPO0FBR1QsWUFBTSxRQUNKLENBQUMsVUFBVSxPQUFPLFFBQVEsUUFBUSxPQUFPLFNBQVMsV0FDbEQsMkJBQTJCLFFBQVE7QUFDakMsZUFBTyxPQUFPLFFBQVE7QUFBQTtBQUkxQixVQUFJLFVBQVUsT0FBTyxXQUFXLFNBQVM7QUFFekMsYUFBTyxRQUFRLFFBQVEsS0FBSyw2QkFBNkIsVUFBVTtBQUNqRSxxQ0FBNkI7QUFHN0IsaUJBQVMsT0FBTyxjQUFjLEtBQzVCLFFBQ0EsU0FBUyxNQUNULFNBQVMsU0FDVCxPQUFPO0FBR1QsZUFBTztBQUFBLFNBQ04sNEJBQTRCLFFBQVE7QUFDckMsWUFBSSxDQUFDLFNBQVMsU0FBUztBQUNyQix1Q0FBNkI7QUFHN0IsY0FBSSxVQUFVLE9BQU8sVUFBVTtBQUM3QixtQkFBTyxTQUFTLE9BQU8sY0FBYyxLQUNuQyxRQUNBLE9BQU8sU0FBUyxNQUNoQixPQUFPLFNBQVMsU0FDaEIsT0FBTztBQUFBO0FBQUE7QUFLYixlQUFPLFFBQVEsT0FBTztBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUNwRjFCO0FBQUE7QUFBQTtBQUVBLFFBQUksUUFBUTtBQVVaLFlBQU8sVUFBVSxxQkFBcUIsU0FBUyxTQUFTO0FBRXRELGdCQUFVLFdBQVc7QUFDckIsVUFBSSxTQUFTO0FBRWIsOEJBQXdCLFFBQVEsUUFBUTtBQUN0QyxZQUFJLE1BQU0sY0FBYyxXQUFXLE1BQU0sY0FBYyxTQUFTO0FBQzlELGlCQUFPLE1BQU0sTUFBTSxRQUFRO0FBQUEsbUJBQ2xCLE1BQU0sY0FBYyxTQUFTO0FBQ3RDLGlCQUFPLE1BQU0sTUFBTSxJQUFJO0FBQUEsbUJBQ2QsTUFBTSxRQUFRLFNBQVM7QUFDaEMsaUJBQU8sT0FBTztBQUFBO0FBRWhCLGVBQU87QUFBQTtBQUlULG1DQUE2QixNQUFNO0FBQ2pDLFlBQUksQ0FBQyxNQUFNLFlBQVksUUFBUSxRQUFRO0FBQ3JDLGlCQUFPLGVBQWUsUUFBUSxPQUFPLFFBQVE7QUFBQSxtQkFDcEMsQ0FBQyxNQUFNLFlBQVksUUFBUSxRQUFRO0FBQzVDLGlCQUFPLGVBQWUsUUFBVyxRQUFRO0FBQUE7QUFBQTtBQUs3QyxnQ0FBMEIsTUFBTTtBQUM5QixZQUFJLENBQUMsTUFBTSxZQUFZLFFBQVEsUUFBUTtBQUNyQyxpQkFBTyxlQUFlLFFBQVcsUUFBUTtBQUFBO0FBQUE7QUFLN0MsZ0NBQTBCLE1BQU07QUFDOUIsWUFBSSxDQUFDLE1BQU0sWUFBWSxRQUFRLFFBQVE7QUFDckMsaUJBQU8sZUFBZSxRQUFXLFFBQVE7QUFBQSxtQkFDaEMsQ0FBQyxNQUFNLFlBQVksUUFBUSxRQUFRO0FBQzVDLGlCQUFPLGVBQWUsUUFBVyxRQUFRO0FBQUE7QUFBQTtBQUs3QywrQkFBeUIsTUFBTTtBQUM3QixZQUFJLFFBQVEsU0FBUztBQUNuQixpQkFBTyxlQUFlLFFBQVEsT0FBTyxRQUFRO0FBQUEsbUJBQ3BDLFFBQVEsU0FBUztBQUMxQixpQkFBTyxlQUFlLFFBQVcsUUFBUTtBQUFBO0FBQUE7QUFJN0MsVUFBSSxXQUFXO0FBQUEsUUFDYixPQUFPO0FBQUEsUUFDUCxVQUFVO0FBQUEsUUFDVixRQUFRO0FBQUEsUUFDUixXQUFXO0FBQUEsUUFDWCxvQkFBb0I7QUFBQSxRQUNwQixxQkFBcUI7QUFBQSxRQUNyQixvQkFBb0I7QUFBQSxRQUNwQixXQUFXO0FBQUEsUUFDWCxrQkFBa0I7QUFBQSxRQUNsQixtQkFBbUI7QUFBQSxRQUNuQixXQUFXO0FBQUEsUUFDWCxnQkFBZ0I7QUFBQSxRQUNoQixrQkFBa0I7QUFBQSxRQUNsQixrQkFBa0I7QUFBQSxRQUNsQixvQkFBb0I7QUFBQSxRQUNwQixzQkFBc0I7QUFBQSxRQUN0QixjQUFjO0FBQUEsUUFDZCxvQkFBb0I7QUFBQSxRQUNwQixpQkFBaUI7QUFBQSxRQUNqQixrQkFBa0I7QUFBQSxRQUNsQixhQUFhO0FBQUEsUUFDYixhQUFhO0FBQUEsUUFDYixjQUFjO0FBQUEsUUFDZCxlQUFlO0FBQUEsUUFDZixjQUFjO0FBQUEsUUFDZCxvQkFBb0I7QUFBQSxRQUNwQixrQkFBa0I7QUFBQTtBQUdwQixZQUFNLFFBQVEsT0FBTyxLQUFLLFNBQVMsT0FBTyxPQUFPLEtBQUssV0FBVyw0QkFBNEIsTUFBTTtBQUNqRyxZQUFJLFFBQVEsU0FBUyxTQUFTO0FBQzlCLFlBQUksY0FBYyxNQUFNO0FBQ3hCLFFBQUMsTUFBTSxZQUFZLGdCQUFnQixVQUFVLG1CQUFxQixRQUFPLFFBQVE7QUFBQTtBQUduRixhQUFPO0FBQUE7QUFBQTtBQUFBOzs7QUNsR1Q7QUFBQTtBQUFBLFlBQU8sVUFBVTtBQUFBLE1BQ2YsV0FBVztBQUFBO0FBQUE7QUFBQTs7O0FDRGI7QUFBQTtBQUFBO0FBRUEsUUFBSSxVQUFVLGVBQXVCO0FBQ3JDLFFBQUksYUFBYTtBQUVqQixRQUFJLGFBQWE7QUFHakIsS0FBQyxVQUFVLFdBQVcsVUFBVSxZQUFZLFVBQVUsVUFBVSxRQUFRLFNBQVMsTUFBTSxHQUFHO0FBQ3hGLGlCQUFXLFFBQVEsb0JBQW1CLE9BQU87QUFDM0MsZUFBTyxPQUFPLFVBQVUsUUFBUSxNQUFPLEtBQUksSUFBSSxPQUFPLE9BQU87QUFBQTtBQUFBO0FBSWpFLFFBQUkscUJBQXFCO0FBU3pCLGVBQVcsZUFBZSxzQkFBc0IsWUFBVyxTQUFTLFNBQVM7QUFDM0UsNkJBQXVCLEtBQUssTUFBTTtBQUNoQyxlQUFPLGFBQWEsVUFBVSw0QkFBNkIsTUFBTSxNQUFPLE9BQVEsV0FBVSxPQUFPLFVBQVU7QUFBQTtBQUk3RyxhQUFPLFNBQVMsT0FBTyxLQUFLLE1BQU07QUFDaEMsWUFBSSxlQUFjLE9BQU87QUFDdkIsZ0JBQU0sSUFBSSxXQUNSLGNBQWMsS0FBSyxzQkFBdUIsV0FBVSxTQUFTLFVBQVUsTUFDdkUsV0FBVztBQUFBO0FBSWYsWUFBSSxXQUFXLENBQUMsbUJBQW1CLE1BQU07QUFDdkMsNkJBQW1CLE9BQU87QUFFMUIsa0JBQVEsS0FDTixjQUNFLEtBQ0EsaUNBQWlDLFVBQVU7QUFBQTtBQUtqRCxlQUFPLGFBQVksV0FBVSxPQUFPLEtBQUssUUFBUTtBQUFBO0FBQUE7QUFXckQsMkJBQXVCLFNBQVMsUUFBUSxjQUFjO0FBQ3BELFVBQUksT0FBTyxZQUFZLFVBQVU7QUFDL0IsY0FBTSxJQUFJLFdBQVcsNkJBQTZCLFdBQVc7QUFBQTtBQUUvRCxVQUFJLE9BQU8sT0FBTyxLQUFLO0FBQ3ZCLFVBQUksSUFBSSxLQUFLO0FBQ2IsYUFBTyxNQUFNLEdBQUc7QUFDZCxZQUFJLE1BQU0sS0FBSztBQUNmLFlBQUksYUFBWSxPQUFPO0FBQ3ZCLFlBQUksWUFBVztBQUNiLGNBQUksUUFBUSxRQUFRO0FBQ3BCLGNBQUksU0FBUyxVQUFVLFVBQWEsV0FBVSxPQUFPLEtBQUs7QUFDMUQsY0FBSSxXQUFXLE1BQU07QUFDbkIsa0JBQU0sSUFBSSxXQUFXLFlBQVksTUFBTSxjQUFjLFFBQVEsV0FBVztBQUFBO0FBRTFFO0FBQUE7QUFFRixZQUFJLGlCQUFpQixNQUFNO0FBQ3pCLGdCQUFNLElBQUksV0FBVyxvQkFBb0IsS0FBSyxXQUFXO0FBQUE7QUFBQTtBQUFBO0FBSy9ELFlBQU8sVUFBVTtBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUE7QUFBQTtBQUFBOzs7QUNwRkY7QUFBQTtBQUFBO0FBRUEsUUFBSSxRQUFRO0FBQ1osUUFBSSxXQUFXO0FBQ2YsUUFBSSxxQkFBcUI7QUFDekIsUUFBSSxrQkFBa0I7QUFDdEIsUUFBSSxjQUFjO0FBQ2xCLFFBQUksZ0JBQWdCO0FBQ3BCLFFBQUksYUFBWTtBQUVoQixRQUFJLGFBQWEsV0FBVTtBQU0zQixtQkFBZSxnQkFBZ0I7QUFDN0IsV0FBSyxXQUFXO0FBQ2hCLFdBQUssZUFBZTtBQUFBLFFBQ2xCLFNBQVMsSUFBSTtBQUFBLFFBQ2IsVUFBVSxJQUFJO0FBQUE7QUFBQTtBQVNsQixVQUFNLFVBQVUsVUFBVSxrQkFBaUIsYUFBYSxRQUFRO0FBRzlELFVBQUksT0FBTyxnQkFBZ0IsVUFBVTtBQUNuQyxpQkFBUyxVQUFVO0FBQ25CLGVBQU8sTUFBTTtBQUFBLGFBQ1I7QUFDTCxpQkFBUyxlQUFlO0FBQUE7QUFHMUIsZUFBUyxZQUFZLEtBQUssVUFBVTtBQUdwQyxVQUFJLE9BQU8sUUFBUTtBQUNqQixlQUFPLFNBQVMsT0FBTyxPQUFPO0FBQUEsaUJBQ3JCLEtBQUssU0FBUyxRQUFRO0FBQy9CLGVBQU8sU0FBUyxLQUFLLFNBQVMsT0FBTztBQUFBLGFBQ2hDO0FBQ0wsZUFBTyxTQUFTO0FBQUE7QUFHbEIsVUFBSSxlQUFlLE9BQU87QUFFMUIsVUFBSSxpQkFBaUIsUUFBVztBQUM5QixtQkFBVSxjQUFjLGNBQWM7QUFBQSxVQUNwQyxtQkFBbUIsV0FBVyxhQUFhLFdBQVc7QUFBQSxVQUN0RCxtQkFBbUIsV0FBVyxhQUFhLFdBQVc7QUFBQSxVQUN0RCxxQkFBcUIsV0FBVyxhQUFhLFdBQVc7QUFBQSxXQUN2RDtBQUFBO0FBSUwsVUFBSSwwQkFBMEI7QUFDOUIsVUFBSSxpQ0FBaUM7QUFDckMsV0FBSyxhQUFhLFFBQVEsUUFBUSxvQ0FBb0MsYUFBYTtBQUNqRixZQUFJLE9BQU8sWUFBWSxZQUFZLGNBQWMsWUFBWSxRQUFRLFlBQVksT0FBTztBQUN0RjtBQUFBO0FBR0YseUNBQWlDLGtDQUFrQyxZQUFZO0FBRS9FLGdDQUF3QixRQUFRLFlBQVksV0FBVyxZQUFZO0FBQUE7QUFHckUsVUFBSSwyQkFBMkI7QUFDL0IsV0FBSyxhQUFhLFNBQVMsUUFBUSxrQ0FBa0MsYUFBYTtBQUNoRixpQ0FBeUIsS0FBSyxZQUFZLFdBQVcsWUFBWTtBQUFBO0FBR25FLFVBQUk7QUFFSixVQUFJLENBQUMsZ0NBQWdDO0FBQ25DLFlBQUksUUFBUSxDQUFDLGlCQUFpQjtBQUU5QixjQUFNLFVBQVUsUUFBUSxNQUFNLE9BQU87QUFDckMsZ0JBQVEsTUFBTSxPQUFPO0FBRXJCLGtCQUFVLFFBQVEsUUFBUTtBQUMxQixlQUFPLE1BQU0sUUFBUTtBQUNuQixvQkFBVSxRQUFRLEtBQUssTUFBTSxTQUFTLE1BQU07QUFBQTtBQUc5QyxlQUFPO0FBQUE7QUFJVCxVQUFJLFlBQVk7QUFDaEIsYUFBTyx3QkFBd0IsUUFBUTtBQUNyQyxZQUFJLGNBQWMsd0JBQXdCO0FBQzFDLFlBQUksYUFBYSx3QkFBd0I7QUFDekMsWUFBSTtBQUNGLHNCQUFZLFlBQVk7QUFBQSxpQkFDakIsT0FBUDtBQUNBLHFCQUFXO0FBQ1g7QUFBQTtBQUFBO0FBSUosVUFBSTtBQUNGLGtCQUFVLGdCQUFnQjtBQUFBLGVBQ25CLE9BQVA7QUFDQSxlQUFPLFFBQVEsT0FBTztBQUFBO0FBR3hCLGFBQU8seUJBQXlCLFFBQVE7QUFDdEMsa0JBQVUsUUFBUSxLQUFLLHlCQUF5QixTQUFTLHlCQUF5QjtBQUFBO0FBR3BGLGFBQU87QUFBQTtBQUdULFVBQU0sVUFBVSxTQUFTLGdCQUFnQixRQUFRO0FBQy9DLGVBQVMsWUFBWSxLQUFLLFVBQVU7QUFDcEMsVUFBSSxXQUFXLGNBQWMsT0FBTyxTQUFTLE9BQU87QUFDcEQsYUFBTyxTQUFTLFVBQVUsT0FBTyxRQUFRLE9BQU87QUFBQTtBQUlsRCxVQUFNLFFBQVEsQ0FBQyxVQUFVLE9BQU8sUUFBUSxZQUFZLDZCQUE2QixRQUFRO0FBRXZGLFlBQU0sVUFBVSxVQUFVLFNBQVMsS0FBSyxRQUFRO0FBQzlDLGVBQU8sS0FBSyxRQUFRLFlBQVksVUFBVSxJQUFJO0FBQUEsVUFDNUM7QUFBQSxVQUNBO0FBQUEsVUFDQSxNQUFPLFdBQVUsSUFBSTtBQUFBO0FBQUE7QUFBQTtBQUszQixVQUFNLFFBQVEsQ0FBQyxRQUFRLE9BQU8sVUFBVSwrQkFBK0IsUUFBUTtBQUc3RSxrQ0FBNEIsUUFBUTtBQUNsQyxlQUFPLG9CQUFvQixLQUFLLE1BQU0sUUFBUTtBQUM1QyxpQkFBTyxLQUFLLFFBQVEsWUFBWSxVQUFVLElBQUk7QUFBQSxZQUM1QztBQUFBLFlBQ0EsU0FBUyxTQUFTO0FBQUEsY0FDaEIsZ0JBQWdCO0FBQUEsZ0JBQ2Q7QUFBQSxZQUNKO0FBQUEsWUFDQTtBQUFBO0FBQUE7QUFBQTtBQUtOLFlBQU0sVUFBVSxVQUFVO0FBRTFCLFlBQU0sVUFBVSxTQUFTLFVBQVUsbUJBQW1CO0FBQUE7QUFHeEQsWUFBTyxVQUFVO0FBQUE7QUFBQTs7O0FDL0pqQjtBQUFBO0FBQUE7QUFFQSxRQUFJLGdCQUFnQjtBQVFwQix5QkFBcUIsVUFBVTtBQUM3QixVQUFJLE9BQU8sYUFBYSxZQUFZO0FBQ2xDLGNBQU0sSUFBSSxVQUFVO0FBQUE7QUFHdEIsVUFBSTtBQUVKLFdBQUssVUFBVSxJQUFJLFFBQVEseUJBQXlCLFNBQVM7QUFDM0QseUJBQWlCO0FBQUE7QUFHbkIsVUFBSSxRQUFRO0FBR1osV0FBSyxRQUFRLEtBQUssU0FBUyxRQUFRO0FBQ2pDLFlBQUksQ0FBQyxNQUFNO0FBQVk7QUFFdkIsWUFBSTtBQUNKLFlBQUksSUFBSSxNQUFNLFdBQVc7QUFFekIsYUFBSyxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUs7QUFDdEIsZ0JBQU0sV0FBVyxHQUFHO0FBQUE7QUFFdEIsY0FBTSxhQUFhO0FBQUE7QUFJckIsV0FBSyxRQUFRLE9BQU8sU0FBUyxhQUFhO0FBQ3hDLFlBQUk7QUFFSixZQUFJLFVBQVUsSUFBSSxRQUFRLFNBQVMsU0FBUztBQUMxQyxnQkFBTSxVQUFVO0FBQ2hCLHFCQUFXO0FBQUEsV0FDVixLQUFLO0FBRVIsZ0JBQVEsU0FBUyxrQkFBa0I7QUFDakMsZ0JBQU0sWUFBWTtBQUFBO0FBR3BCLGVBQU87QUFBQTtBQUdULGVBQVMsZ0JBQWdCLFNBQVM7QUFDaEMsWUFBSSxNQUFNLFFBQVE7QUFFaEI7QUFBQTtBQUdGLGNBQU0sU0FBUyxJQUFJLGNBQWM7QUFDakMsdUJBQWUsTUFBTTtBQUFBO0FBQUE7QUFPekIsZ0JBQVksVUFBVSxtQkFBbUIsNEJBQTRCO0FBQ25FLFVBQUksS0FBSyxRQUFRO0FBQ2YsY0FBTSxLQUFLO0FBQUE7QUFBQTtBQVFmLGdCQUFZLFVBQVUsWUFBWSxtQkFBbUIsVUFBVTtBQUM3RCxVQUFJLEtBQUssUUFBUTtBQUNmLGlCQUFTLEtBQUs7QUFDZDtBQUFBO0FBR0YsVUFBSSxLQUFLLFlBQVk7QUFDbkIsYUFBSyxXQUFXLEtBQUs7QUFBQSxhQUNoQjtBQUNMLGFBQUssYUFBYSxDQUFDO0FBQUE7QUFBQTtBQVF2QixnQkFBWSxVQUFVLGNBQWMscUJBQXFCLFVBQVU7QUFDakUsVUFBSSxDQUFDLEtBQUssWUFBWTtBQUNwQjtBQUFBO0FBRUYsVUFBSSxRQUFRLEtBQUssV0FBVyxRQUFRO0FBQ3BDLFVBQUksVUFBVSxJQUFJO0FBQ2hCLGFBQUssV0FBVyxPQUFPLE9BQU87QUFBQTtBQUFBO0FBUWxDLGdCQUFZLFNBQVMsa0JBQWtCO0FBQ3JDLFVBQUk7QUFDSixVQUFJLFFBQVEsSUFBSSxZQUFZLGtCQUFrQixHQUFHO0FBQy9DLGlCQUFTO0FBQUE7QUFFWCxhQUFPO0FBQUEsUUFDTDtBQUFBLFFBQ0E7QUFBQTtBQUFBO0FBSUosWUFBTyxVQUFVO0FBQUE7QUFBQTs7O0FDdEhqQjtBQUFBO0FBQUE7QUFzQkEsWUFBTyxVQUFVLGdCQUFnQixVQUFVO0FBQ3pDLGFBQU8sY0FBYyxLQUFLO0FBQ3hCLGVBQU8sU0FBUyxNQUFNLE1BQU07QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FDeEJoQztBQUFBO0FBQUE7QUFFQSxRQUFJLFFBQVE7QUFRWixZQUFPLFVBQVUsc0JBQXNCLFNBQVM7QUFDOUMsYUFBTyxNQUFNLFNBQVMsWUFBYSxRQUFRLGlCQUFpQjtBQUFBO0FBQUE7QUFBQTs7O0FDWDlEO0FBQUE7QUFBQTtBQUVBLFFBQUksUUFBUTtBQUNaLFFBQUksT0FBTztBQUNYLFFBQUksUUFBUTtBQUNaLFFBQUksY0FBYztBQUNsQixRQUFJLFdBQVc7QUFRZiw0QkFBd0IsZUFBZTtBQUNyQyxVQUFJLFVBQVUsSUFBSSxNQUFNO0FBQ3hCLFVBQUksV0FBVyxLQUFLLE1BQU0sVUFBVSxTQUFTO0FBRzdDLFlBQU0sT0FBTyxVQUFVLE1BQU0sV0FBVztBQUd4QyxZQUFNLE9BQU8sVUFBVTtBQUd2QixlQUFTLFNBQVMsZ0JBQWdCLGdCQUFnQjtBQUNoRCxlQUFPLGVBQWUsWUFBWSxlQUFlO0FBQUE7QUFHbkQsYUFBTztBQUFBO0FBSVQsUUFBSSxTQUFRLGVBQWU7QUFHM0IsV0FBTSxRQUFRO0FBR2QsV0FBTSxnQkFBZ0I7QUFDdEIsV0FBTSxjQUFjO0FBQ3BCLFdBQU0sV0FBVztBQUNqQixXQUFNLFVBQVUsZUFBc0I7QUFDdEMsV0FBTSxhQUFhO0FBR25CLFdBQU0sYUFBYTtBQUduQixXQUFNLFNBQVMsT0FBTTtBQUdyQixXQUFNLE1BQU0sYUFBYSxVQUFVO0FBQ2pDLGFBQU8sUUFBUSxJQUFJO0FBQUE7QUFFckIsV0FBTSxTQUFTO0FBR2YsV0FBTSxlQUFlO0FBRXJCLFlBQU8sVUFBVTtBQUdqQixZQUFPLFFBQVEsVUFBVTtBQUFBO0FBQUE7OztBQy9EekI7QUFBQTtBQUFBLFlBQU8sVUFBVTtBQUFBO0FBQUE7OztBQ0FqQjtBQUFBO0FBQUE7QUFPQSx1QkFBdUI7OztBQ052Qix1QkFBK0M7OztBQ0QvQyxzQkFBNEM7OztBQ0c1QyxJQUFJO0FBQ0osSUFBSSxRQUFRLElBQUksV0FBVztBQUNaLGVBQWU7QUFFNUIsTUFBSSxDQUFDLGlCQUFpQjtBQUdwQixzQkFBa0IsT0FBTyxXQUFXLGVBQWUsT0FBTyxtQkFBbUIsT0FBTyxnQkFBZ0IsS0FBSyxXQUFXLE9BQU8sYUFBYSxlQUFlLE9BQU8sU0FBUyxvQkFBb0IsY0FBYyxTQUFTLGdCQUFnQixLQUFLO0FBRXZPLFFBQUksQ0FBQyxpQkFBaUI7QUFDcEIsWUFBTSxJQUFJLE1BQU07QUFBQTtBQUFBO0FBSXBCLFNBQU8sZ0JBQWdCO0FBQUE7OztBQ2pCekIsSUFBTyxnQkFBUTs7O0FDRWYsa0JBQWtCLE1BQU07QUFDdEIsU0FBTyxPQUFPLFNBQVMsWUFBWSxjQUFNLEtBQUs7QUFBQTtBQUdoRCxJQUFPLG1CQUFROzs7QUNBZixJQUFJLFlBQVk7QUFFaEIsS0FBUyxJQUFJLEdBQUcsSUFBSSxLQUFLLEVBQUUsR0FBRztBQUM1QixZQUFVLEtBQU0sS0FBSSxLQUFPLFNBQVMsSUFBSSxPQUFPO0FBQUE7QUFEeEM7QUFJVCxtQkFBbUIsS0FBSztBQUN0QixNQUFJLFNBQVMsVUFBVSxTQUFTLEtBQUssVUFBVSxPQUFPLFNBQVksVUFBVSxLQUFLO0FBR2pGLE1BQUksT0FBUSxXQUFVLElBQUksU0FBUyxNQUFNLFVBQVUsSUFBSSxTQUFTLE1BQU0sVUFBVSxJQUFJLFNBQVMsTUFBTSxVQUFVLElBQUksU0FBUyxNQUFNLE1BQU0sVUFBVSxJQUFJLFNBQVMsTUFBTSxVQUFVLElBQUksU0FBUyxNQUFNLE1BQU0sVUFBVSxJQUFJLFNBQVMsTUFBTSxVQUFVLElBQUksU0FBUyxNQUFNLE1BQU0sVUFBVSxJQUFJLFNBQVMsTUFBTSxVQUFVLElBQUksU0FBUyxNQUFNLE1BQU0sVUFBVSxJQUFJLFNBQVMsT0FBTyxVQUFVLElBQUksU0FBUyxPQUFPLFVBQVUsSUFBSSxTQUFTLE9BQU8sVUFBVSxJQUFJLFNBQVMsT0FBTyxVQUFVLElBQUksU0FBUyxPQUFPLFVBQVUsSUFBSSxTQUFTLE1BQU07QUFNemYsTUFBSSxDQUFDLGlCQUFTLE9BQU87QUFDbkIsVUFBTSxVQUFVO0FBQUE7QUFHbEIsU0FBTztBQUFBO0FBR1QsSUFBTyxvQkFBUTs7O0FDMUJmLFlBQVksU0FBUyxLQUFLLFFBQVE7QUFDaEMsWUFBVSxXQUFXO0FBQ3JCLE1BQUksT0FBTyxRQUFRLFVBQVcsU0FBUSxPQUFPO0FBRTdDLE9BQUssS0FBSyxLQUFLLEtBQUssS0FBTztBQUMzQixPQUFLLEtBQUssS0FBSyxLQUFLLEtBQU87QUFFM0IsTUFBSSxLQUFLO0FBQ1AsYUFBUyxVQUFVO0FBRW5CLGFBQVMsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLEdBQUc7QUFDM0IsVUFBSSxTQUFTLEtBQUssS0FBSztBQUFBO0FBR3pCLFdBQU87QUFBQTtBQUdULFNBQU8sa0JBQVU7QUFBQTtBQUduQixJQUFPLGFBQVE7OztBTHJCZixtQkFBa0I7OztBTUZYLElBQU0sTUFBTSxTQUFVLFFBQVE7QUFFakMsc0JBQW9CLFFBQVEsWUFBWTtBQUNwQyxXQUFRLFVBQVEsYUFBZSxXQUFVLEtBQUc7QUFBQTtBQUdoRCx1QkFBcUIsSUFBRyxJQUFJO0FBQ3hCLFFBQUksS0FBSSxLQUFJLEtBQUksS0FBSTtBQUNwQixVQUFPLEtBQUs7QUFDWixVQUFPLEtBQUs7QUFDWixVQUFPLEtBQUs7QUFDWixVQUFPLEtBQUs7QUFDWixjQUFXLE1BQUssY0FBYSxNQUFLO0FBQ2xDLFFBQUksTUFBTSxLQUFLO0FBQ1gsYUFBUSxVQUFVLGFBQWEsTUFBTTtBQUFBO0FBRXpDLFFBQUksTUFBTSxLQUFLO0FBQ1gsVUFBSSxVQUFVLFlBQVk7QUFDdEIsZUFBUSxVQUFVLGFBQWEsTUFBTTtBQUFBLGFBQ2xDO0FBQ0gsZUFBUSxVQUFVLGFBQWEsTUFBTTtBQUFBO0FBQUEsV0FFdEM7QUFDSCxhQUFRLFVBQVUsTUFBTTtBQUFBO0FBQUE7QUFJaEMsYUFBVyxJQUFFLEdBQUUsR0FBRztBQUFFLFdBQVEsS0FBSSxJQUFPLENBQUMsS0FBSztBQUFBO0FBQzdDLGFBQVcsSUFBRSxHQUFFLEdBQUc7QUFBRSxXQUFRLEtBQUksSUFBTSxJQUFLLENBQUM7QUFBQTtBQUM1QyxhQUFXLElBQUUsR0FBRSxHQUFHO0FBQUUsV0FBUSxLQUFJLElBQUk7QUFBQTtBQUNwQyxhQUFXLElBQUUsR0FBRSxHQUFHO0FBQUUsV0FBUSxJQUFLLE1BQUssQ0FBQztBQUFBO0FBRXZDLGNBQVksSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLEdBQUUsSUFBSTtBQUN4QixTQUFJLFlBQVksSUFBRyxZQUFZLFlBQVksRUFBRSxJQUFHLElBQUcsS0FBSSxLQUFJO0FBQzNELFdBQU8sWUFBWSxXQUFXLElBQUcsSUFBSTtBQUFBO0FBR3pDLGNBQVksSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLEdBQUUsSUFBSTtBQUN4QixTQUFJLFlBQVksSUFBRyxZQUFZLFlBQVksRUFBRSxJQUFHLElBQUcsS0FBSSxLQUFJO0FBQzNELFdBQU8sWUFBWSxXQUFXLElBQUcsSUFBSTtBQUFBO0FBR3pDLGNBQVksSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLEdBQUUsSUFBSTtBQUN4QixTQUFJLFlBQVksSUFBRyxZQUFZLFlBQVksRUFBRSxJQUFHLElBQUcsS0FBSSxLQUFJO0FBQzNELFdBQU8sWUFBWSxXQUFXLElBQUcsSUFBSTtBQUFBO0FBR3pDLGNBQVksSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLEdBQUUsSUFBSTtBQUN4QixTQUFJLFlBQVksSUFBRyxZQUFZLFlBQVksRUFBRSxJQUFHLElBQUcsS0FBSSxLQUFJO0FBQzNELFdBQU8sWUFBWSxXQUFXLElBQUcsSUFBSTtBQUFBO0FBR3pDLDhCQUE0QixTQUFRO0FBQ2hDLFFBQUk7QUFDSixVQUFNLGlCQUFpQixRQUFPO0FBQzlCLFVBQU0sdUJBQXFCLGlCQUFpQjtBQUM1QyxVQUFNLHVCQUFzQix3QkFBc0IsdUJBQXVCLE1BQUs7QUFDOUUsVUFBTSxpQkFBa0Isd0JBQXFCLEtBQUc7QUFDaEQsVUFBTSxhQUFXLE1BQU0saUJBQWU7QUFDdEMsUUFBSSxnQkFBZ0I7QUFDcEIsUUFBSSxhQUFhO0FBQ2pCLFdBQVEsYUFBYSxnQkFBaUI7QUFDbEMsbUJBQWMsY0FBWSxhQUFhLEtBQUk7QUFDM0Msc0JBQWlCLGFBQWEsSUFBRztBQUNqQyxpQkFBVyxjQUFlLFdBQVcsY0FBZSxRQUFPLFdBQVcsZUFBYTtBQUNuRjtBQUFBO0FBRUosaUJBQWMsY0FBWSxhQUFhLEtBQUk7QUFDM0Msb0JBQWlCLGFBQWEsSUFBRztBQUNqQyxlQUFXLGNBQWMsV0FBVyxjQUFlLE9BQU07QUFDekQsZUFBVyxpQkFBZSxLQUFLLGtCQUFnQjtBQUMvQyxlQUFXLGlCQUFlLEtBQUssbUJBQWlCO0FBQ2hELFdBQU87QUFBQTtBQUdYLHFCQUFtQixRQUFRO0FBQ3ZCLFFBQUksaUJBQWUsSUFBRyxzQkFBb0IsSUFBRyxPQUFNO0FBQ25ELFNBQUssU0FBUyxHQUFFLFVBQVEsR0FBRSxVQUFVO0FBQ2hDLGNBQVMsV0FBVSxTQUFPLElBQU07QUFDaEMsNEJBQXNCLE1BQU0sTUFBTSxTQUFTO0FBQzNDLHVCQUFpQixpQkFBaUIsb0JBQW9CLE9BQU8sb0JBQW9CLFNBQU8sR0FBRTtBQUFBO0FBRTlGLFdBQU87QUFBQTtBQUdYLHNCQUFvQixTQUFRO0FBQ3hCLGNBQVMsUUFBTyxRQUFRLFNBQVE7QUFDaEMsUUFBSSxVQUFVO0FBRWQsYUFBUyxJQUFJLEdBQUcsSUFBSSxRQUFPLFFBQVEsS0FBSztBQUVwQyxZQUFNLEtBQUksUUFBTyxXQUFXO0FBRTVCLFVBQUksS0FBSSxLQUFLO0FBQ1QsbUJBQVcsT0FBTyxhQUFhO0FBQUEsaUJBRTFCLEtBQUksT0FBUyxLQUFJLE1BQU87QUFDN0IsbUJBQVcsT0FBTyxhQUFjLE1BQUssSUFBSztBQUMxQyxtQkFBVyxPQUFPLGFBQWMsS0FBSSxLQUFNO0FBQUEsYUFFekM7QUFDRCxtQkFBVyxPQUFPLGFBQWMsTUFBSyxLQUFNO0FBQzNDLG1CQUFXLE9BQU8sYUFBZSxNQUFLLElBQUssS0FBTTtBQUNqRCxtQkFBVyxPQUFPLGFBQWMsS0FBSSxLQUFNO0FBQUE7QUFBQTtBQUtsRCxXQUFPO0FBQUE7QUFHWCxNQUFJLElBQUU7QUFDTixNQUFJLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRTtBQUN4QixRQUFNLE1BQUksR0FBRyxNQUFJLElBQUksTUFBSSxJQUFJLE1BQUk7QUFDakMsUUFBTSxNQUFJLEdBQUcsTUFBSSxHQUFJLE1BQUksSUFBSSxNQUFJO0FBQ2pDLFFBQU0sTUFBSSxHQUFHLE1BQUksSUFBSSxNQUFJLElBQUksTUFBSTtBQUNqQyxRQUFNLE1BQUksR0FBRyxNQUFJLElBQUksTUFBSSxJQUFJLE1BQUk7QUFFakMsV0FBUyxXQUFXO0FBRXBCLE1BQUksbUJBQW1CO0FBRXZCLE1BQUk7QUFBWSxNQUFJO0FBQVksTUFBSTtBQUFZLE1BQUk7QUFFcEQsT0FBSyxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBRyxJQUFJO0FBQ3ZCLFNBQUc7QUFBRyxTQUFHO0FBQUcsU0FBRztBQUFHLFNBQUc7QUFDckIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLElBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsSUFBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLElBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsSUFBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLElBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsSUFBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLElBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsS0FBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxLQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLEtBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsS0FBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxLQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLEtBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsSUFBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLEtBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsSUFBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLEtBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsS0FBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLElBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsS0FBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLElBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsS0FBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLElBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsS0FBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLElBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsS0FBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxLQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLElBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsSUFBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLEtBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsS0FBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLElBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsSUFBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLEtBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsS0FBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLElBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsSUFBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxLQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLElBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsS0FBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLEtBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsSUFBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLEtBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsSUFBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxLQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLElBQUksS0FBSTtBQUN6QixRQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLElBQUUsS0FBSSxLQUFJO0FBQ3pCLFFBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUUsSUFBRSxJQUFJLEtBQUk7QUFDekIsUUFBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRSxJQUFFLElBQUksS0FBSTtBQUN6QixRQUFFLFlBQVksR0FBRTtBQUNoQixRQUFFLFlBQVksR0FBRTtBQUNoQixRQUFFLFlBQVksR0FBRTtBQUNoQixRQUFFLFlBQVksR0FBRTtBQUFBO0FBR3BCLFFBQU0sT0FBTyxVQUFVLEtBQUcsVUFBVSxLQUFHLFVBQVUsS0FBRyxVQUFVO0FBRTlELFNBQU8sS0FBSztBQUFBOzs7QU4vS2hCLElBQU0sZ0JBQWdCLENBQUMsUUFBZ0IsSUFBSSx1QkFBTztBQUVsRCxrQkFBbUIsR0FBVztBQUM3QixRQUFNLE1BQU0sRUFBRTtBQUNkLE1BQUcsT0FBTztBQUFJLFdBQU87QUFDckIsU0FBTyxFQUFFLFVBQVUsR0FBRyxNQUFNLE1BQU0sRUFBRSxVQUFVLE1BQU0sSUFBSTtBQUFBO0FBUXpELG9CQUFvQixLQUFhLElBQXVCO0FBQ3RELCtCQUFRO0FBQUEsSUFDUixRQUFRO0FBQUEsSUFDUjtBQUFBLEtBQ0UsS0FBSyxTQUFVLFVBQWU7QUFDaEMsT0FBRyxLQUFLLE1BQU0sWUFBWTtBQUFBLEtBRTFCLE1BQU0sU0FBVSxPQUE0QjtBQUM1QyxrQkFBYyxNQUFNLFdBQVc7QUFBQTtBQUFBO0FBVWpDLHlCQUFnQyxHQUFXLFFBS3hDLElBQXVCO0FBQUE7QUFDekIsVUFBTSxPQUFPLElBQUksT0FBTztBQUN4QixVQUFNLFVBQVUsS0FBSyxNQUFNLElBQUksT0FBTyxZQUFZO0FBQ2xELFVBQU0sT0FBTyxPQUFPLFFBQVEsU0FBUyxLQUFLLE9BQU8sVUFBVSxPQUFPO0FBRWxFLFVBQU0sYUFBYSxNQUFNLE9BQU8sT0FBTyxPQUFPLFdBQVcsSUFBSSxjQUFjLE9BQU87QUFFbEYsVUFBTSxZQUFZLE1BQU0sS0FBSyxJQUFJLFdBQVc7QUFDNUMsVUFBTSxPQUFPLFVBQVUsSUFBSSxPQUFLLEVBQUUsU0FBUyxJQUFJLFNBQVMsR0FBRyxNQUFNLEtBQUs7QUFDdEUsVUFBTSxPQUFPLE9BQU8sUUFBUTtBQUM1QixVQUFNLFNBQWlCLEVBQUUsR0FBRyxRQUFRLE9BQU8sT0FBTyxNQUFNLE1BQU0sSUFBSSxPQUFPLElBQUksTUFBTSxTQUFTLFVBQVU7QUFDdEcsVUFBTSxRQUFRLE9BQU8sS0FBSyxRQUFRLElBQUksU0FBTyxHQUFHLE9BQU8sT0FBTyxRQUFRLEtBQUs7QUFDMUUsZUFBVyxrQ0FBa0MsU0FBUztBQUFBO0FBQUE7QUFHeEQsa0NBQXdDLEdBQVcsUUFLaEQsSUFBdUI7QUFBQTtBQUN6QixVQUFNLFdBQVc7QUFDaEIsVUFBTSxFQUFFLE9BQU8sTUFBTSxJQUFJLFdBQVcsYUFBYTtBQUtsRCw4QkFBTTtBQUFBLE1BQ0wsS0FBSyxHQUFHLDJDQUEyQyxXQUFXO0FBQUEsTUFDOUQsUUFBUTtBQUFBLE1BQ1IsU0FBUztBQUFBLFFBQ1IsNkJBQTZCO0FBQUEsUUFDN0IsZ0NBQWdDO0FBQUEsUUFDaEMsZ0JBQWdCO0FBQUEsUUFDaEIsbUJBQW1CLGFBQVM7QUFBQTtBQUFBLE1BRTNCLE1BQU0sQ0FBQyxFQUFFLE1BQU07QUFBQSxNQUNqQixjQUFjO0FBQUEsT0FDWixLQUFLLENBQUUsRUFBRSxXQUFZO0FBQ3ZCLFlBQU0sTUFBTyxTQUFRLElBQUksT0FBTyxDQUFDLEtBQWEsU0FBZ0M7QUFDN0UsY0FBTSxFQUFFLGVBQWUsT0FBTztBQUM5QixlQUFPLE1BQU0sYUFBYSxJQUFJLENBQUMsRUFBRSxXQUFXLE1BQU0sS0FBSztBQUFBLFNBQ3JEO0FBQ0QsU0FBRztBQUFBLE9BQ0gsTUFBTSxDQUFDLE1BQU07QUFDYixvQkFBYztBQUFBO0FBQUE7QUFBQTtBQUlsQiw4QkFBb0MsR0FBVyxRQUs1QyxJQUF1QjtBQUFBO0FBQ3hCLFVBQU0sRUFBRSxJQUFJLE1BQU0sT0FBTyxjQUFjO0FBQ3ZDLFVBQU0sT0FBUSxJQUFJLE9BQU07QUFFeEIsVUFBTSxPQUFPLElBQUksR0FBRyxRQUFRLElBQUksT0FBTztBQUN2QyxlQUFXLHdEQUF3RCxVQUFVLFFBQVEsV0FBVyxNQUFNLGNBQWMsY0FBYyxhQUFhLFFBQVE7QUFBQTtBQUFBO0FBR3pKLHFCQUFzQixLQUFhLElBQVM7QUFDM0Msa0NBQVcsRUFBRSxRQUFRLFFBQVEsT0FBTyxLQUFLLENBQUMsUUFBYTtBQUN0RCxPQUFHO0FBQUEsS0FDRCxNQUFNLFNBQVUsT0FBNEI7QUFDOUMsa0JBQWMsTUFBTSxXQUFXO0FBQUE7QUFBQTtBQUtqQyxJQUFNLFlBQTZCO0FBQUEsRUFFbEMsMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTixjQUFJO0FBQUEsRUFDSixjQUFJO0FBQUEsRUFDSixjQUFJO0FBQUEsRUFDSixjQUFJO0FBQUEsRUFDSiwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTixjQUFJO0FBQUEsRUFDSixvQkFBSztBQUFBLEVBQ0wsY0FBSTtBQUFBLEVBQ0osMEJBQU07QUFBQSxFQUNOLG9CQUFLO0FBQUEsRUFDTCxnQ0FBTztBQUFBLEVBQ1AsZ0NBQU87QUFBQSxFQUNQLGdDQUFPO0FBQUEsRUFDUCwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLGdDQUFPO0FBQUEsRUFDUCxvQkFBSztBQUFBLEVBQ0wsb0JBQUs7QUFBQSxFQUNMLG9CQUFLO0FBQUEsRUFDTCxnQ0FBTztBQUFBLEVBQ1Asb0JBQUs7QUFBQSxFQUNMLG9CQUFLO0FBQUEsRUFDTCxvQkFBSztBQUFBLEVBQ0wsNENBQVM7QUFBQSxFQUNULDBCQUFNO0FBQUEsRUFDTixvQkFBSztBQUFBLEVBQ0wsb0JBQUs7QUFBQSxFQUNMLDBCQUFNO0FBQUEsRUFDTixnQ0FBTztBQUFBLEVBQ1AsMEJBQU07QUFBQSxFQUNOLGdDQUFPO0FBQUEsRUFDUCwwQkFBTTtBQUFBLEVBQ04sb0JBQUs7QUFBQSxFQUNMLDBCQUFNO0FBQUEsRUFDTixvQkFBSztBQUFBLEVBQ0wsb0JBQUs7QUFBQSxFQUNMLG9CQUFLO0FBQUEsRUFDTCxrREFBVTtBQUFBLEVBQ1YsZ0NBQU87QUFBQSxFQUNQLDREQUFlO0FBQUEsRUFDZixzREFBYztBQUFBLEVBQ2QsZ0NBQU87QUFBQSxFQUNQLHNDQUFRO0FBQUEsRUFDUixvQkFBSztBQUFBLEVBQ0wsMEJBQU07QUFBQSxFQUNOLGNBQUk7QUFBQSxFQUNKLG9CQUFLO0FBQUEsRUFDTCwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sc0NBQVE7QUFBQSxFQUNSLHNDQUFRO0FBQUEsRUFDUixnQ0FBTztBQUFBLEVBQ1AsZ0NBQU87QUFBQSxFQUNQLGdDQUFPO0FBQUEsRUFDUCwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLGdDQUFPO0FBQUEsRUFDUCxvQkFBSztBQUFBLEVBQ0wsMEJBQU07QUFBQSxFQUNOLG9CQUFLO0FBQUEsRUFDTCwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLGdDQUFPO0FBQUEsRUFDUCxnQ0FBTztBQUFBLEVBQ1AsZ0NBQU87QUFBQSxFQUNQLG9CQUFLO0FBQUEsRUFDTCwwQkFBTTtBQUFBLEVBQ04sb0JBQUs7QUFBQSxFQUNMLG9CQUFLO0FBQUEsRUFDTCwwQkFBTTtBQUFBLEVBQ04sb0JBQUs7QUFBQSxFQUNMLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sb0JBQUs7QUFBQSxFQUNMLDBCQUFNO0FBQUEsRUFDTixnQ0FBTztBQUFBLEVBQ1Asb0JBQUs7QUFBQSxFQUNMLG9CQUFLO0FBQUEsRUFDTCwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLGdDQUFPO0FBQUEsRUFDUCxzQ0FBUTtBQUFBLEVBQ1Isb0JBQUs7QUFBQSxFQUNMLDBCQUFNO0FBQUEsRUFDTixvQkFBSztBQUFBLEVBQ0wsb0JBQUs7QUFBQSxFQUNMLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sc0NBQVE7QUFBQSxFQUNSLDBCQUFNO0FBQUEsRUFDTixvQkFBSztBQUFBLEVBQ0wsb0JBQUs7QUFBQSxFQUNMLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sb0JBQUs7QUFBQSxFQUNMLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLGdDQUFPO0FBQUEsRUFDUCxnQ0FBTztBQUFBLEVBQ1AsMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTixnQ0FBTztBQUFBLEVBQ1AsMEJBQU07QUFBQTtBQUlQLElBQU0sc0JBQXVDO0FBQUEsRUFDNUMsa0NBQVM7QUFBQSxFQUNULHdDQUFVO0FBQUEsRUFDVixrQ0FBUztBQUFBLEVBQ1QsNEJBQVE7QUFBQSxFQUNSLGtDQUFTO0FBQUEsRUFDVCw0QkFBUTtBQUFBLEVBQ1Isc0RBQWM7QUFBQSxFQUNkLFVBQVU7QUFBQSxFQUNWLGtDQUFTO0FBQUEsRUFDVCw0QkFBUTtBQUFBLEVBQ1IsNERBQWU7QUFBQSxFQUNmLGtDQUFTO0FBQUEsRUFDVCw0QkFBUTtBQUFBLEVBQ1Isd0NBQVU7QUFBQSxFQUNWLDRCQUFRO0FBQUEsRUFDUiw0QkFBUTtBQUFBLEVBQ1IsNEJBQVE7QUFBQSxFQUNSLGtDQUFTO0FBQUEsRUFDVCxzQkFBTztBQUFBLEVBQ1Asc0JBQU87QUFBQSxFQUNQLHNCQUFPO0FBQUEsRUFDUCxrQ0FBUztBQUFBLEVBQ1Qsc0JBQU87QUFBQSxFQUNQLGdCQUFNO0FBQUEsRUFDTixrQ0FBUztBQUFBLEVBQ1Qsc0JBQU87QUFBQSxFQUNQLHNCQUFPO0FBQUEsRUFDUCw0QkFBUTtBQUFBLEVBQ1Isc0JBQU87QUFBQSxFQUNQLGdCQUFNO0FBQUEsRUFDTiw4Q0FBVztBQUFBLEVBQ1gsa0NBQVM7QUFBQSxFQUNULGtDQUFTO0FBQUEsRUFDVCxnQkFBTTtBQUFBLEVBQ04sc0JBQU87QUFBQSxFQUNQLGtDQUFTO0FBQUEsRUFDVCw4Q0FBVztBQUFBLEVBQ1gsNEJBQVE7QUFBQSxFQUNSLFNBQVM7QUFBQSxFQUNULG9EQUFZO0FBQUEsRUFDWiw0QkFBUTtBQUFBLEVBQ1Isc0JBQU87QUFBQSxFQUNQLHdDQUFVO0FBQUEsRUFDVixrQ0FBUztBQUFBLEVBQ1QsNEJBQVE7QUFBQSxFQUNSLGdEQUFhO0FBQUEsRUFDYiw0QkFBUTtBQUFBLEVBQ1IsNEJBQVE7QUFBQSxFQUNSLGdCQUFNO0FBQUEsRUFDTiw0QkFBUTtBQUFBLEVBQ1IsNEJBQVE7QUFBQSxFQUNSLHNCQUFPO0FBQUEsRUFDUCw0QkFBUTtBQUFBLEVBQ1IsbUNBQWU7QUFBQSxFQUNmLGdCQUFNO0FBQUEsRUFDTiwwQ0FBWTtBQUFBLEVBQ1osMENBQVk7QUFBQSxFQUNaLDREQUFlO0FBQUEsRUFDZixzQkFBTztBQUFBLEVBQ1Asa0NBQVM7QUFBQSxFQUNULDRCQUFRO0FBQUEsRUFDUiw0QkFBUTtBQUFBLEVBQ1Isd0NBQVU7QUFBQSxFQUNWLGdEQUFhO0FBQUEsRUFDYix3Q0FBVTtBQUFBLEVBQ1YsNEJBQVE7QUFBQSxFQUNSLHNCQUFPO0FBQUEsRUFDUCw0QkFBUTtBQUFBLEVBQ1IsZ0RBQWE7QUFBQSxFQUNiLG9DQUFXO0FBQUEsRUFDWCxnQkFBTTtBQUFBLEVBQ04sNEJBQVE7QUFBQSxFQUNSLHNCQUFPO0FBQUEsRUFDUCw0QkFBUTtBQUFBLEVBQ1IsNEJBQVE7QUFBQSxFQUNSLHNCQUFPO0FBQUEsRUFDUCxzQkFBTztBQUFBLEVBQ1Asb0RBQVk7QUFBQSxFQUNaLGdEQUFhO0FBQUEsRUFDYiw0QkFBUTtBQUFBLEVBQ1Isb0RBQVk7QUFBQSxFQUNaLGtDQUFTO0FBQUEsRUFDVCxnQkFBTTtBQUFBLEVBQ04sZ0RBQWE7QUFBQSxFQUNiLGdFQUFjO0FBQUEsRUFDZCwwREFBYTtBQUFBLEVBQ2Isa0NBQVM7QUFBQSxFQUNULHdDQUFVO0FBQUEsRUFDVixnRUFBYztBQUFBLEVBQ2QsNEJBQVE7QUFBQSxFQUNSLGdFQUFjO0FBQUEsRUFDZCxzQkFBTztBQUFBLEVBQ1AsNEJBQVE7QUFBQSxFQUNSLDRCQUFRO0FBQUEsRUFDUixvREFBWTtBQUFBLEVBQ1osNEJBQVE7QUFBQSxFQUNSLGdCQUFNO0FBQUEsRUFDTixnQkFBTTtBQUFBLEVBQ04sd0NBQVU7QUFBQSxFQUNWLHNCQUFPO0FBQUEsRUFDUCw0QkFBUTtBQUFBLEVBQ1IsZ0RBQWE7QUFBQSxFQUNiLDRCQUFRO0FBQUEsRUFDUiw0QkFBUTtBQUFBLEVBQ1IsNEJBQVE7QUFBQSxFQUNSLGdFQUFjO0FBQUEsRUFDZCxzREFBYztBQUFBLEVBQ2Qsc0JBQU87QUFBQSxFQUNQLDRCQUFRO0FBQUEsRUFDUix3Q0FBVTtBQUFBLEVBQ1Ysc0JBQU87QUFBQTtBQUlSLElBQU0sa0JBQW1DO0FBQUEsRUFDdkMsMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTixvQkFBSztBQUFBLEVBQ0wsc0NBQVE7QUFBQSxFQUNSLHdEQUFXO0FBQUEsRUFDWCxvQkFBSztBQUFBLEVBQ0wsMEJBQU07QUFBQSxFQUNOLGdDQUFPO0FBQUEsRUFDUCwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLGdDQUFPO0FBQUEsRUFDUCw0Q0FBUztBQUFBLEVBQ1QsMEJBQU07QUFBQSxFQUNOLGdDQUFPO0FBQUEsRUFDUCxnQ0FBTztBQUFBLEVBQ1AsMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTixvQkFBSztBQUFBLEVBQ0wsb0JBQUs7QUFBQSxFQUNMLGdDQUFPO0FBQUEsRUFDUCxnQ0FBTztBQUFBLEVBQ1AsMEJBQU07QUFBQSxFQUNOLHNDQUFRO0FBQUEsRUFDUixnQ0FBTztBQUFBLEVBQ1AsMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTixnQ0FBTztBQUFBLEVBQ1AsZ0NBQU87QUFBQSxFQUNQLDBCQUFNO0FBQUEsRUFDTixvQkFBSztBQUFBLEVBQ0wsb0JBQUs7QUFBQSxFQUNMLGdDQUFPO0FBQUEsRUFDUCwwQkFBTTtBQUFBLEVBQ04sb0JBQUs7QUFBQSxFQUNMLGdDQUFPO0FBQUEsRUFDUCxnQ0FBTztBQUFBLEVBQ1AsMEJBQU07QUFBQSxFQUNOLG9CQUFLO0FBQUEsRUFDTCxvQkFBSztBQUFBLEVBQ0wsY0FBSTtBQUFBLEVBQ0osb0JBQUs7QUFBQSxFQUNMLGNBQUk7QUFBQSxFQUNKLG9CQUFLO0FBQUEsRUFDTCwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLGNBQUk7QUFBQSxFQUNKLGNBQUk7QUFBQSxFQUNKLDBCQUFNO0FBQUEsRUFDTixvQkFBSztBQUFBLEVBQ0wsY0FBSTtBQUFBLEVBQ0osMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTixvQkFBSztBQUFBLEVBQ0wsb0JBQUs7QUFBQSxFQUNMLG9CQUFLO0FBQUEsRUFDTCxnQ0FBTztBQUFBLEVBQ1Asb0JBQUs7QUFBQSxFQUNMLDBCQUFNO0FBQUEsRUFDTixnQ0FBTztBQUFBLEVBQ1AsZ0NBQU87QUFBQSxFQUNQLDBCQUFNO0FBQUEsRUFDTixvQkFBSztBQUFBLEVBQ0wsMEJBQU07QUFBQSxFQUNOLGNBQUk7QUFBQSxFQUNKLG9CQUFLO0FBQUEsRUFDTCxvQkFBSztBQUFBLEVBQ0wsMEJBQU07QUFBQSxFQUNOLG9CQUFLO0FBQUEsRUFDTCxvQkFBSztBQUFBLEVBQ0wsb0JBQUs7QUFBQSxFQUNMLGdDQUFPO0FBQUEsRUFDUCxnQ0FBTztBQUFBLEVBQ1AsZ0NBQU87QUFBQSxFQUNQLHNDQUFRO0FBQUEsRUFDUixvQkFBSztBQUFBLEVBQ0wsMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTixvQkFBSztBQUFBLEVBQ0wsMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTiw0Q0FBUztBQUFBLEVBQ1QsMEJBQU07QUFBQSxFQUNOLGdDQUFPO0FBQUEsRUFDUCwwQkFBTTtBQUFBLEVBQ04sZ0NBQU87QUFBQSxFQUNQLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sb0JBQUs7QUFBQSxFQUNMLG9CQUFLO0FBQUEsRUFDTCxnQ0FBTztBQUFBLEVBQ1AsZ0NBQU87QUFBQSxFQUNQLGdDQUFPO0FBQUEsRUFDUCxvQkFBSztBQUFBLEVBQ0wsMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sZ0NBQU87QUFBQSxFQUNQLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLG9CQUFLO0FBQUEsRUFDTCxvQkFBSztBQUFBLEVBQ0wsb0JBQUs7QUFBQSxFQUNMLG9CQUFLO0FBQUEsRUFDTCwwQkFBTTtBQUFBLEVBQ04sZ0NBQU87QUFBQSxFQUNQLHNDQUFRO0FBQUEsRUFDUiwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sd0RBQVc7QUFBQSxFQUNYLG9CQUFLO0FBQUEsRUFDTCwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLGNBQUk7QUFBQSxFQUNKLG9CQUFLO0FBQUEsRUFDTCxnQ0FBTztBQUFBLEVBQ1Asc0NBQVE7QUFBQSxFQUNSLGdDQUFPO0FBQUEsRUFDUCwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sc0NBQVE7QUFBQSxFQUNSLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sb0JBQUs7QUFBQSxFQUNMLDBCQUFNO0FBQUEsRUFDTixjQUFJO0FBQUEsRUFDSixvQkFBSztBQUFBLEVBQ0wsZ0NBQU87QUFBQSxFQUNQLDBCQUFNO0FBQUEsRUFDTiwyREFBYztBQUFBLEVBQ2QsZ0NBQU87QUFBQSxFQUNQLG9CQUFLO0FBQUEsRUFDTCwwQkFBTTtBQUFBLEVBQ04sb0JBQUs7QUFBQSxFQUNMLGdDQUFPO0FBQUEsRUFDUCxnQ0FBTztBQUFBLEVBQ1Asc0NBQVE7QUFBQSxFQUNSLGdDQUFPO0FBQUEsRUFDUCxnRUFBYztBQUFBLEVBQ2QsMEJBQU07QUFBQSxFQUNOLGNBQUk7QUFBQSxFQUNKLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTixzQ0FBUTtBQUFBLEVBQ1IsMEJBQU07QUFBQSxFQUNOLDRDQUFTO0FBQUEsRUFDVCwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLG9CQUFLO0FBQUEsRUFDTCwwQkFBTTtBQUFBLEVBQ04sb0JBQUs7QUFBQSxFQUNMLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTixvQkFBSztBQUFBLEVBQ0wsMEJBQU07QUFBQSxFQUNOLGdDQUFPO0FBQUEsRUFDUCxnQ0FBTztBQUFBLEVBQ1AsZ0NBQU87QUFBQSxFQUNQLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sMEJBQU07QUFBQSxFQUNOLGdDQUFPO0FBQUEsRUFDUCxvQkFBSztBQUFBLEVBQ0wsb0JBQUs7QUFBQSxFQUNMLG9CQUFLO0FBQUEsRUFDTCwwQkFBTTtBQUFBLEVBQ04sb0JBQUs7QUFBQSxFQUNMLGNBQUk7QUFBQSxFQUNKLG9CQUFLO0FBQUEsRUFDTCxvQkFBSztBQUFBLEVBQ0wsMEJBQU07QUFBQSxFQUNOLG9CQUFLO0FBQUEsRUFDTCwwQkFBTTtBQUFBLEVBQ04sb0JBQUs7QUFBQSxFQUNMLG9CQUFLO0FBQUEsRUFDTCwwQkFBTTtBQUFBLEVBQ04sb0JBQUs7QUFBQSxFQUNMLG9CQUFLO0FBQUEsRUFDTCwwQkFBTTtBQUFBLEVBQ04sZ0NBQU87QUFBQSxFQUNQLDRDQUFTO0FBQUEsRUFDVCxvQkFBSztBQUFBLEVBQ0wsMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTixvQkFBSztBQUFBLEVBQ0wsMEJBQU07QUFBQSxFQUNOLDBCQUFNO0FBQUEsRUFDTiwwQkFBTTtBQUFBLEVBQ04sb0JBQUs7QUFBQSxFQUNMLG9CQUFLO0FBQUE7QUFJUCw0QkFBNEIsV0FBNkM7QUFDdkUsU0FBTyxPQUFPLEtBQUssV0FBVyxPQUFPLENBQUMsS0FBc0IsUUFBaUIsaUNBQ3hFLE1BRHdFO0FBQUEsS0FDbEUsVUFBVSxPQUFPLEdBQUcsT0FBTyxVQUFVO0FBQUEsTUFDNUM7QUFBQTtBQUdOLGtCQUFrQixLQUFVO0FBQzFCLFNBQU8sUUFBUSxRQUFRLE9BQU8sVUFBVSxTQUFTLEtBQUssU0FBUztBQUFBO0FBR2pFLHVCQUF3QixNQUFNLElBQUk7QUFBRSxTQUFPLFNBQVMsUUFBUSxPQUFPLEtBQUssS0FBSyxTQUFTO0FBQUE7QUFFdEYsbUJBQW1CLE9BQWtELElBQWdCO0FBQ25GLFFBQU0sZ0JBQWdCLE1BQU0sT0FBTyxVQUFRLENBQUMsS0FBSyxPQUFPLElBQUksVUFBUSxLQUFLO0FBQ3pFLE1BQUksY0FBYyxRQUFRO0FBQ3hCLGtCQUFjLGNBQWMsS0FBSztBQUNqQztBQUFBLFNBQ0s7QUFDTDtBQUFBO0FBQUE7OztBRC9pQkosSUFBTSxpQkFBK0I7QUFBQSxFQUNuQztBQUFBLElBQ0UsT0FBTztBQUFBLElBQ1AsTUFBTTtBQUFBLE1BQ0osRUFBRSxNQUFNLFFBQVEsTUFBTTtBQUFBLE1BQ3RCLEVBQUUsTUFBTSxRQUFRLE1BQU0sNEJBQTRCLE1BQU07QUFBQSxNQUN4RCxFQUFFLE1BQU0sUUFBUSxNQUFNO0FBQUE7QUFBQSxJQUV4QixVQUFVO0FBQUEsTUFDUjtBQUFBLFFBQ0UsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sS0FBSztBQUFBLFFBQ0wsU0FBUztBQUFBO0FBQUEsTUFFWDtBQUFBLFFBQ0UsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sS0FBSztBQUFBLFFBQ0wsU0FBUztBQUFBO0FBQUEsTUFDUjtBQUFBLFFBQ0QsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sS0FBSztBQUFBLFFBQ0wsU0FBUztBQUFBO0FBQUEsTUFDUjtBQUFBLFFBQ0QsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sS0FBSztBQUFBLFFBQ0wsU0FBUztBQUFBLFFBQ1QsU0FBUyxtQkFBbUI7QUFBQTtBQUFBLE1BQzNCO0FBQUEsUUFDRCxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixLQUFLO0FBQUEsUUFDTCxTQUFTO0FBQUEsUUFDVCxTQUFTLG1CQUFtQjtBQUFBO0FBQUEsTUFDM0I7QUFBQSxRQUNELE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLEtBQUs7QUFBQSxRQUNMLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUlmO0FBQUEsSUFDRSxPQUFPO0FBQUEsSUFDUCxNQUFNO0FBQUEsTUFDSixFQUFFLE1BQU0sUUFBUSxNQUFNO0FBQUEsTUFDdEI7QUFBQSxRQUNFLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQTtBQUFBLE1BRVIsRUFBRSxNQUFNLFFBQVEsTUFBTTtBQUFBO0FBQUEsSUFFeEIsVUFBVTtBQUFBLE1BQ1I7QUFBQSxRQUNFLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLEtBQUs7QUFBQSxRQUNMLFNBQVM7QUFBQTtBQUFBLE1BQ1I7QUFBQSxRQUNELE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLEtBQUs7QUFBQSxRQUNMLFNBQVM7QUFBQTtBQUFBLE1BQ1I7QUFBQSxRQUNELE1BQU07QUFBQSxRQUNOLE1BQUs7QUFBQSxRQUNMLE1BQU07QUFBQSxRQUNOLEtBQUs7QUFBQSxRQUNMLFNBQVM7QUFBQTtBQUFBLE1BQ1I7QUFBQSxRQUNELE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLEtBQUs7QUFBQSxRQUNMLFNBQVM7QUFBQSxRQUNULFNBQVMsbUJBQW1CO0FBQUE7QUFBQSxNQUMzQjtBQUFBLFFBQ0QsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sS0FBSztBQUFBLFFBQ0wsU0FBUztBQUFBLFFBQ1QsU0FBUyxtQkFBbUI7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUlsQztBQUFBLElBQ0UsT0FBTztBQUFBLElBQ1AsTUFBTTtBQUFBLE1BQ0osRUFBRSxNQUFNLFFBQVEsTUFBTTtBQUFBLE1BQ3RCLEVBQUUsTUFBTSxRQUFRLE1BQU0sK0JBQStCLE1BQU07QUFBQSxNQUMzRCxFQUFFLE1BQU0sUUFBUSxNQUFNO0FBQUE7QUFBQSxJQUV4QixVQUFVO0FBQUEsTUFDUjtBQUFBLFFBQ0UsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sS0FBSztBQUFBLFFBQ0wsU0FBUztBQUFBO0FBQUEsTUFFWDtBQUFBLFFBQ0UsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sS0FBSztBQUFBLFFBQ0wsU0FBUztBQUFB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
